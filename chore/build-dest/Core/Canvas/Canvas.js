import GLExtensionRegistory from "./GL/GLExtensionRegistory";
import Rectangle from "../../Math/Rectangle";
import JThreeEvent from "../../Base/JThreeEvent";
import CanvasSizeChangedEventArgs from "./CanvasSizeChangedEventArgs";
import Color4 from "../../Math/Color4";
import CanvasRegion from "./CanvasRegion";
import { WebGLNotSupportedException } from "../../Exceptions";
/**
 * The class to manage HTMLCanvasElement.
 * Provides most of interfaces related to GLContext except the features resource manager providing.
 *
 * HTMLCanvasElementを管理するクラスs
 * リソースマネージャーが提供する機能以外のGLContextが関連する機能のほとんどを内包します。
 */
class Canvas extends CanvasRegion {
    /**
     * Constructor
     * @param  {HTMLCanvasElement} canvasElement the HTMLCanvasElement that is managed by this class.
     */
    constructor(canvasElement) {
        super(canvasElement);
        /**
         * event cache for resize event.
         */
        this.canvasResized = new JThreeEvent();
        /**
        * backing field for ClearColor
        */
        this.clearColor = new Color4(1, 1, 1, 1);
        this.glExtensionResolver = new GLExtensionRegistory();
        this._lastWidth = canvasElement.width;
        this._lastHeight = canvasElement.height;
        this.__setGLContext(this._tryGetGLContext());
    }
    /**
     * Called after rendering. It needs super.afterRenderer(renderer) when you need to override.
     */
    afterRender(renderer) {
        return;
    }
    afterRenderAll() {
        return;
    }
    beforeRender(renderer) {
        return;
    }
    beforeRenderAll() {
        // check size changed or not.
        if (this.canvasElement.height !== this._lastHeight || this.canvasElement.width !== this._lastWidth) {
            this.canvasResized.fire(this, new CanvasSizeChangedEventArgs(this, this._lastWidth, this._lastHeight, this.canvasElement.width, this.canvasElement.height));
            this._lastHeight = this.canvasElement.height;
            this._lastWidth = this.canvasElement.width;
        }
        this._clearCanvas();
    }
    get region() {
        return new Rectangle(0, 0, this._lastWidth, this._lastHeight);
    }
    /**
     * apply gl context after webglrendering context initiated.
     */
    __setGLContext(glContext) {
        this.gl = glContext;
        this.glExtensionResolver.checkExtensions(glContext);
        return;
    }
    _clearCanvas() {
        this.gl.colorMask(true, true, true, true);
        this.gl.clearColor.apply(this.gl, this.clearColor.rawElements);
        this.gl.depthMask(true);
        this.gl.clearDepth(1.0);
        this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);
    }
    /**
     * Attempts to try getting GLContext from canvas.
     * @return {WebGLRenderingContext} [description]
     */
    _tryGetGLContext() {
        try {
            return this.canvasElement.getContext("webgl") || this.canvasElement.getContext("experimental-webgl");
        }
        catch (e) {
            throw new WebGLNotSupportedException();
        }
    }
}
export default Canvas;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvQ2FudmFzL0NhbnZhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxvQkFBb0IsTUFBTSwyQkFBMkI7T0FDckQsU0FBUyxNQUFNLHNCQUFzQjtPQUVyQyxXQUFXLE1BQU0sd0JBQXdCO09BQ3pDLDBCQUEwQixNQUFNLDhCQUE4QjtPQUM5RCxNQUFNLE1BQU0sbUJBQW1CO09BQy9CLFlBQVksTUFBTSxnQkFBZ0I7T0FDbEMsRUFBQywwQkFBMEIsRUFBQyxNQUFNLGtCQUFrQjtBQUUzRDs7Ozs7O0dBTUc7QUFDSCxxQkFBcUIsWUFBWTtJQUUvQjs7O09BR0c7SUFDSCxZQUFZLGFBQWdDO1FBQzFDLE1BQU0sYUFBYSxDQUFDLENBQUM7UUFNdkI7O1dBRUc7UUFDSSxrQkFBYSxHQUE0QyxJQUFJLFdBQVcsRUFBOEIsQ0FBQztRQUU5Rzs7VUFFRTtRQUNLLGVBQVUsR0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUk1Qyx3QkFBbUIsR0FBeUIsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBakI1RSxJQUFJLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBMEJEOztPQUVHO0lBQ0ksV0FBVyxDQUFDLFFBQXVCO1FBQ3hDLE1BQU0sQ0FBQztJQUNULENBQUM7SUFFTSxjQUFjO1FBQ25CLE1BQU0sQ0FBQztJQUNULENBQUM7SUFDTSxZQUFZLENBQUMsUUFBdUI7UUFDekMsTUFBTSxDQUFDO0lBQ1QsQ0FBQztJQUNNLGVBQWU7UUFDcEIsNkJBQTZCO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbkcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksMEJBQTBCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDNUosSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztZQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDM0YsQ0FBQztRQUNELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBR0QsSUFBVyxNQUFNO1FBQ2YsTUFBTSxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVEOztPQUVHO0lBQ08sY0FBYyxDQUFDLFNBQWdDO1FBQ3ZELElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDO0lBQ1QsQ0FBQztJQUVPLFlBQVk7UUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFRDs7O09BR0c7SUFDSyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxDQUF3QixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzlILENBQUU7UUFBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxJQUFJLDBCQUEwQixFQUFFLENBQUM7UUFDekMsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBR0QsZUFBZSxNQUFNLENBQUMiLCJmaWxlIjoiQ29yZS9DYW52YXMvQ2FudmFzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdMRXh0ZW5zaW9uUmVnaXN0b3J5IGZyb20gXCIuL0dML0dMRXh0ZW5zaW9uUmVnaXN0b3J5XCI7XG5pbXBvcnQgUmVjdGFuZ2xlIGZyb20gXCIuLi8uLi9NYXRoL1JlY3RhbmdsZVwiO1xuaW1wb3J0IEJhc2ljUmVuZGVyZXIgZnJvbSBcIi4uL1JlbmRlcmVycy9CYXNpY1JlbmRlcmVyXCI7XG5pbXBvcnQgSlRocmVlRXZlbnQgZnJvbSBcIi4uLy4uL0Jhc2UvSlRocmVlRXZlbnRcIjtcbmltcG9ydCBDYW52YXNTaXplQ2hhbmdlZEV2ZW50QXJncyBmcm9tIFwiLi9DYW52YXNTaXplQ2hhbmdlZEV2ZW50QXJnc1wiO1xuaW1wb3J0IENvbG9yNCBmcm9tIFwiLi4vLi4vTWF0aC9Db2xvcjRcIjtcbmltcG9ydCBDYW52YXNSZWdpb24gZnJvbSBcIi4vQ2FudmFzUmVnaW9uXCI7XG5pbXBvcnQge1dlYkdMTm90U3VwcG9ydGVkRXhjZXB0aW9ufSBmcm9tIFwiLi4vLi4vRXhjZXB0aW9uc1wiO1xuXG4vKipcbiAqIFRoZSBjbGFzcyB0byBtYW5hZ2UgSFRNTENhbnZhc0VsZW1lbnQuXG4gKiBQcm92aWRlcyBtb3N0IG9mIGludGVyZmFjZXMgcmVsYXRlZCB0byBHTENvbnRleHQgZXhjZXB0IHRoZSBmZWF0dXJlcyByZXNvdXJjZSBtYW5hZ2VyIHByb3ZpZGluZy5cbiAqXG4gKiBIVE1MQ2FudmFzRWxlbWVudOOCkueuoeeQhuOBmeOCi+OCr+ODqeOCuXNcbiAqIOODquOCveODvOOCueODnuODjeODvOOCuOODo+ODvOOBjOaPkOS+m+OBmeOCi+apn+iDveS7peWkluOBrkdMQ29udGV4dOOBjOmWoumAo+OBmeOCi+apn+iDveOBruOBu+OBqOOCk+OBqeOCkuWGheWMheOBl+OBvuOBmeOAglxuICovXG5jbGFzcyBDYW52YXMgZXh0ZW5kcyBDYW52YXNSZWdpb24ge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gIHtIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzRWxlbWVudCB0aGUgSFRNTENhbnZhc0VsZW1lbnQgdGhhdCBpcyBtYW5hZ2VkIGJ5IHRoaXMgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjYW52YXNFbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgIHN1cGVyKGNhbnZhc0VsZW1lbnQpO1xuICAgIHRoaXMuX2xhc3RXaWR0aCA9IGNhbnZhc0VsZW1lbnQud2lkdGg7XG4gICAgdGhpcy5fbGFzdEhlaWdodCA9IGNhbnZhc0VsZW1lbnQuaGVpZ2h0O1xuICAgIHRoaXMuX19zZXRHTENvbnRleHQodGhpcy5fdHJ5R2V0R0xDb250ZXh0KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIGV2ZW50IGNhY2hlIGZvciByZXNpemUgZXZlbnQuXG4gICAqL1xuICBwdWJsaWMgY2FudmFzUmVzaXplZDogSlRocmVlRXZlbnQ8Q2FudmFzU2l6ZUNoYW5nZWRFdmVudEFyZ3M+ID0gbmV3IEpUaHJlZUV2ZW50PENhbnZhc1NpemVDaGFuZ2VkRXZlbnRBcmdzPigpO1xuXG4gIC8qKlxuICAqIGJhY2tpbmcgZmllbGQgZm9yIENsZWFyQ29sb3JcbiAgKi9cbiAgcHVibGljIGNsZWFyQ29sb3I6IENvbG9yNCA9IG5ldyBDb2xvcjQoMSwgMSwgMSwgMSk7XG5cbiAgcHVibGljIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG5cbiAgcHVibGljIGdsRXh0ZW5zaW9uUmVzb2x2ZXI6IEdMRXh0ZW5zaW9uUmVnaXN0b3J5ID0gbmV3IEdMRXh0ZW5zaW9uUmVnaXN0b3J5KCk7XG5cbiAgLyoqXG4gICAqIGNhbnZhcyBoZWlnaHQgb2YgbGFzdCB0aW1lXG4gICAqL1xuICBwcml2YXRlIF9sYXN0SGVpZ2h0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIGNhbnZhcyB3aWR0aCBvZiBsYXN0IHRpbWVcbiAgICovXG4gIHByaXZhdGUgX2xhc3RXaWR0aDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgcmVuZGVyaW5nLiBJdCBuZWVkcyBzdXBlci5hZnRlclJlbmRlcmVyKHJlbmRlcmVyKSB3aGVuIHlvdSBuZWVkIHRvIG92ZXJyaWRlLlxuICAgKi9cbiAgcHVibGljIGFmdGVyUmVuZGVyKHJlbmRlcmVyOiBCYXNpY1JlbmRlcmVyKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHVibGljIGFmdGVyUmVuZGVyQWxsKCk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuICBwdWJsaWMgYmVmb3JlUmVuZGVyKHJlbmRlcmVyOiBCYXNpY1JlbmRlcmVyKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHB1YmxpYyBiZWZvcmVSZW5kZXJBbGwoKTogdm9pZCB7XG4gICAgLy8gY2hlY2sgc2l6ZSBjaGFuZ2VkIG9yIG5vdC5cbiAgICBpZiAodGhpcy5jYW52YXNFbGVtZW50LmhlaWdodCAhPT0gdGhpcy5fbGFzdEhlaWdodCB8fCB0aGlzLmNhbnZhc0VsZW1lbnQud2lkdGggIT09IHRoaXMuX2xhc3RXaWR0aCkge1xuICAgICAgdGhpcy5jYW52YXNSZXNpemVkLmZpcmUodGhpcywgbmV3IENhbnZhc1NpemVDaGFuZ2VkRXZlbnRBcmdzKHRoaXMsIHRoaXMuX2xhc3RXaWR0aCwgdGhpcy5fbGFzdEhlaWdodCwgdGhpcy5jYW52YXNFbGVtZW50LndpZHRoLCB0aGlzLmNhbnZhc0VsZW1lbnQuaGVpZ2h0KSk7XG4gICAgICB0aGlzLl9sYXN0SGVpZ2h0ID0gdGhpcy5jYW52YXNFbGVtZW50LmhlaWdodDsgdGhpcy5fbGFzdFdpZHRoID0gdGhpcy5jYW52YXNFbGVtZW50LndpZHRoO1xuICAgIH1cbiAgICB0aGlzLl9jbGVhckNhbnZhcygpO1xuICB9XG5cblxuICBwdWJsaWMgZ2V0IHJlZ2lvbigpOiBSZWN0YW5nbGUge1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKDAsIDAsIHRoaXMuX2xhc3RXaWR0aCwgdGhpcy5fbGFzdEhlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogYXBwbHkgZ2wgY29udGV4dCBhZnRlciB3ZWJnbHJlbmRlcmluZyBjb250ZXh0IGluaXRpYXRlZC5cbiAgICovXG4gIHByb3RlY3RlZCBfX3NldEdMQ29udGV4dChnbENvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgIHRoaXMuZ2wgPSBnbENvbnRleHQ7XG4gICAgdGhpcy5nbEV4dGVuc2lvblJlc29sdmVyLmNoZWNrRXh0ZW5zaW9ucyhnbENvbnRleHQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByaXZhdGUgX2NsZWFyQ2FudmFzKCk6IHZvaWQge1xuICAgIHRoaXMuZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuICAgIHRoaXMuZ2wuY2xlYXJDb2xvci5hcHBseSh0aGlzLmdsLCB0aGlzLmNsZWFyQ29sb3IucmF3RWxlbWVudHMpO1xuICAgIHRoaXMuZ2wuZGVwdGhNYXNrKHRydWUpO1xuICAgIHRoaXMuZ2wuY2xlYXJEZXB0aCgxLjApO1xuICAgIHRoaXMuZ2wuY2xlYXIoV2ViR0xSZW5kZXJpbmdDb250ZXh0LkNPTE9SX0JVRkZFUl9CSVQgfCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuREVQVEhfQlVGRkVSX0JJVCk7XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdHMgdG8gdHJ5IGdldHRpbmcgR0xDb250ZXh0IGZyb20gY2FudmFzLlxuICAgKiBAcmV0dXJuIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgX3RyeUdldEdMQ29udGV4dCgpOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gPFdlYkdMUmVuZGVyaW5nQ29udGV4dD50aGlzLmNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dChcIndlYmdsXCIpIHx8IHRoaXMuY2FudmFzRWxlbWVudC5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBXZWJHTE5vdFN1cHBvcnRlZEV4Y2VwdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IENhbnZhcztcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

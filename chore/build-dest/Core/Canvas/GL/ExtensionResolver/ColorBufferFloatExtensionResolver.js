import ExtensionResolverBase from "./ExtensionResolverBase";
/**
* The extension resolver for "WEBGL_color_buffer_float"
*/
class ColorBufferFloatExtensionResolver extends ExtensionResolverBase {
    request(gl) {
        const isSupported = this._checkWebglColorBufferFloat(gl);
        if (isSupported) {
            return {};
        }
        else {
            return null;
        }
    }
    /**
     * To check being able to use float value texture as rendering target, just calling getExtension is not sufficient.
     */
    _checkWebglColorBufferFloat(gl) {
        let isSupported;
        if (gl.getExtension("WEBGL_color_buffer_float") === null) {
            const fbo = gl.createFramebuffer();
            const tex = gl.createTexture();
            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
            gl.bindTexture(gl.TEXTURE_2D, tex);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.FLOAT, null);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
            if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
                isSupported = false;
            }
            else {
                isSupported = true;
            }
            gl.deleteTexture(tex);
            gl.deleteFramebuffer(fbo);
        }
        else {
            isSupported = true;
        }
        return isSupported;
    }
}
export default ColorBufferFloatExtensionResolver;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvQ2FudmFzL0dML0V4dGVuc2lvblJlc29sdmVyL0NvbG9yQnVmZmVyRmxvYXRFeHRlbnNpb25SZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxxQkFBcUIsTUFBTSx5QkFBeUI7QUFDM0Q7O0VBRUU7QUFDRixnREFBZ0QscUJBQXFCO0lBQzVELE9BQU8sQ0FBQyxFQUF5QjtRQUN0QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSywyQkFBMkIsQ0FBQyxFQUF5QjtRQUMzRCxJQUFJLFdBQW9CLENBQUM7UUFDekIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDekQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDbkMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQy9CLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN4QyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckYsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO2dCQUMxRSxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixXQUFXLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLENBQUM7WUFDRCxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLENBQUM7UUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3JCLENBQUM7QUFDSCxDQUFDO0FBRUQsZUFBZSxpQ0FBaUMsQ0FBQyIsImZpbGUiOiJDb3JlL0NhbnZhcy9HTC9FeHRlbnNpb25SZXNvbHZlci9Db2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uUmVzb2x2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXh0ZW5zaW9uUmVzb2x2ZXJCYXNlIGZyb20gXCIuL0V4dGVuc2lvblJlc29sdmVyQmFzZVwiO1xuLyoqXG4qIFRoZSBleHRlbnNpb24gcmVzb2x2ZXIgZm9yIFwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCJcbiovXG5jbGFzcyBDb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uUmVzb2x2ZXIgZXh0ZW5kcyBFeHRlbnNpb25SZXNvbHZlckJhc2Uge1xuICBwdWJsaWMgcmVxdWVzdChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogeyBba2V5OiBzdHJpbmddOiBhbnk7IH0ge1xuICAgIGNvbnN0IGlzU3VwcG9ydGVkID0gdGhpcy5fY2hlY2tXZWJnbENvbG9yQnVmZmVyRmxvYXQoZ2wpO1xuICAgIGlmIChpc1N1cHBvcnRlZCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG8gY2hlY2sgYmVpbmcgYWJsZSB0byB1c2UgZmxvYXQgdmFsdWUgdGV4dHVyZSBhcyByZW5kZXJpbmcgdGFyZ2V0LCBqdXN0IGNhbGxpbmcgZ2V0RXh0ZW5zaW9uIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgKi9cbiAgcHJpdmF0ZSBfY2hlY2tXZWJnbENvbG9yQnVmZmVyRmxvYXQoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGxldCBpc1N1cHBvcnRlZDogYm9vbGVhbjtcbiAgICBpZiAoZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCIpID09PSBudWxsKSB7XG4gICAgICBjb25zdCBmYm8gPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgY29uc3QgdGV4ID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmYm8pO1xuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4KTtcbiAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgMSwgMSwgMCwgZ2wuUkdCQSwgZ2wuRkxPQVQsIG51bGwpO1xuICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXgsIDApO1xuICAgICAgaWYgKGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpICE9PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURSkge1xuICAgICAgICBpc1N1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZ2wuZGVsZXRlVGV4dHVyZSh0ZXgpO1xuICAgICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIoZmJvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JCdWZmZXJGbG9hdEV4dGVuc2lvblJlc29sdmVyO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

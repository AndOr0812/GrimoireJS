import GeometryBuilder from "./Base/GeometryBuilder";
import BasicGeometry from "./Base/BasicGeometry";
import Vector3 from "../../Math/Vector3";
import JThreeContext from "../../JThreeContext";
import ContextComponents from "../../ContextComponents";
class CubeGeometry extends BasicGeometry {
    constructor(name) {
        super();
        const rm = JThreeContext.getContextComponent(ContextComponents.ResourceManager);
        this.indexBuffer = rm.createBuffer(name + "index", WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 1, WebGLRenderingContext.UNSIGNED_BYTE);
        this.positionBuffer = rm.createBuffer(name + "-pos", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.normalBuffer = rm.createBuffer(name + "-nor", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.uvBuffer = rm.createBuffer(name + "-uv", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 2, WebGLRenderingContext.FLOAT);
        this.__updateBuffers();
    }
    __updateBuffers() {
        const pos = [];
        const normal = [];
        const uv = [];
        const index = [];
        GeometryBuilder.addQuad(pos, normal, uv, index, [new Vector3(-1, 1, 1), new Vector3(-1, -1, 1), new Vector3(1, 1, 1)]);
        GeometryBuilder.addQuad(pos, normal, uv, index, [new Vector3(1, 1, 1), new Vector3(1, -1, 1), new Vector3(1, 1, -1)]);
        GeometryBuilder.addQuad(pos, normal, uv, index, [new Vector3(1, 1, -1), new Vector3(1, -1, -1), new Vector3(-1, 1, -1)]);
        GeometryBuilder.addQuad(pos, normal, uv, index, [new Vector3(-1, 1, -1), new Vector3(-1, -1, -1), new Vector3(-1, 1, 1)]);
        GeometryBuilder.addQuad(pos, normal, uv, index, [new Vector3(-1, 1, 1), new Vector3(1, 1, 1), new Vector3(-1, 1, -1)]);
        GeometryBuilder.addQuad(pos, normal, uv, index, [new Vector3(1, -1, 1), new Vector3(-1, -1, 1), new Vector3(1, -1, -1)]);
        this.indexBuffer.update(new Uint8Array(index), index.length);
        this.normalBuffer.update(new Float32Array(normal), normal.length);
        this.uvBuffer.update(new Float32Array(uv), uv.length);
        this.positionBuffer.update(new Float32Array(pos), pos.length);
    }
}
export default CubeGeometry;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvR2VvbWV0cmllcy9DdWJlR2VvbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sZUFBZSxNQUFNLHdCQUF3QjtPQUM3QyxhQUFhLE1BQU0sc0JBQXNCO09BQ3pDLE9BQU8sTUFBTSxvQkFBb0I7T0FFakMsYUFBYSxNQUFNLHFCQUFxQjtPQUN4QyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQsMkJBQTJCLGFBQWE7SUFDcEMsWUFBWSxJQUFZO1FBQ3BCLE9BQU8sQ0FBQztRQUNSLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBa0IsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakcsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxPQUFPLEVBQUUscUJBQXFCLENBQUMsb0JBQW9CLEVBQUUscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMxSyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1SixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxSixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNySixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUdTLGVBQWU7UUFDckIsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUM1QixNQUFNLEVBQUUsR0FBYSxFQUFFLENBQUM7UUFDeEIsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQzNCLGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZILGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0SCxlQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekgsZUFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUgsZUFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkgsZUFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pILElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0FBRUwsQ0FBQztBQUVELGVBQWUsWUFBWSxDQUFDIiwiZmlsZSI6IkNvcmUvR2VvbWV0cmllcy9DdWJlR2VvbWV0cnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2VvbWV0cnlCdWlsZGVyIGZyb20gXCIuL0Jhc2UvR2VvbWV0cnlCdWlsZGVyXCI7XG5pbXBvcnQgQmFzaWNHZW9tZXRyeSBmcm9tIFwiLi9CYXNlL0Jhc2ljR2VvbWV0cnlcIjtcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi8uLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCBSZXNvdXJjZU1hbmFnZXIgZnJvbSBcIi4uL1Jlc291cmNlTWFuYWdlclwiO1xuaW1wb3J0IEpUaHJlZUNvbnRleHQgZnJvbSBcIi4uLy4uL0pUaHJlZUNvbnRleHRcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbmNsYXNzIEN1YmVHZW9tZXRyeSBleHRlbmRzIEJhc2ljR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCBybSA9IEpUaHJlZUNvbnRleHQuZ2V0Q29udGV4dENvbXBvbmVudDxSZXNvdXJjZU1hbmFnZXI+KENvbnRleHRDb21wb25lbnRzLlJlc291cmNlTWFuYWdlcik7XG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiaW5kZXhcIiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDEsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5VTlNJR05FRF9CWVRFKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbkJ1ZmZlciA9IHJtLmNyZWF0ZUJ1ZmZlcihuYW1lICsgXCItcG9zXCIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5BUlJBWV9CVUZGRVIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TVEFUSUNfRFJBVywgMywgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkZMT0FUKTtcbiAgICAgICAgdGhpcy5ub3JtYWxCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLW5vclwiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDMsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgICAgIHRoaXMudXZCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLXV2XCIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5BUlJBWV9CVUZGRVIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TVEFUSUNfRFJBVywgMiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkZMT0FUKTtcbiAgICAgICAgdGhpcy5fX3VwZGF0ZUJ1ZmZlcnMoKTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBfX3VwZGF0ZUJ1ZmZlcnMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBvczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3Qgbm9ybWFsOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBjb25zdCB1djogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3QgaW5kZXg6IG51bWJlcltdID0gW107XG4gICAgICAgIEdlb21ldHJ5QnVpbGRlci5hZGRRdWFkKHBvcywgbm9ybWFsLCB1diwgaW5kZXgsIFtuZXcgVmVjdG9yMygtMSwgMSwgMSksIG5ldyBWZWN0b3IzKC0xLCAtMSwgMSksIG5ldyBWZWN0b3IzKDEsIDEsIDEpXSk7XG4gICAgICAgIEdlb21ldHJ5QnVpbGRlci5hZGRRdWFkKHBvcywgbm9ybWFsLCB1diwgaW5kZXgsIFtuZXcgVmVjdG9yMygxLCAxLCAxKSwgbmV3IFZlY3RvcjMoMSwgLTEsIDEpLCBuZXcgVmVjdG9yMygxLCAxLCAtMSldKTtcbiAgICAgICAgR2VvbWV0cnlCdWlsZGVyLmFkZFF1YWQocG9zLCBub3JtYWwsIHV2LCBpbmRleCwgW25ldyBWZWN0b3IzKDEsIDEsIC0xKSwgbmV3IFZlY3RvcjMoMSwgLTEsIC0xKSwgbmV3IFZlY3RvcjMoLTEsIDEsIC0xKV0pO1xuICAgICAgICBHZW9tZXRyeUJ1aWxkZXIuYWRkUXVhZChwb3MsIG5vcm1hbCwgdXYsIGluZGV4LCBbbmV3IFZlY3RvcjMoLTEsIDEsIC0xKSwgbmV3IFZlY3RvcjMoLTEsIC0xLCAtMSksIG5ldyBWZWN0b3IzKC0xLCAxLCAxKV0pO1xuICAgICAgICBHZW9tZXRyeUJ1aWxkZXIuYWRkUXVhZChwb3MsIG5vcm1hbCwgdXYsIGluZGV4LCBbbmV3IFZlY3RvcjMoLTEsIDEsIDEpLCBuZXcgVmVjdG9yMygxLCAxLCAxKSwgbmV3IFZlY3RvcjMoLTEsIDEsIC0xKV0pO1xuICAgICAgICBHZW9tZXRyeUJ1aWxkZXIuYWRkUXVhZChwb3MsIG5vcm1hbCwgdXYsIGluZGV4LCBbbmV3IFZlY3RvcjMoMSwgLTEsIDEpLCBuZXcgVmVjdG9yMygtMSwgLTEsIDEpLCBuZXcgVmVjdG9yMygxLCAtMSwgLTEpXSk7XG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIudXBkYXRlKG5ldyBVaW50OEFycmF5KGluZGV4KSwgaW5kZXgubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5ub3JtYWxCdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkobm9ybWFsKSwgbm9ybWFsLmxlbmd0aCk7XG4gICAgICAgIHRoaXMudXZCdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkodXYpLCB1di5sZW5ndGgpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uQnVmZmVyLnVwZGF0ZShuZXcgRmxvYXQzMkFycmF5KHBvcyksIHBvcy5sZW5ndGgpO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDdWJlR2VvbWV0cnk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

import RegistererBase from "./RegistererBase";
import Vector4 from "../../../../Math/Vector4";
import JThreeContext from "../../../../JThreeContext";
import ContextComponents from "../../../../ContextComponents";
class TimeRegisterer extends RegistererBase {
    getName() {
        return "builtin.time";
    }
    register(gl, pWrapper, matArg, uniforms) {
        if (uniforms["_Time"]) {
            const timer = JThreeContext.getContextComponent(ContextComponents.Timer);
            if (uniforms["_Time"].variableType === "float") {
                pWrapper.uniformFloat("_Time", timer.time);
            }
            else if (uniforms["_Time"].variableType === "vec4") {
                const time = timer.time;
                pWrapper.uniformVector("_Time", new Vector4(time / 20, time, time * 2, time * 3));
            }
        }
        if (uniforms["_SinTime"]) {
            const timer = JThreeContext.getContextComponent(ContextComponents.Timer);
            if (uniforms["_SinTime"].variableType === "float") {
                pWrapper.uniformFloat("_SinTime", Math.sin(timer.time));
            }
            else if (uniforms["_SinTime"].variableType === "vec4") {
                const time = timer.time;
                pWrapper.uniformVector("_SinTime", new Vector4(Math.sin(time / 8), Math.sin(time / 4), Math.sin(time / 2), Math.sin(time)));
            }
        }
        if (uniforms["_CosTime"]) {
            const timer = JThreeContext.getContextComponent(ContextComponents.Timer);
            if (uniforms["_CosTime"].variableType === "float") {
                const time = timer.time;
                pWrapper.uniformFloat("_CosTime", Math.cos(time));
            }
            else if (uniforms["_CosTime"].variableType === "vec4") {
                const time = timer.time;
                pWrapper.uniformVector("_CosTime", new Vector4(Math.cos(time / 8), Math.cos(time / 4), Math.cos(time / 2), Math.cos(time)));
            }
        }
    }
}
export default TimeRegisterer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvTWF0ZXJpYWxzL0Jhc2UvUmVnaXN0ZXJlci9UaW1lUmVnaXN0ZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxjQUFjLE1BQU0sa0JBQWtCO09BQ3RDLE9BQU8sTUFBTSwwQkFBMEI7T0FDdkMsYUFBYSxNQUFNLDJCQUEyQjtPQUM5QyxpQkFBaUIsTUFBTSwrQkFBK0I7QUFNN0QsNkJBQTZCLGNBQWM7SUFFbEMsT0FBTztRQUNaLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxFQUF5QixFQUFFLFFBQXdCLEVBQUUsTUFBOEIsRUFBRSxRQUFpRDtRQUNwSixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sS0FBSyxHQUFVLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBUSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2RixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQy9DLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QyxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDckQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDeEIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRixDQUFDO1FBQ0gsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxLQUFLLEdBQVUsYUFBYSxDQUFDLG1CQUFtQixDQUFRLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZGLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDbEQsUUFBUSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxRCxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDeEIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUgsQ0FBQztRQUNILENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sS0FBSyxHQUFVLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBUSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2RixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3hCLFFBQVEsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwRCxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDeEIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUgsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUNELGVBQWUsY0FBYyxDQUFDIiwiZmlsZSI6IkNvcmUvTWF0ZXJpYWxzL0Jhc2UvUmVnaXN0ZXJlci9UaW1lUmVnaXN0ZXJlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWdpc3RlcmVyQmFzZSBmcm9tIFwiLi9SZWdpc3RlcmVyQmFzZVwiO1xuaW1wb3J0IFZlY3RvcjQgZnJvbSBcIi4uLy4uLy4uLy4uL01hdGgvVmVjdG9yNFwiO1xuaW1wb3J0IEpUaHJlZUNvbnRleHQgZnJvbSBcIi4uLy4uLy4uLy4uL0pUaHJlZUNvbnRleHRcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vLi4vLi4vLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbmltcG9ydCBQcm9ncmFtV3JhcHBlciBmcm9tIFwiLi4vLi4vLi4vUmVzb3VyY2VzL1Byb2dyYW0vUHJvZ3JhbVdyYXBwZXJcIjtcbmltcG9ydCBJVmFyaWFibGVEZXNjcmlwdGlvbiBmcm9tIFwiLi4vSVZhcmlhYmxlRGVzY3JpcHRpb25cIjtcbmltcG9ydCBJQXBwbHlNYXRlcmlhbEFyZ3VtZW50IGZyb20gXCIuLi9JQXBwbHlNYXRlcmlhbEFyZ3VtZW50XCI7XG5pbXBvcnQgVGltZXIgZnJvbSBcIi4uLy4uLy4uL1RpbWVyXCI7XG5cbmNsYXNzIFRpbWVSZWdpc3RlcmVyIGV4dGVuZHMgUmVnaXN0ZXJlckJhc2Uge1xuXG4gIHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiYnVpbHRpbi50aW1lXCI7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcFdyYXBwZXI6IFByb2dyYW1XcmFwcGVyLCBtYXRBcmc6IElBcHBseU1hdGVyaWFsQXJndW1lbnQsIHVuaWZvcm1zOiB7IFtrZXk6IHN0cmluZ106IElWYXJpYWJsZURlc2NyaXB0aW9uIH0pOiB2b2lkIHtcbiAgICBpZiAodW5pZm9ybXNbXCJfVGltZVwiXSkge1xuICAgICAgY29uc3QgdGltZXI6IFRpbWVyID0gSlRocmVlQ29udGV4dC5nZXRDb250ZXh0Q29tcG9uZW50PFRpbWVyPihDb250ZXh0Q29tcG9uZW50cy5UaW1lcik7XG4gICAgICBpZiAodW5pZm9ybXNbXCJfVGltZVwiXS52YXJpYWJsZVR5cGUgPT09IFwiZmxvYXRcIikge1xuICAgICAgICBwV3JhcHBlci51bmlmb3JtRmxvYXQoXCJfVGltZVwiLCB0aW1lci50aW1lKTtcbiAgICAgIH0gZWxzZSBpZiAodW5pZm9ybXNbXCJfVGltZVwiXS52YXJpYWJsZVR5cGUgPT09IFwidmVjNFwiKSB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSB0aW1lci50aW1lO1xuICAgICAgICBwV3JhcHBlci51bmlmb3JtVmVjdG9yKFwiX1RpbWVcIiwgbmV3IFZlY3RvcjQodGltZSAvIDIwLCB0aW1lLCB0aW1lICogMiwgdGltZSAqIDMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHVuaWZvcm1zW1wiX1NpblRpbWVcIl0pIHtcbiAgICAgIGNvbnN0IHRpbWVyOiBUaW1lciA9IEpUaHJlZUNvbnRleHQuZ2V0Q29udGV4dENvbXBvbmVudDxUaW1lcj4oQ29udGV4dENvbXBvbmVudHMuVGltZXIpO1xuICAgICAgaWYgKHVuaWZvcm1zW1wiX1NpblRpbWVcIl0udmFyaWFibGVUeXBlID09PSBcImZsb2F0XCIpIHtcbiAgICAgICAgcFdyYXBwZXIudW5pZm9ybUZsb2F0KFwiX1NpblRpbWVcIiwgTWF0aC5zaW4odGltZXIudGltZSkpO1xuICAgICAgfSBlbHNlIGlmICh1bmlmb3Jtc1tcIl9TaW5UaW1lXCJdLnZhcmlhYmxlVHlwZSA9PT0gXCJ2ZWM0XCIpIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHRpbWVyLnRpbWU7XG4gICAgICAgIHBXcmFwcGVyLnVuaWZvcm1WZWN0b3IoXCJfU2luVGltZVwiLCBuZXcgVmVjdG9yNChNYXRoLnNpbih0aW1lIC8gOCksIE1hdGguc2luKHRpbWUgLyA0KSwgTWF0aC5zaW4odGltZSAvIDIpLCBNYXRoLnNpbih0aW1lKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodW5pZm9ybXNbXCJfQ29zVGltZVwiXSkge1xuICAgICAgY29uc3QgdGltZXI6IFRpbWVyID0gSlRocmVlQ29udGV4dC5nZXRDb250ZXh0Q29tcG9uZW50PFRpbWVyPihDb250ZXh0Q29tcG9uZW50cy5UaW1lcik7XG4gICAgICBpZiAodW5pZm9ybXNbXCJfQ29zVGltZVwiXS52YXJpYWJsZVR5cGUgPT09IFwiZmxvYXRcIikge1xuICAgICAgICBjb25zdCB0aW1lID0gdGltZXIudGltZTtcbiAgICAgICAgcFdyYXBwZXIudW5pZm9ybUZsb2F0KFwiX0Nvc1RpbWVcIiwgTWF0aC5jb3ModGltZSkpO1xuICAgICAgfSBlbHNlIGlmICh1bmlmb3Jtc1tcIl9Db3NUaW1lXCJdLnZhcmlhYmxlVHlwZSA9PT0gXCJ2ZWM0XCIpIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHRpbWVyLnRpbWU7XG4gICAgICAgIHBXcmFwcGVyLnVuaWZvcm1WZWN0b3IoXCJfQ29zVGltZVwiLCBuZXcgVmVjdG9yNChNYXRoLmNvcyh0aW1lIC8gOCksIE1hdGguY29zKHRpbWUgLyA0KSwgTWF0aC5jb3ModGltZSAvIDIpLCBNYXRoLmNvcyh0aW1lKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgVGltZVJlZ2lzdGVyZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

import GLEnumParser from "../../Canvas/GL/GLEnumParser";
class XMLRenderConfigureUtility {
    /**
     * Construct renderer configuration preferences from element containing render configuration tags as children.
     * @param  {WebGLRenderingContext}       gl        [description]
     * @param  {Element}                     parent    [description]
     * @param  {IRenderStageRenderConfigure} defConfig [description]
     * @return {IRenderStageRenderConfigure}           [description]
     */
    static parseRenderConfig(parent, defConfig) {
        const target = {};
        XMLRenderConfigureUtility._parseCullConfigure(parent, defConfig, target);
        XMLRenderConfigureUtility._parseBlendConfigure(parent, defConfig, target);
        XMLRenderConfigureUtility._parseDepthConfigure(parent, defConfig, target);
        XMLRenderConfigureUtility._parseMaskConfigure(parent, defConfig, target);
        return target;
    }
    static applyAll(gl, config) {
        XMLRenderConfigureUtility._applyCullConfigureToGL(gl, config.cullOrientation !== "NONE", config.cullOrientation);
        XMLRenderConfigureUtility._applyBlendFunConfigureToGL(gl, config.blendEnabled, config.blendSrcFactor, config.blendDstFactor);
        XMLRenderConfigureUtility._applyDepthTestConfigureToGL(gl, config.depthEnabled, config.depthMode);
        XMLRenderConfigureUtility._applyMaskConfigureToGL(gl, config.redMask, config.greenMask, config.blueMask, config.alphaMask, config.depthMask);
    }
    static _parseBoolean(val, def) {
        if (!val) {
            return def;
        }
        if (val === "true") {
            return true;
        }
        return false;
    }
    static _parseMaskConfigure(elem, defConfig, target) {
        const maskNode = elem.getElementsByTagName("mask").item(0);
        if (!maskNode) {
            target.redMask = defConfig.redMask;
            target.greenMask = defConfig.greenMask;
            target.blueMask = defConfig.blueMask;
            target.alphaMask = defConfig.alphaMask;
            target.depthMask = defConfig.depthMask;
        }
        else {
            const redMaskStr = maskNode.getAttribute("red");
            const greenMaskStr = maskNode.getAttribute("green");
            const blueMaskStr = maskNode.getAttribute("blue");
            const alphaMaskStr = maskNode.getAttribute("alpha");
            const depthMaskStr = maskNode.getAttribute("depth");
            target.redMask = XMLRenderConfigureUtility._parseBoolean(redMaskStr, defConfig.redMask);
            target.greenMask = XMLRenderConfigureUtility._parseBoolean(greenMaskStr, defConfig.greenMask);
            target.blueMask = XMLRenderConfigureUtility._parseBoolean(blueMaskStr, defConfig.blueMask);
            target.alphaMask = XMLRenderConfigureUtility._parseBoolean(alphaMaskStr, defConfig.alphaMask);
            target.depthMask = XMLRenderConfigureUtility._parseBoolean(depthMaskStr, defConfig.depthMask);
        }
    }
    static _parseCullConfigure(elem, defConfig, target) {
        const cullNode = elem.getElementsByTagName("cull").item(0);
        if (!cullNode) {
            target.cullOrientation = defConfig.cullOrientation;
        }
        else {
            const mode = cullNode.getAttribute("mode");
            if (!mode) {
                target.cullOrientation = defConfig.cullOrientation;
            }
            else {
                target.cullOrientation = mode;
            }
        }
    }
    static _parseBlendConfigure(elem, defConfig, target) {
        const blendNode = elem.getElementsByTagName("blend").item(0);
        if (!blendNode) {
            target.blendEnabled = defConfig.blendEnabled;
            target.blendSrcFactor = defConfig.blendSrcFactor;
            target.blendDstFactor = defConfig.blendDstFactor;
        }
        else {
            const enabledStr = blendNode.getAttribute("enabled");
            const srcFactorStr = blendNode.getAttribute("src");
            const dstFactorStr = blendNode.getAttribute("dst");
            target.blendEnabled = XMLRenderConfigureUtility._parseBoolean(enabledStr, defConfig.blendEnabled);
            target.blendSrcFactor = srcFactorStr || defConfig.blendSrcFactor;
            target.blendDstFactor = dstFactorStr || defConfig.blendDstFactor;
        }
    }
    static _parseDepthConfigure(elem, defConfig, target) {
        const depthNode = elem.getElementsByTagName("depth").item(0);
        if (!depthNode) {
            target.depthMode = defConfig.depthMode;
            target.depthEnabled = defConfig.depthEnabled;
        }
        else {
            const enabledStr = depthNode.getAttribute("enabled");
            const modeStr = depthNode.getAttribute("mode");
            target.depthEnabled = XMLRenderConfigureUtility._parseBoolean(enabledStr, defConfig.depthEnabled);
            target.depthMode = modeStr || defConfig.depthMode;
        }
    }
    static _applyCullConfigureToGL(gl, enabled, mode) {
        if (enabled) {
            gl.enable(gl.CULL_FACE);
            gl.cullFace(GLEnumParser.parseCullMode(mode));
        }
        else {
            gl.disable(gl.CULL_FACE);
        }
    }
    static _applyDepthTestConfigureToGL(gl, enabled, mode) {
        if (enabled) {
            gl.enable(gl.DEPTH_TEST);
            gl.depthFunc(GLEnumParser.parseDepthFunc(mode));
        }
        else {
            gl.disable(gl.DEPTH_TEST);
        }
    }
    static _applyBlendFunConfigureToGL(gl, enabled, src, dst) {
        if (enabled) {
            gl.enable(gl.BLEND);
            gl.blendFunc(GLEnumParser.parseBlendFunc(src), GLEnumParser.parseBlendFunc(dst));
        }
        else {
            gl.disable(gl.BLEND);
        }
    }
    static _applyMaskConfigureToGL(gl, red, green, blue, alpha, depth) {
        gl.colorMask(red, green, blue, alpha);
        gl.depthMask(depth);
    }
}
export default XMLRenderConfigureUtility;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvTWF0ZXJpYWxzL0Jhc2UvWE1MUmVuZGVyQ29uZmlnVXRpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FDTyxZQUFZLE1BQU0sOEJBQThCO0FBQ3ZEO0lBRUU7Ozs7OztPQU1HO0lBQ0gsT0FBYyxpQkFBaUIsQ0FBQyxNQUFlLEVBQUUsU0FBc0M7UUFDckYsTUFBTSxNQUFNLEdBQWdDLEVBQUUsQ0FBQztRQUMvQyx5QkFBeUIsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUUseUJBQXlCLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRSx5QkFBeUIsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQWMsUUFBUSxDQUFDLEVBQXlCLEVBQUUsTUFBbUM7UUFDbkYseUJBQXlCLENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqSCx5QkFBeUIsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM3SCx5QkFBeUIsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEcseUJBQXlCLENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLFNB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QmFzZS9YTUxSZW5kZXJDb25maWdVdGlsaXR5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IElSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZSBmcm9tIFwiLi4vLi4vUmVuZGVyZXJzL1JlbmRlclN0YWdlcy9JUmVuZGVyU3RhZ2VSZW5kZXJlckNvbmZpZ3VyZVwiO1xuaW1wb3J0IEdMRW51bVBhcnNlciBmcm9tIFwiLi4vLi4vQ2FudmFzL0dML0dMRW51bVBhcnNlclwiO1xuY2xhc3MgWE1MUmVuZGVyQ29uZmlndXJlVXRpbGl0eSB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCByZW5kZXJlciBjb25maWd1cmF0aW9uIHByZWZlcmVuY2VzIGZyb20gZWxlbWVudCBjb250YWluaW5nIHJlbmRlciBjb25maWd1cmF0aW9uIHRhZ3MgYXMgY2hpbGRyZW4uXG4gICAqIEBwYXJhbSAge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gICAgICAgZ2wgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICB7RWxlbWVudH0gICAgICAgICAgICAgICAgICAgICBwYXJlbnQgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHtJUmVuZGVyU3RhZ2VSZW5kZXJDb25maWd1cmV9IGRlZkNvbmZpZyBbZGVzY3JpcHRpb25dXG4gICAqIEByZXR1cm4ge0lSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZX0gICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcGFyc2VSZW5kZXJDb25maWcocGFyZW50OiBFbGVtZW50LCBkZWZDb25maWc6IElSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZSk6IElSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gPElSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZT57fTtcbiAgICBYTUxSZW5kZXJDb25maWd1cmVVdGlsaXR5Ll9wYXJzZUN1bGxDb25maWd1cmUocGFyZW50LCBkZWZDb25maWcsIHRhcmdldCk7XG4gICAgWE1MUmVuZGVyQ29uZmlndXJlVXRpbGl0eS5fcGFyc2VCbGVuZENvbmZpZ3VyZShwYXJlbnQsIGRlZkNvbmZpZywgdGFyZ2V0KTtcbiAgICBYTUxSZW5kZXJDb25maWd1cmVVdGlsaXR5Ll9wYXJzZURlcHRoQ29uZmlndXJlKHBhcmVudCwgZGVmQ29uZmlnLCB0YXJnZXQpO1xuICAgIFhNTFJlbmRlckNvbmZpZ3VyZVV0aWxpdHkuX3BhcnNlTWFza0NvbmZpZ3VyZShwYXJlbnQsIGRlZkNvbmZpZywgdGFyZ2V0KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBhcHBseUFsbChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjb25maWc6IElSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZSk6IHZvaWQge1xuICAgIFhNTFJlbmRlckNvbmZpZ3VyZVV0aWxpdHkuX2FwcGx5Q3VsbENvbmZpZ3VyZVRvR0woZ2wsIGNvbmZpZy5jdWxsT3JpZW50YXRpb24gIT09IFwiTk9ORVwiLCBjb25maWcuY3VsbE9yaWVudGF0aW9uKTtcbiAgICBYTUxSZW5kZXJDb25maWd1cmVVdGlsaXR5Ll9hcHBseUJsZW5kRnVuQ29uZmlndXJlVG9HTChnbCwgY29uZmlnLmJsZW5kRW5hYmxlZCwgY29uZmlnLmJsZW5kU3JjRmFjdG9yLCBjb25maWcuYmxlbmREc3RGYWN0b3IpO1xuICAgIFhNTFJlbmRlckNvbmZpZ3VyZVV0aWxpdHkuX2FwcGx5RGVwdGhUZXN0Q29uZmlndXJlVG9HTChnbCwgY29uZmlnLmRlcHRoRW5hYmxlZCwgY29uZmlnLmRlcHRoTW9kZSk7XG4gICAgWE1MUmVuZGVyQ29uZmlndXJlVXRpbGl0eS5fYXBwbHlNYXNrQ29uZmlndXJlVG9HTChnbCwgY29uZmlnLnJlZE1hc2ssIGNvbmZpZy5ncmVlbk1hc2ssIGNvbmZpZy5ibHVlTWFzaywgY29uZmlnLmFscGhhTWFzaywgY29uZmlnLmRlcHRoTWFzayk7XG4gIH1cblxuXG4gIHByaXZhdGUgc3RhdGljIF9wYXJzZUJvb2xlYW4odmFsOiBzdHJpbmcsIGRlZjogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGlmICghdmFsKSB7IHJldHVybiBkZWY7IH1cbiAgICBpZiAodmFsID09PSBcInRydWVcIikgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIF9wYXJzZU1hc2tDb25maWd1cmUoZWxlbTogRWxlbWVudCwgZGVmQ29uZmlnOiBJUmVuZGVyU3RhZ2VSZW5kZXJDb25maWd1cmUsIHRhcmdldDogSVJlbmRlclN0YWdlUmVuZGVyQ29uZmlndXJlKTogdm9pZCB7XG4gICAgY29uc3QgbWFza05vZGUgPSBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWFza1wiKS5pdGVtKDApO1xuICAgIGlmICghbWFza05vZGUpIHtcbiAgICAgIHRhcmdldC5yZWRNYXNrID0gZGVmQ29uZmlnLnJlZE1hc2s7XG4gICAgICB0YXJnZXQuZ3JlZW5NYXNrID0gZGVmQ29uZmlnLmdyZWVuTWFzaztcbiAgICAgIHRhcmdldC5ibHVlTWFzayA9IGRlZkNvbmZpZy5ibHVlTWFzaztcbiAgICAgIHRhcmdldC5hbHBoYU1hc2sgPSBkZWZDb25maWcuYWxwaGFNYXNrO1xuICAgICAgdGFyZ2V0LmRlcHRoTWFzayA9IGRlZkNvbmZpZy5kZXB0aE1hc2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlZE1hc2tTdHIgPSBtYXNrTm9kZS5nZXRBdHRyaWJ1dGUoXCJyZWRcIik7XG4gICAgICBjb25zdCBncmVlbk1hc2tTdHIgPSBtYXNrTm9kZS5nZXRBdHRyaWJ1dGUoXCJncmVlblwiKTtcbiAgICAgIGNvbnN0IGJsdWVNYXNrU3RyID0gbWFza05vZGUuZ2V0QXR0cmlidXRlKFwiYmx1ZVwiKTtcbiAgICAgIGNvbnN0IGFscGhhTWFza1N0ciA9IG1hc2tOb2RlLmdldEF0dHJpYnV0ZShcImFscGhhXCIpO1xuICAgICAgY29uc3QgZGVwdGhNYXNrU3RyID0gbWFza05vZGUuZ2V0QXR0cmlidXRlKFwiZGVwdGhcIik7XG4gICAgICB0YXJnZXQucmVkTWFzayA9IFhNTFJlbmRlckNvbmZpZ3VyZVV0aWxpdHkuX3BhcnNlQm9vbGVhbihyZWRNYXNrU3RyLCBkZWZDb25maWcucmVkTWFzayk7XG4gICAgICB0YXJnZXQuZ3JlZW5NYXNrID0gWE1MUmVuZGVyQ29uZmlndXJlVXRpbGl0eS5fcGFyc2VCb29sZWFuKGdyZWVuTWFza1N0ciwgZGVmQ29uZmlnLmdyZWVuTWFzayk7XG4gICAgICB0YXJnZXQuYmx1ZU1hc2sgPSBYTUxSZW5kZXJDb25maWd1cmVVdGlsaXR5Ll9wYXJzZUJvb2xlYW4oYmx1ZU1hc2tTdHIsIGRlZkNvbmZpZy5ibHVlTWFzayk7XG4gICAgICB0YXJnZXQuYWxwaGFNYXNrID0gWE1MUmVuZGVyQ29uZmlndXJlVXRpbGl0eS5fcGFyc2VCb29sZWFuKGFscGhhTWFza1N0ciwgZGVmQ29uZmlnLmFscGhhTWFzayk7XG4gICAgICB0YXJnZXQuZGVwdGhNYXNrID0gWE1MUmVuZGVyQ29uZmlndXJlVXRpbGl0eS5fcGFyc2VCb29sZWFuKGRlcHRoTWFza1N0ciwgZGVmQ29uZmlnLmRlcHRoTWFzayk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX3BhcnNlQ3VsbENvbmZpZ3VyZShlbGVtOiBFbGVtZW50LCBkZWZDb25maWc6IElSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZSwgdGFyZ2V0OiBJUmVuZGVyU3RhZ2VSZW5kZXJDb25maWd1cmUpOiB2b2lkIHtcbiAgICBjb25zdCBjdWxsTm9kZSA9IGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJjdWxsXCIpLml0ZW0oMCk7XG4gICAgaWYgKCFjdWxsTm9kZSkge1xuICAgICAgdGFyZ2V0LmN1bGxPcmllbnRhdGlvbiA9IGRlZkNvbmZpZy5jdWxsT3JpZW50YXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1vZGUgPSBjdWxsTm9kZS5nZXRBdHRyaWJ1dGUoXCJtb2RlXCIpO1xuICAgICAgaWYgKCFtb2RlKSB7XG4gICAgICAgIHRhcmdldC5jdWxsT3JpZW50YXRpb24gPSBkZWZDb25maWcuY3VsbE9yaWVudGF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LmN1bGxPcmllbnRhdGlvbiA9IG1vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX3BhcnNlQmxlbmRDb25maWd1cmUoZWxlbTogRWxlbWVudCwgZGVmQ29uZmlnOiBJUmVuZGVyU3RhZ2VSZW5kZXJDb25maWd1cmUsIHRhcmdldDogSVJlbmRlclN0YWdlUmVuZGVyQ29uZmlndXJlKTogdm9pZCB7XG4gICAgY29uc3QgYmxlbmROb2RlID0gZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJsZW5kXCIpLml0ZW0oMCk7XG4gICAgaWYgKCFibGVuZE5vZGUpIHtcbiAgICAgIHRhcmdldC5ibGVuZEVuYWJsZWQgPSBkZWZDb25maWcuYmxlbmRFbmFibGVkO1xuICAgICAgdGFyZ2V0LmJsZW5kU3JjRmFjdG9yID0gZGVmQ29uZmlnLmJsZW5kU3JjRmFjdG9yO1xuICAgICAgdGFyZ2V0LmJsZW5kRHN0RmFjdG9yID0gZGVmQ29uZmlnLmJsZW5kRHN0RmFjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBlbmFibGVkU3RyID0gYmxlbmROb2RlLmdldEF0dHJpYnV0ZShcImVuYWJsZWRcIik7XG4gICAgICBjb25zdCBzcmNGYWN0b3JTdHIgPSBibGVuZE5vZGUuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICAgICAgY29uc3QgZHN0RmFjdG9yU3RyID0gYmxlbmROb2RlLmdldEF0dHJpYnV0ZShcImRzdFwiKTtcbiAgICAgIHRhcmdldC5ibGVuZEVuYWJsZWQgPSBYTUxSZW5kZXJDb25maWd1cmVVdGlsaXR5Ll9wYXJzZUJvb2xlYW4oZW5hYmxlZFN0ciwgZGVmQ29uZmlnLmJsZW5kRW5hYmxlZCk7XG4gICAgICB0YXJnZXQuYmxlbmRTcmNGYWN0b3IgPSBzcmNGYWN0b3JTdHIgfHwgZGVmQ29uZmlnLmJsZW5kU3JjRmFjdG9yO1xuICAgICAgdGFyZ2V0LmJsZW5kRHN0RmFjdG9yID0gZHN0RmFjdG9yU3RyIHx8IGRlZkNvbmZpZy5ibGVuZERzdEZhY3RvcjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfcGFyc2VEZXB0aENvbmZpZ3VyZShlbGVtOiBFbGVtZW50LCBkZWZDb25maWc6IElSZW5kZXJTdGFnZVJlbmRlckNvbmZpZ3VyZSwgdGFyZ2V0OiBJUmVuZGVyU3RhZ2VSZW5kZXJDb25maWd1cmUpOiB2b2lkIHtcbiAgICBjb25zdCBkZXB0aE5vZGUgPSBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGVwdGhcIikuaXRlbSgwKTtcbiAgICBpZiAoIWRlcHRoTm9kZSkge1xuICAgICAgdGFyZ2V0LmRlcHRoTW9kZSA9IGRlZkNvbmZpZy5kZXB0aE1vZGU7XG4gICAgICB0YXJnZXQuZGVwdGhFbmFibGVkID0gZGVmQ29uZmlnLmRlcHRoRW5hYmxlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZW5hYmxlZFN0ciA9IGRlcHRoTm9kZS5nZXRBdHRyaWJ1dGUoXCJlbmFibGVkXCIpO1xuICAgICAgY29uc3QgbW9kZVN0ciA9IGRlcHRoTm9kZS5nZXRBdHRyaWJ1dGUoXCJtb2RlXCIpO1xuICAgICAgdGFyZ2V0LmRlcHRoRW5hYmxlZCA9IFhNTFJlbmRlckNvbmZpZ3VyZVV0aWxpdHkuX3BhcnNlQm9vbGVhbihlbmFibGVkU3RyLCBkZWZDb25maWcuZGVwdGhFbmFibGVkKTtcbiAgICAgIHRhcmdldC5kZXB0aE1vZGUgPSBtb2RlU3RyIHx8IGRlZkNvbmZpZy5kZXB0aE1vZGU7XG4gICAgfVxuICB9XG5cblxuICBwcml2YXRlIHN0YXRpYyBfYXBwbHlDdWxsQ29uZmlndXJlVG9HTChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBlbmFibGVkOiBib29sZWFuLCBtb2RlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgZ2wuZW5hYmxlKGdsLkNVTExfRkFDRSk7XG4gICAgICBnbC5jdWxsRmFjZShHTEVudW1QYXJzZXIucGFyc2VDdWxsTW9kZShtb2RlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfYXBwbHlEZXB0aFRlc3RDb25maWd1cmVUb0dMKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGVuYWJsZWQ6IGJvb2xlYW4sIG1vZGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XG4gICAgICBnbC5kZXB0aEZ1bmMoR0xFbnVtUGFyc2VyLnBhcnNlRGVwdGhGdW5jKG1vZGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfYXBwbHlCbGVuZEZ1bkNvbmZpZ3VyZVRvR0woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgZW5hYmxlZDogYm9vbGVhbiwgc3JjOiBzdHJpbmcsIGRzdDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgICBnbC5ibGVuZEZ1bmMoR0xFbnVtUGFyc2VyLnBhcnNlQmxlbmRGdW5jKHNyYyksIEdMRW51bVBhcnNlci5wYXJzZUJsZW5kRnVuYyhkc3QpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wuZGlzYWJsZShnbC5CTEVORCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX2FwcGx5TWFza0NvbmZpZ3VyZVRvR0woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcmVkOiBib29sZWFuLCBncmVlbjogYm9vbGVhbiwgYmx1ZTogYm9vbGVhbiwgYWxwaGE6IGJvb2xlYW4sIGRlcHRoOiBib29sZWFuKTogdm9pZCB7XG4gICAgZ2wuY29sb3JNYXNrKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKTtcbiAgICBnbC5kZXB0aE1hc2soZGVwdGgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFhNTFJlbmRlckNvbmZpZ3VyZVV0aWxpdHk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

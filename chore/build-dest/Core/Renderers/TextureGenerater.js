import JThreeContext from "../../JThreeContext";
import ContextComponents from "../../ContextComponents";
import GeneraterList from "./TextureGeneraters/GeneraterList";
class TextureGenerater {
    static generateTexture(renderer, generaterInfo) {
        const generaters = TextureGenerater._getGeneraters(renderer);
        const generater = generaters[generaterInfo.generater];
        generater.generate(generaterInfo);
        return TextureGenerater.getTexture(renderer, generaterInfo.name);
    }
    static getTexture(renderer, bufferName) {
        return JThreeContext.getContextComponent(ContextComponents.ResourceManager).getTexture(renderer.ID + "." + bufferName);
    }
    static _getGeneraters(renderer) {
        if (TextureGenerater._generaters[renderer.ID]) {
            return TextureGenerater._generaters[renderer.ID];
        }
        return TextureGenerater._initializeGeneraters(renderer);
    }
    static _initializeGeneraters(renderer) {
        const targetArray = {};
        const generaters = GeneraterList;
        for (let key in generaters) {
            if (generaters.hasOwnProperty(key)) {
                const element = generaters[key];
                targetArray[key] = new element(renderer);
            }
        }
        TextureGenerater._generaters[renderer.ID] = targetArray;
        return targetArray;
    }
}
TextureGenerater._generaters = {};
export default TextureGenerater;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVuZGVyZXJzL1RleHR1cmVHZW5lcmF0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BSU8sYUFBYSxNQUFNLHFCQUFxQjtPQUN4QyxpQkFBaUIsTUFBTSx5QkFBeUI7T0FFaEQsYUFBYSxNQUFNLG1DQUFtQztBQUU3RDtJQUlFLE9BQWMsZUFBZSxDQUFDLFFBQXVCLEVBQUUsYUFBaUM7UUFDdEYsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEQsU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELE9BQWMsVUFBVSxDQUFDLFFBQXVCLEVBQUUsVUFBa0I7UUFDbEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBa0IsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQzFJLENBQUM7SUFFRCxPQUFlLGNBQWMsQ0FBQyxRQUF1QjtRQUNuRCxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQUMsQ0FBQztRQUNwRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELE9BQWUscUJBQXFCLENBQUMsUUFBdUI7UUFDMUQsTUFBTSxXQUFXLEdBQXFDLEVBQUUsQ0FBQztRQUN6RCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUM7UUFDakMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQztZQUMzQixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0MsQ0FBQztRQUNILENBQUM7UUFDRCxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUN4RCxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3JCLENBQUM7QUFDSCxDQUFDO0FBOUJnQiw0QkFBVyxHQUF1RCxFQUFFLENBOEJwRjtBQUVELGVBQWUsZ0JBQWdCLENBQUMiLCJmaWxlIjoiQ29yZS9SZW5kZXJlcnMvVGV4dHVyZUdlbmVyYXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZXh0dXJlQmFzZSBmcm9tIFwiLi4vUmVzb3VyY2VzL1RleHR1cmUvVGV4dHVyZUJhc2VcIjtcbmltcG9ydCBHZW5lcmF0ZXJJbmZvQ2h1bmsgZnJvbSBcIi4vVGV4dHVyZUdlbmVyYXRlcnMvR2VuZXJhdGVySW5mb0NodW5rXCI7XG5pbXBvcnQgQmFzaWNSZW5kZXJlciBmcm9tIFwiLi9CYXNpY1JlbmRlcmVyXCI7XG5pbXBvcnQgR2VuZXJhdGVyQmFzZSBmcm9tIFwiLi9UZXh0dXJlR2VuZXJhdGVycy9HZW5lcmF0ZXJCYXNlXCI7XG5pbXBvcnQgSlRocmVlQ29udGV4dCBmcm9tIFwiLi4vLi4vSlRocmVlQ29udGV4dFwiO1xuaW1wb3J0IENvbnRleHRDb21wb25lbnRzIGZyb20gXCIuLi8uLi9Db250ZXh0Q29tcG9uZW50c1wiO1xuaW1wb3J0IFJlc291cmNlTWFuYWdlciBmcm9tIFwiLi4vUmVzb3VyY2VNYW5hZ2VyXCI7XG5pbXBvcnQgR2VuZXJhdGVyTGlzdCBmcm9tIFwiLi9UZXh0dXJlR2VuZXJhdGVycy9HZW5lcmF0ZXJMaXN0XCI7XG5cbmNsYXNzIFRleHR1cmVHZW5lcmF0ZXIge1xuXG4gIHByaXZhdGUgc3RhdGljIF9nZW5lcmF0ZXJzOiB7IFtrZXk6IHN0cmluZ106IHsgW2lkOiBzdHJpbmddOiBHZW5lcmF0ZXJCYXNlIH0gfSA9IHt9O1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2VuZXJhdGVUZXh0dXJlKHJlbmRlcmVyOiBCYXNpY1JlbmRlcmVyLCBnZW5lcmF0ZXJJbmZvOiBHZW5lcmF0ZXJJbmZvQ2h1bmspOiBUZXh0dXJlQmFzZSB7XG4gICAgY29uc3QgZ2VuZXJhdGVycyA9IFRleHR1cmVHZW5lcmF0ZXIuX2dldEdlbmVyYXRlcnMocmVuZGVyZXIpO1xuICAgIGNvbnN0IGdlbmVyYXRlciA9IGdlbmVyYXRlcnNbZ2VuZXJhdGVySW5mby5nZW5lcmF0ZXJdO1xuICAgIGdlbmVyYXRlci5nZW5lcmF0ZShnZW5lcmF0ZXJJbmZvKTtcbiAgICByZXR1cm4gVGV4dHVyZUdlbmVyYXRlci5nZXRUZXh0dXJlKHJlbmRlcmVyLCBnZW5lcmF0ZXJJbmZvLm5hbWUpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRUZXh0dXJlKHJlbmRlcmVyOiBCYXNpY1JlbmRlcmVyLCBidWZmZXJOYW1lOiBzdHJpbmcpOiBUZXh0dXJlQmFzZSB7XG4gICAgcmV0dXJuIEpUaHJlZUNvbnRleHQuZ2V0Q29udGV4dENvbXBvbmVudDxSZXNvdXJjZU1hbmFnZXI+KENvbnRleHRDb21wb25lbnRzLlJlc291cmNlTWFuYWdlcikuZ2V0VGV4dHVyZShyZW5kZXJlci5JRCArIFwiLlwiICsgYnVmZmVyTmFtZSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfZ2V0R2VuZXJhdGVycyhyZW5kZXJlcjogQmFzaWNSZW5kZXJlcik6IHtba2V5OiBzdHJpbmddOiBHZW5lcmF0ZXJCYXNlfSB7XG4gICAgaWYgKFRleHR1cmVHZW5lcmF0ZXIuX2dlbmVyYXRlcnNbcmVuZGVyZXIuSURdKSB7IHJldHVybiBUZXh0dXJlR2VuZXJhdGVyLl9nZW5lcmF0ZXJzW3JlbmRlcmVyLklEXTsgfVxuICAgIHJldHVybiBUZXh0dXJlR2VuZXJhdGVyLl9pbml0aWFsaXplR2VuZXJhdGVycyhyZW5kZXJlcik7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfaW5pdGlhbGl6ZUdlbmVyYXRlcnMocmVuZGVyZXI6IEJhc2ljUmVuZGVyZXIpOiB7IFtrZXk6IHN0cmluZ106IEdlbmVyYXRlckJhc2V9IHtcbiAgICBjb25zdCB0YXJnZXRBcnJheSA9IDx7IFtrZXk6IHN0cmluZ106IEdlbmVyYXRlckJhc2UgfT57fTtcbiAgICBjb25zdCBnZW5lcmF0ZXJzID0gR2VuZXJhdGVyTGlzdDtcbiAgICBmb3IgKGxldCBrZXkgaW4gZ2VuZXJhdGVycykge1xuICAgICAgaWYgKGdlbmVyYXRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2VuZXJhdGVyc1trZXldO1xuICAgICAgICB0YXJnZXRBcnJheVtrZXldID0gbmV3IGVsZW1lbnQocmVuZGVyZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBUZXh0dXJlR2VuZXJhdGVyLl9nZW5lcmF0ZXJzW3JlbmRlcmVyLklEXSA9IHRhcmdldEFycmF5O1xuICAgIHJldHVybiB0YXJnZXRBcnJheTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0dXJlR2VuZXJhdGVyO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

import ResourceWrapper from "../ResourceWrapper";
/**
 * Buffer wrapper based on context.
 */
class BufferWrapper extends ResourceWrapper {
    constructor(parentBuffer, canvas) {
        super(canvas);
        this._targetBuffer = null;
        this._length = 0;
        this._parentBuffer = parentBuffer;
    }
    dispose() {
        if (this._targetBuffer) {
            this.GL.deleteBuffer(this._targetBuffer);
            this.__setInitialized(false);
            this._targetBuffer = null;
        }
    }
    get Length() {
        return this._length;
    }
    get UnitCount() {
        return this._parentBuffer.UnitCount;
    }
    get ElementType() {
        return this._parentBuffer.ElementType;
    }
    get Normalized() {
        return this._parentBuffer.Normalized;
    }
    get Stride() {
        return this._parentBuffer.Stride;
    }
    get Offset() {
        return this._parentBuffer.Offset;
    }
    update(array, length) {
        if (!this.Initialized) {
            this.init();
        }
        this.bindBuffer();
        this.GL.bufferData(this._parentBuffer.Target, array, this._parentBuffer.Usage);
        this.unbindBuffer();
        this._length = length;
    }
    init() {
        if (this._targetBuffer == null) {
            this._targetBuffer = this.GL.createBuffer();
            this.__setInitialized();
        }
    }
    bindBuffer() {
        if (this.Initialized) {
            this.GL.bindBuffer(this._parentBuffer.Target, this._targetBuffer);
        }
        else {
            this.init();
            this.update(this._parentBuffer.ElementCache, this._parentBuffer.Length);
            this.GL.bindBuffer(this._parentBuffer.Target, this._targetBuffer);
        }
    }
    unbindBuffer() {
        if (this.Initialized) {
            this.GL.bindBuffer(this._parentBuffer.Target, null);
        }
    }
}
export default BufferWrapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVzb3VyY2VzL0J1ZmZlci9CdWZmZXJXcmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUNPLGVBQWUsTUFBTSxvQkFBb0I7QUFFaEQ7O0dBRUc7QUFDSCw0QkFBNEIsZUFBZTtJQU96QyxZQUFZLFlBQW9CLEVBQUUsTUFBYztRQUM5QyxNQUFNLE1BQU0sQ0FBQyxDQUFDO1FBUFIsa0JBQWEsR0FBZ0IsSUFBSSxDQUFDO1FBRWxDLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFNMUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7SUFFcEMsQ0FBQztJQUVNLE9BQU87UUFDWixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQVcsV0FBVztRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBa0MsRUFBRSxNQUFjO1FBQzlELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUNELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVNLElBQUk7UUFDVCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQzVDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFCLENBQUM7SUFDSCxDQUFDO0lBRU0sVUFBVTtRQUNmLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7SUFDSCxDQUFDO0lBRU0sWUFBWTtRQUNqQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFDRCxlQUFlLGFBQWEsQ0FBQyIsImZpbGUiOiJDb3JlL1Jlc291cmNlcy9CdWZmZXIvQnVmZmVyV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCdWZmZXIgZnJvbSBcIi4vQnVmZmVyXCI7XG5pbXBvcnQgUmVzb3VyY2VXcmFwcGVyIGZyb20gXCIuLi9SZXNvdXJjZVdyYXBwZXJcIjtcbmltcG9ydCBDYW52YXMgZnJvbSBcIi4uLy4uL0NhbnZhcy9DYW52YXNcIjtcbi8qKlxuICogQnVmZmVyIHdyYXBwZXIgYmFzZWQgb24gY29udGV4dC5cbiAqL1xuY2xhc3MgQnVmZmVyV3JhcHBlciBleHRlbmRzIFJlc291cmNlV3JhcHBlciB7XG4gIHByaXZhdGUgX3RhcmdldEJ1ZmZlcjogV2ViR0xCdWZmZXIgPSBudWxsO1xuXG4gIHByaXZhdGUgX2xlbmd0aDogbnVtYmVyID0gMDtcblxuICBwcml2YXRlIF9wYXJlbnRCdWZmZXI6IEJ1ZmZlcjtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnRCdWZmZXI6IEJ1ZmZlciwgY2FudmFzOiBDYW52YXMpIHtcbiAgICBzdXBlcihjYW52YXMpO1xuICAgIHRoaXMuX3BhcmVudEJ1ZmZlciA9IHBhcmVudEJ1ZmZlcjtcblxuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3RhcmdldEJ1ZmZlcikge1xuICAgICAgdGhpcy5HTC5kZWxldGVCdWZmZXIodGhpcy5fdGFyZ2V0QnVmZmVyKTtcbiAgICAgIHRoaXMuX19zZXRJbml0aWFsaXplZChmYWxzZSk7XG4gICAgICB0aGlzLl90YXJnZXRCdWZmZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgVW5pdENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudEJ1ZmZlci5Vbml0Q291bnQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IEVsZW1lbnRUeXBlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudEJ1ZmZlci5FbGVtZW50VHlwZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgTm9ybWFsaXplZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50QnVmZmVyLk5vcm1hbGl6ZWQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IFN0cmlkZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnRCdWZmZXIuU3RyaWRlO1xuICB9XG5cbiAgcHVibGljIGdldCBPZmZzZXQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50QnVmZmVyLk9mZnNldDtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoYXJyYXk6IEFycmF5QnVmZmVyfEFycmF5QnVmZmVyVmlldywgbGVuZ3RoOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgICB0aGlzLmJpbmRCdWZmZXIoKTtcbiAgICB0aGlzLkdMLmJ1ZmZlckRhdGEodGhpcy5fcGFyZW50QnVmZmVyLlRhcmdldCwgYXJyYXksIHRoaXMuX3BhcmVudEJ1ZmZlci5Vc2FnZSk7XG4gICAgdGhpcy51bmJpbmRCdWZmZXIoKTtcbiAgICB0aGlzLl9sZW5ndGggPSBsZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0QnVmZmVyID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3RhcmdldEJ1ZmZlciA9IHRoaXMuR0wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICB0aGlzLl9fc2V0SW5pdGlhbGl6ZWQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYmluZEJ1ZmZlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5Jbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5HTC5iaW5kQnVmZmVyKHRoaXMuX3BhcmVudEJ1ZmZlci5UYXJnZXQsIHRoaXMuX3RhcmdldEJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgdGhpcy51cGRhdGUodGhpcy5fcGFyZW50QnVmZmVyLkVsZW1lbnRDYWNoZSwgdGhpcy5fcGFyZW50QnVmZmVyLkxlbmd0aCk7XG4gICAgICB0aGlzLkdMLmJpbmRCdWZmZXIodGhpcy5fcGFyZW50QnVmZmVyLlRhcmdldCwgdGhpcy5fdGFyZ2V0QnVmZmVyKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdW5iaW5kQnVmZmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLkluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLkdMLmJpbmRCdWZmZXIodGhpcy5fcGFyZW50QnVmZmVyLlRhcmdldCwgbnVsbCk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBCdWZmZXJXcmFwcGVyO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

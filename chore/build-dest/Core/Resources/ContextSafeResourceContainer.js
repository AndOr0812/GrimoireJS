import JThreeObjectWithID from "../../Base/JThreeObjectWithID";
import { AbstractClassMethodCalledException } from "../../Exceptions";
import JThreeContext from "../../JThreeContext";
import ContextComponents from "../../ContextComponents";
/**
 * Provides context difference abstraction.
 */
class ContextSafeResourceContainer extends JThreeObjectWithID {
    constructor() {
        super();
        this._childWrapper = {};
        this._wrapperLength = 0;
        const canvasManager = JThreeContext.getContextComponent(ContextComponents.CanvasManager);
        // Initialize resources for the renderers already subscribed.
        canvasManager.canvasListChanged.addListener(this._rendererChanged.bind(this));
    }
    dispose() {
        this.each((e) => {
            e.dispose();
        });
    }
    get wrappers() {
        const array = new Array(this._wrapperLength);
        let index = 0;
        this.each((elem) => {
            array[index] = elem;
            index++;
        });
        return array;
    }
    getForContext(canvas) {
        return this.getForContextID(canvas.ID);
    }
    getForContextID(id) {
        if (!this._childWrapper[id]) {
            console.log("There is no matching object with the ID:" + id);
        }
        return this._childWrapper[id];
    }
    each(act) {
        for (let key in this._childWrapper) {
            act(this._childWrapper[key]);
        }
    }
    __createWrapperForCanvas(canvas) {
        throw new AbstractClassMethodCalledException();
    }
    __initializeForFirst() {
        const canvasManager = JThreeContext.getContextComponent(ContextComponents.CanvasManager);
        canvasManager.canvases.forEach((v) => {
            this._childWrapper[v.ID] = this.__createWrapperForCanvas(v);
            this._wrapperLength++;
        });
    }
    _rendererChanged(object, arg) {
        if (arg.isAdditionalChange) {
            this._childWrapper[arg.canvas.ID] = this.__createWrapperForCanvas(arg.canvas);
            this._wrapperLength++;
        }
        else {
            const delTarget = this._childWrapper[arg.canvas.ID];
            delete this._childWrapper[arg.canvas.ID];
            delTarget.dispose();
            this._wrapperLength--;
        }
    }
}
export default ContextSafeResourceContainer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVzb3VyY2VzL0NvbnRleHRTYWZlUmVzb3VyY2VDb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQ08sa0JBQWtCLE1BQU0sK0JBQStCO09BR3ZELEVBQUMsa0NBQWtDLEVBQUMsTUFBTSxrQkFBa0I7T0FHNUQsYUFBYSxNQUFNLHFCQUFxQjtPQUV4QyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQ7O0dBRUc7QUFDSCwyQ0FBc0Usa0JBQWtCO0lBUXRGO1FBQ0UsT0FBTyxDQUFDO1FBTEYsa0JBQWEsR0FBeUIsRUFBRSxDQUFDO1FBRXpDLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO1FBSWpDLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBZ0IsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEcsNkRBQTZEO1FBQzdELGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDVixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDakIsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzdDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJO1lBQ2IsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSxhQUFhLENBQUMsTUFBYztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLGVBQWUsQ0FBQyxFQUFVO1FBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFlO1FBQ3pCLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0IsQ0FBQztJQUNILENBQUM7SUFFUyx3QkFBd0IsQ0FBQyxNQUFjO1FBQy9DLE1BQU0sSUFBSSxrQ0FBa0MsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFnQixpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN4RyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxNQUFXLEVBQUUsR0FBK0I7UUFDbkUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5RSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxTQUFTLEdBQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7QUFFSCxDQUFDO0FBRUQsZUFBZSw0QkFBNEIsQ0FBQyIsImZpbGUiOiJDb3JlL1Jlc291cmNlcy9Db250ZXh0U2FmZVJlc291cmNlQ29udGFpbmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IElEaXNwb3NhYmxlIGZyb20gXCIuLi8uLi9CYXNlL0lEaXNwb3NhYmxlXCI7XG5pbXBvcnQgSlRocmVlT2JqZWN0V2l0aElEIGZyb20gXCIuLi8uLi9CYXNlL0pUaHJlZU9iamVjdFdpdGhJRFwiO1xuaW1wb3J0IENhbnZhcyBmcm9tIFwiLi4vQ2FudmFzL0NhbnZhc1wiO1xuaW1wb3J0IHtBY3Rpb24xfSBmcm9tIFwiLi4vLi4vQmFzZS9EZWxlZ2F0ZXNcIjtcbmltcG9ydCB7QWJzdHJhY3RDbGFzc01ldGhvZENhbGxlZEV4Y2VwdGlvbn0gZnJvbSBcIi4uLy4uL0V4Y2VwdGlvbnNcIjtcbmltcG9ydCBDYW52YXNMaXN0Q2hhbmdlZEV2ZW50QXJncyBmcm9tIFwiLi4vQ2FudmFzL0lDYW52YXNMaXN0Q2hhbmdlZEV2ZW50QXJnc1wiO1xuaW1wb3J0IFJlc291cmNlV3JhcHBlciBmcm9tIFwiLi9SZXNvdXJjZVdyYXBwZXJcIjtcbmltcG9ydCBKVGhyZWVDb250ZXh0IGZyb20gXCIuLi8uLi9KVGhyZWVDb250ZXh0XCI7XG5pbXBvcnQgQ2FudmFzTWFuYWdlciBmcm9tIFwiLi4vQ2FudmFzL0NhbnZhc01hbmFnZXJcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbi8qKlxuICogUHJvdmlkZXMgY29udGV4dCBkaWZmZXJlbmNlIGFic3RyYWN0aW9uLlxuICovXG5jbGFzcyBDb250ZXh0U2FmZVJlc291cmNlQ29udGFpbmVyPFQgZXh0ZW5kcyBSZXNvdXJjZVdyYXBwZXI+IGV4dGVuZHMgSlRocmVlT2JqZWN0V2l0aElEIGltcGxlbWVudHMgSURpc3Bvc2FibGUge1xuXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfY2hpbGRXcmFwcGVyOiB7IFtrZXk6IHN0cmluZ106IFQgfSA9IHt9O1xuXG4gIHByaXZhdGUgX3dyYXBwZXJMZW5ndGg6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCBjYW52YXNNYW5hZ2VyID0gSlRocmVlQ29udGV4dC5nZXRDb250ZXh0Q29tcG9uZW50PENhbnZhc01hbmFnZXI+KENvbnRleHRDb21wb25lbnRzLkNhbnZhc01hbmFnZXIpO1xuICAgIC8vIEluaXRpYWxpemUgcmVzb3VyY2VzIGZvciB0aGUgcmVuZGVyZXJzIGFscmVhZHkgc3Vic2NyaWJlZC5cbiAgICBjYW52YXNNYW5hZ2VyLmNhbnZhc0xpc3RDaGFuZ2VkLmFkZExpc3RlbmVyKHRoaXMuX3JlbmRlcmVyQ2hhbmdlZC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuZWFjaCgoZSkgPT4ge1xuICAgICAgZS5kaXNwb3NlKCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHdyYXBwZXJzKCk6IFRbXSB7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXkodGhpcy5fd3JhcHBlckxlbmd0aCk7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB0aGlzLmVhY2goKGVsZW0pID0+IHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGVsZW07XG4gICAgICBpbmRleCsrO1xuICAgIH0pO1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGb3JDb250ZXh0KGNhbnZhczogQ2FudmFzKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Rm9yQ29udGV4dElEKGNhbnZhcy5JRCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Rm9yQ29udGV4dElEKGlkOiBzdHJpbmcpOiBUIHtcbiAgICBpZiAoIXRoaXMuX2NoaWxkV3JhcHBlcltpZF0pIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiVGhlcmUgaXMgbm8gbWF0Y2hpbmcgb2JqZWN0IHdpdGggdGhlIElEOlwiICsgaWQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2hpbGRXcmFwcGVyW2lkXTtcbiAgfVxuXG4gIHB1YmxpYyBlYWNoKGFjdDogQWN0aW9uMTxUPik6IHZvaWQge1xuICAgIGZvciAobGV0IGtleSBpbiB0aGlzLl9jaGlsZFdyYXBwZXIpIHtcbiAgICAgIGFjdCh0aGlzLl9jaGlsZFdyYXBwZXJba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9fY3JlYXRlV3JhcHBlckZvckNhbnZhcyhjYW52YXM6IENhbnZhcyk6IFQge1xuICAgIHRocm93IG5ldyBBYnN0cmFjdENsYXNzTWV0aG9kQ2FsbGVkRXhjZXB0aW9uKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX19pbml0aWFsaXplRm9yRmlyc3QoKTogdm9pZCB7XG4gICAgY29uc3QgY2FudmFzTWFuYWdlciA9IEpUaHJlZUNvbnRleHQuZ2V0Q29udGV4dENvbXBvbmVudDxDYW52YXNNYW5hZ2VyPihDb250ZXh0Q29tcG9uZW50cy5DYW52YXNNYW5hZ2VyKTtcbiAgICBjYW52YXNNYW5hZ2VyLmNhbnZhc2VzLmZvckVhY2goKHYpID0+IHtcbiAgICAgIHRoaXMuX2NoaWxkV3JhcHBlclt2LklEXSA9IHRoaXMuX19jcmVhdGVXcmFwcGVyRm9yQ2FudmFzKHYpO1xuICAgICAgdGhpcy5fd3JhcHBlckxlbmd0aCsrO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVuZGVyZXJDaGFuZ2VkKG9iamVjdDogYW55LCBhcmc6IENhbnZhc0xpc3RDaGFuZ2VkRXZlbnRBcmdzKTogdm9pZCB7XG4gICAgaWYgKGFyZy5pc0FkZGl0aW9uYWxDaGFuZ2UpIHtcbiAgICAgIHRoaXMuX2NoaWxkV3JhcHBlclthcmcuY2FudmFzLklEXSA9IHRoaXMuX19jcmVhdGVXcmFwcGVyRm9yQ2FudmFzKGFyZy5jYW52YXMpO1xuICAgICAgdGhpcy5fd3JhcHBlckxlbmd0aCsrO1xuICAgIH0gZWxzZSB7IC8vIFRPRE8gc2hvdWxkIGJlIHRlc3RlZFxuICAgICAgY29uc3QgZGVsVGFyZ2V0OiBUID0gdGhpcy5fY2hpbGRXcmFwcGVyW2FyZy5jYW52YXMuSURdO1xuICAgICAgZGVsZXRlIHRoaXMuX2NoaWxkV3JhcHBlclthcmcuY2FudmFzLklEXTtcbiAgICAgIGRlbFRhcmdldC5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl93cmFwcGVyTGVuZ3RoLS07XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dFNhZmVSZXNvdXJjZUNvbnRhaW5lcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

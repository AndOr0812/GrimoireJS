import ResourceWrapper from "../ResourceWrapper";
class FBOWrapper extends ResourceWrapper {
    constructor(canvas) {
        super(canvas);
        this._textures = [];
    }
    get TargetShader() {
        if (!this.Initialized) {
            this.init();
        }
        return this._targetFBO;
    }
    init() {
        if (!this.Initialized) {
            this._targetFBO = this.GL.createFramebuffer();
            this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, this._targetFBO);
            this.__setInitialized();
        }
    }
    bind() {
        if (!this.Initialized) {
            this.init();
        }
        this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, this._targetFBO);
    }
    unbind() {
        this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, null);
        /*        this.textures.forEach(tex=> {
                    tex.getForContext(this.OwnerCanvas).bind();
                    tex.generateMipmapIfNeed();
                });*/
    }
    attachTexture(attachmentType, tex) {
        if (!this.Initialized) {
            this.init();
        }
        this.bind();
        if (tex == null) {
            this.GL.framebufferTexture2D(this.GL.FRAMEBUFFER, attachmentType, this.GL.TEXTURE_2D, null, 0);
            return;
        }
        let wt = tex.getForContext(this.OwnerCanvas);
        wt.preTextureUpload();
        this.GL.framebufferTexture2D(this.GL.FRAMEBUFFER, attachmentType, this.GL.TEXTURE_2D, wt.TargetTexture, 0);
        tex.getForContext(this.OwnerCanvas).bind();
        tex.generateMipmapIfNeed();
        if (this._textures.indexOf(tex) !== -1) {
            this._textures.push(tex);
        }
        this.GL.bindTexture(tex.TargetTextureType, null);
    }
    attachRBO(attachmentType, rbo) {
        if (!this.Initialized) {
            this.init();
        }
        this.bind();
        if (rbo == null) {
            this.GL.framebufferRenderbuffer(this.GL.FRAMEBUFFER, attachmentType, this.GL.RENDERBUFFER, null);
            return;
        }
        let wrapper = rbo.getForContext(this.OwnerCanvas);
        this.GL.framebufferRenderbuffer(this.GL.FRAMEBUFFER, attachmentType, this.GL.RENDERBUFFER, wrapper.Target);
    }
    dispose() {
        if (this.Initialized) {
            this.GL.deleteFramebuffer(this._targetFBO);
            this._targetFBO = null;
            this.__setInitialized(false);
        }
    }
}
export default FBOWrapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVzb3VyY2VzL0ZCTy9GQk9XcmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUNPLGVBQWUsTUFBTSxvQkFBb0I7QUFHaEQseUJBQXlCLGVBQWU7SUFNdEMsWUFBWSxNQUFjO1FBQ3hCLE1BQU0sTUFBTSxDQUFDLENBQUM7UUFIUixjQUFTLEdBQWtCLEVBQUUsQ0FBQztJQUl0QyxDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxJQUFJO1FBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUM5QyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDOUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQztJQUNILENBQUM7SUFFTSxJQUFJO1FBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUs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RCxlQUFlLFVBQVUsQ0FBQyIsImZpbGUiOiJDb3JlL1Jlc291cmNlcy9GQk8vRkJPV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYW52YXMgZnJvbSBcIi4uLy4uL0NhbnZhcy9DYW52YXNcIjtcbmltcG9ydCBSZXNvdXJjZVdyYXBwZXIgZnJvbSBcIi4uL1Jlc291cmNlV3JhcHBlclwiO1xuaW1wb3J0IFRleHR1cmVCYXNlIGZyb20gXCIuLi9UZXh0dXJlL1RleHR1cmVCYXNlXCI7XG5pbXBvcnQgUkJPIGZyb20gXCIuLi9SQk8vUkJPXCI7XG5jbGFzcyBGQk9XcmFwcGVyIGV4dGVuZHMgUmVzb3VyY2VXcmFwcGVyIHtcblxuICBwcml2YXRlIF90YXJnZXRGQk86IFdlYkdMRnJhbWVidWZmZXI7XG5cbiAgcHJpdmF0ZSBfdGV4dHVyZXM6IFRleHR1cmVCYXNlW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihjYW52YXM6IENhbnZhcykge1xuICAgIHN1cGVyKGNhbnZhcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IFRhcmdldFNoYWRlcigpOiBXZWJHTFNoYWRlciB7XG4gICAgaWYgKCF0aGlzLkluaXRpYWxpemVkKSB7IHRoaXMuaW5pdCgpOyB9XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldEZCTztcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5Jbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5fdGFyZ2V0RkJPID0gdGhpcy5HTC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgdGhpcy5HTC5iaW5kRnJhbWVidWZmZXIodGhpcy5HTC5GUkFNRUJVRkZFUiwgdGhpcy5fdGFyZ2V0RkJPKTtcbiAgICAgIHRoaXMuX19zZXRJbml0aWFsaXplZCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBiaW5kKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5Jbml0aWFsaXplZCkgeyB0aGlzLmluaXQoKTsgfVxuICAgIHRoaXMuR0wuYmluZEZyYW1lYnVmZmVyKHRoaXMuR0wuRlJBTUVCVUZGRVIsIHRoaXMuX3RhcmdldEZCTyk7XG4gIH1cblxuICBwdWJsaWMgdW5iaW5kKCk6IHZvaWQge1xuICAgIHRoaXMuR0wuYmluZEZyYW1lYnVmZmVyKHRoaXMuR0wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgIC8qICAgICAgICB0aGlzLnRleHR1cmVzLmZvckVhY2godGV4PT4ge1xuICAgICAgICAgICAgICAgIHRleC5nZXRGb3JDb250ZXh0KHRoaXMuT3duZXJDYW52YXMpLmJpbmQoKTtcbiAgICAgICAgICAgICAgICB0ZXguZ2VuZXJhdGVNaXBtYXBJZk5lZWQoKTtcbiAgICAgICAgICAgIH0pOyovXG4gIH1cblxuICBwdWJsaWMgYXR0YWNoVGV4dHVyZShhdHRhY2htZW50VHlwZTogbnVtYmVyLCB0ZXg6IFRleHR1cmVCYXNlKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLkluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgdGhpcy5iaW5kKCk7XG4gICAgaWYgKHRleCA9PSBudWxsKSB7XG4gICAgICB0aGlzLkdMLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHRoaXMuR0wuRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnRUeXBlLCB0aGlzLkdMLlRFWFRVUkVfMkQsIG51bGwsIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgd3QgPSB0ZXguZ2V0Rm9yQ29udGV4dCh0aGlzLk93bmVyQ2FudmFzKTtcbiAgICB3dC5wcmVUZXh0dXJlVXBsb2FkKCk7XG4gICAgdGhpcy5HTC5mcmFtZWJ1ZmZlclRleHR1cmUyRCh0aGlzLkdMLkZSQU1FQlVGRkVSLCBhdHRhY2htZW50VHlwZSwgdGhpcy5HTC5URVhUVVJFXzJELCB3dC5UYXJnZXRUZXh0dXJlLCAwKTtcbiAgICB0ZXguZ2V0Rm9yQ29udGV4dCh0aGlzLk93bmVyQ2FudmFzKS5iaW5kKCk7XG4gICAgdGV4LmdlbmVyYXRlTWlwbWFwSWZOZWVkKCk7XG4gICAgaWYgKHRoaXMuX3RleHR1cmVzLmluZGV4T2YodGV4KSAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnB1c2godGV4KTtcbiAgICB9XG4gICAgdGhpcy5HTC5iaW5kVGV4dHVyZSh0ZXguVGFyZ2V0VGV4dHVyZVR5cGUsIG51bGwpO1xuICB9XG5cbiAgcHVibGljIGF0dGFjaFJCTyhhdHRhY2htZW50VHlwZTogbnVtYmVyLCByYm86IFJCTyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5Jbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIHRoaXMuYmluZCgpO1xuICAgIGlmIChyYm8gPT0gbnVsbCkge1xuICAgICAgdGhpcy5HTC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcih0aGlzLkdMLkZSQU1FQlVGRkVSLCBhdHRhY2htZW50VHlwZSwgdGhpcy5HTC5SRU5ERVJCVUZGRVIsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgd3JhcHBlciA9IHJiby5nZXRGb3JDb250ZXh0KHRoaXMuT3duZXJDYW52YXMpO1xuICAgIHRoaXMuR0wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIodGhpcy5HTC5GUkFNRUJVRkZFUiwgYXR0YWNobWVudFR5cGUsIHRoaXMuR0wuUkVOREVSQlVGRkVSLCB3cmFwcGVyLlRhcmdldCk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5Jbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5HTC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLl90YXJnZXRGQk8pO1xuICAgICAgdGhpcy5fdGFyZ2V0RkJPID0gbnVsbDtcbiAgICAgIHRoaXMuX19zZXRJbml0aWFsaXplZChmYWxzZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZCT1dyYXBwZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

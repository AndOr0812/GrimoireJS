import ResourceWrapper from "../ResourceWrapper";
/**
 * Provides wrapper class for Render Buffer Object depending on particular WebGLRenderingContext.
 * Most of user may have no reason to modify by themselves.
 */
class RBOWrapper extends ResourceWrapper {
    constructor(canvas, parentRBO) {
        super(canvas);
        this._parent = parentRBO;
    }
    get Target() {
        return this._targetRBO;
    }
    init() {
        if (this.Initialized) {
            return;
        }
        this._targetRBO = this.GL.createRenderbuffer();
        this.bind();
        this.GL.renderbufferStorage(this.GL.RENDERBUFFER, this._parent.Format, this._parent.Width, this._parent.Height);
        this.__setInitialized();
    }
    bind() {
        this.GL.bindRenderbuffer(this.GL.RENDERBUFFER, this._targetRBO);
    }
    resize(width, height) {
        if (this.Initialized) {
            this.bind();
            this.GL.renderbufferStorage(this.GL.RENDERBUFFER, this._parent.Format, this._parent.Width, this._parent.Height);
        }
    }
    dispose() {
        if (this._targetRBO) {
            this.GL.deleteRenderbuffer(this._targetRBO);
            this._targetRBO = null;
            this.__setInitialized(false);
        }
    }
}
export default RBOWrapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVzb3VyY2VzL1JCTy9SQk9XcmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLGVBQWUsTUFBTSxvQkFBb0I7QUFHaEQ7OztHQUdHO0FBQ0gseUJBQXlCLGVBQWU7SUFjdEMsWUFBWSxNQUFjLEVBQUUsU0FBYztRQUN4QyxNQUFNLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7SUFDM0IsQ0FBQztJQVhELElBQVcsTUFBTTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFXTSxJQUFJO1FBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUM7UUFBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBYSxFQUFFLE1BQWM7UUFDekMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ1osSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xILENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFDRCxlQUFlLFVBQVUsQ0FBQyIsImZpbGUiOiJDb3JlL1Jlc291cmNlcy9SQk8vUkJPV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZXNvdXJjZVdyYXBwZXIgZnJvbSBcIi4uL1Jlc291cmNlV3JhcHBlclwiO1xuaW1wb3J0IENhbnZhcyBmcm9tIFwiLi4vLi4vQ2FudmFzL0NhbnZhc1wiO1xuaW1wb3J0IFJCTyBmcm9tIFwiLi9SQk9cIjtcbi8qKlxuICogUHJvdmlkZXMgd3JhcHBlciBjbGFzcyBmb3IgUmVuZGVyIEJ1ZmZlciBPYmplY3QgZGVwZW5kaW5nIG9uIHBhcnRpY3VsYXIgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlxuICogTW9zdCBvZiB1c2VyIG1heSBoYXZlIG5vIHJlYXNvbiB0byBtb2RpZnkgYnkgdGhlbXNlbHZlcy5cbiAqL1xuY2xhc3MgUkJPV3JhcHBlciBleHRlbmRzIFJlc291cmNlV3JhcHBlciB7XG5cdC8qKlxuXHQgKlx0UmVmZXJlbmNlIHRvIHRoZSBXZWJHTFJlbmRlcmJ1ZmZlciB0aGlzIGNsYXNzIG1hbmFnaW5nLlxuXHQgICovXG4gIHByaXZhdGUgX3RhcmdldFJCTzogV2ViR0xSZW5kZXJidWZmZXI7XG5cbiAgcHVibGljIGdldCBUYXJnZXQoKTogV2ViR0xSZW5kZXJidWZmZXIge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRSQk87XG4gIH1cblx0LyoqXG5cdCAqIFRoZSBwYXJlbnQgUkJPV3JhcHBlciBjb250YWluZXIgY2xhc3MuXG5cdCAqL1xuICBwcml2YXRlIF9wYXJlbnQ6IFJCTztcblxuICBjb25zdHJ1Y3RvcihjYW52YXM6IENhbnZhcywgcGFyZW50UkJPOiBSQk8pIHtcbiAgICBzdXBlcihjYW52YXMpO1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudFJCTztcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLkluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgIHRoaXMuX3RhcmdldFJCTyA9IHRoaXMuR0wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG4gICAgdGhpcy5iaW5kKCk7XG4gICAgdGhpcy5HTC5yZW5kZXJidWZmZXJTdG9yYWdlKHRoaXMuR0wuUkVOREVSQlVGRkVSLCB0aGlzLl9wYXJlbnQuRm9ybWF0LCB0aGlzLl9wYXJlbnQuV2lkdGgsIHRoaXMuX3BhcmVudC5IZWlnaHQpO1xuICAgIHRoaXMuX19zZXRJbml0aWFsaXplZCgpO1xuICB9XG5cbiAgcHVibGljIGJpbmQoKTogdm9pZCB7XG4gICAgdGhpcy5HTC5iaW5kUmVuZGVyYnVmZmVyKHRoaXMuR0wuUkVOREVSQlVGRkVSLCB0aGlzLl90YXJnZXRSQk8pO1xuICB9XG5cbiAgcHVibGljIHJlc2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLkluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmJpbmQoKTtcbiAgICAgIHRoaXMuR0wucmVuZGVyYnVmZmVyU3RvcmFnZSh0aGlzLkdMLlJFTkRFUkJVRkZFUiwgdGhpcy5fcGFyZW50LkZvcm1hdCwgdGhpcy5fcGFyZW50LldpZHRoLCB0aGlzLl9wYXJlbnQuSGVpZ2h0KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0UkJPKSB7XG4gICAgICB0aGlzLkdMLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLl90YXJnZXRSQk8pO1xuICAgICAgdGhpcy5fdGFyZ2V0UkJPID0gbnVsbDtcbiAgICAgIHRoaXMuX19zZXRJbml0aWFsaXplZChmYWxzZSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBSQk9XcmFwcGVyO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

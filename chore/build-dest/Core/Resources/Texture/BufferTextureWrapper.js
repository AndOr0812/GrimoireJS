import TextureWrapperBase from "./TextureWrapperBase";
class BufferTextureWrapper extends TextureWrapperBase {
    constructor(ownerCanvas, parent) {
        super(ownerCanvas, parent);
    }
    init() {
        if (this.Initialized) {
            return;
        }
        const parent = this.Parent;
        this.__setTargetTexture(this.GL.createTexture());
        this.bind();
        this.GL.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, parent.TextureFormat, parent.Width, parent.Height, 0, parent.TextureFormat, parent.ElementFormat, null);
        this.__setInitialized();
    }
    unbind() {
        // TODO consider is it really need to implement unbind
        this.GL.bindTexture(WebGLRenderingContext.TEXTURE_2D, null);
    }
    resize(width, height) {
        this.bind();
        if (this.Initialized) {
            const parent = this.Parent;
            this.preTextureUpload();
            this.GL.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, parent.TextureFormat, parent.Width, parent.Height, 0, parent.TextureFormat, parent.ElementFormat, null);
        }
    }
    updateTexture(buffer) {
        this.bind();
        if (this.Initialized) {
            const parent = this.Parent;
            this.preTextureUpload();
            this.GL.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, parent.TextureFormat, parent.Width, parent.Height, 0, parent.TextureFormat, parent.ElementFormat, buffer);
        }
        this.unbind();
    }
    generateHtmlImage(encoder) {
        const parent = this.Parent;
        return this.__encodeHtmlImage(parent.Width, parent.Height, encoder);
    }
}
export default BufferTextureWrapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVzb3VyY2VzL1RleHR1cmUvQnVmZmVyVGV4dHVyZVdyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BRU8sa0JBQWtCLE1BQU0sc0JBQXNCO0FBRXJELG1DQUFtQyxrQkFBa0I7SUFDbkQsWUFBWSxXQUFtQixFQUFFLE1BQXFCO1FBQ3BELE1BQU0sV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxJQUFJO1FBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUM7UUFBQyxDQUFDO1FBQ2pDLE1BQU0sTUFBTSxHQUFrQixJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hLLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxNQUFNO1FBQ1gsc0RBQXNEO1FBQ3RELElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQWEsRUFBRSxNQUFjO1FBQ3pDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sTUFBTSxHQUFrQixJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsSyxDQUFDO0lBQ0gsQ0FBQztJQUVNLGFBQWEsQ0FBQyxNQUF1QjtRQUMxQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNyQixNQUFNLE1BQU0sR0FBa0IsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMxQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEssQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU0saUJBQWlCLENBQUMsT0FBNEQ7UUFDbkYsTUFBTSxNQUFNLEdBQWtCLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEUsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLG9CQUFvQixDQUFDIiwiZmlsZSI6IkNvcmUvUmVzb3VyY2VzL1RleHR1cmUvQnVmZmVyVGV4dHVyZVdyYXBwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2FudmFzIGZyb20gXCIuLi8uLi9DYW52YXMvQ2FudmFzXCI7XG5pbXBvcnQgQnVmZmVyVGV4dHVyZSBmcm9tIFwiLi9CdWZmZXJUZXh0dXJlXCI7XG5pbXBvcnQgVGV4dHVyZVdyYXBwZXJCYXNlIGZyb20gXCIuL1RleHR1cmVXcmFwcGVyQmFzZVwiO1xuaW1wb3J0IHtGdW5jM30gZnJvbSBcIi4uLy4uLy4uL0Jhc2UvRGVsZWdhdGVzXCI7XG5jbGFzcyBCdWZmZXJUZXh0dXJlV3JhcHBlciBleHRlbmRzIFRleHR1cmVXcmFwcGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKG93bmVyQ2FudmFzOiBDYW52YXMsIHBhcmVudDogQnVmZmVyVGV4dHVyZSkge1xuICAgIHN1cGVyKG93bmVyQ2FudmFzLCBwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIGluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuSW5pdGlhbGl6ZWQpIHsgcmV0dXJuOyB9XG4gICAgY29uc3QgcGFyZW50ID0gPEJ1ZmZlclRleHR1cmU+dGhpcy5QYXJlbnQ7XG4gICAgdGhpcy5fX3NldFRhcmdldFRleHR1cmUodGhpcy5HTC5jcmVhdGVUZXh0dXJlKCkpO1xuICAgIHRoaXMuYmluZCgpO1xuICAgIHRoaXMuR0wudGV4SW1hZ2UyRChXZWJHTFJlbmRlcmluZ0NvbnRleHQuVEVYVFVSRV8yRCwgMCwgcGFyZW50LlRleHR1cmVGb3JtYXQsIHBhcmVudC5XaWR0aCwgcGFyZW50LkhlaWdodCwgMCwgcGFyZW50LlRleHR1cmVGb3JtYXQsIHBhcmVudC5FbGVtZW50Rm9ybWF0LCBudWxsKTtcbiAgICB0aGlzLl9fc2V0SW5pdGlhbGl6ZWQoKTtcbiAgfVxuXG4gIHB1YmxpYyB1bmJpbmQoKTogdm9pZCB7XG4gICAgLy8gVE9ETyBjb25zaWRlciBpcyBpdCByZWFsbHkgbmVlZCB0byBpbXBsZW1lbnQgdW5iaW5kXG4gICAgdGhpcy5HTC5iaW5kVGV4dHVyZShXZWJHTFJlbmRlcmluZ0NvbnRleHQuVEVYVFVSRV8yRCwgbnVsbCk7XG4gIH1cblxuICBwdWJsaWMgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5iaW5kKCk7XG4gICAgaWYgKHRoaXMuSW5pdGlhbGl6ZWQpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IDxCdWZmZXJUZXh0dXJlPnRoaXMuUGFyZW50O1xuICAgICAgdGhpcy5wcmVUZXh0dXJlVXBsb2FkKCk7XG4gICAgICB0aGlzLkdMLnRleEltYWdlMkQoV2ViR0xSZW5kZXJpbmdDb250ZXh0LlRFWFRVUkVfMkQsIDAsIHBhcmVudC5UZXh0dXJlRm9ybWF0LCBwYXJlbnQuV2lkdGgsIHBhcmVudC5IZWlnaHQsIDAsIHBhcmVudC5UZXh0dXJlRm9ybWF0LCBwYXJlbnQuRWxlbWVudEZvcm1hdCwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZVRleHR1cmUoYnVmZmVyOiBBcnJheUJ1ZmZlclZpZXcpOiB2b2lkIHtcbiAgICB0aGlzLmJpbmQoKTtcbiAgICBpZiAodGhpcy5Jbml0aWFsaXplZCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gPEJ1ZmZlclRleHR1cmU+dGhpcy5QYXJlbnQ7XG4gICAgICB0aGlzLnByZVRleHR1cmVVcGxvYWQoKTtcbiAgICAgIHRoaXMuR0wudGV4SW1hZ2UyRChXZWJHTFJlbmRlcmluZ0NvbnRleHQuVEVYVFVSRV8yRCwgMCwgcGFyZW50LlRleHR1cmVGb3JtYXQsIHBhcmVudC5XaWR0aCwgcGFyZW50LkhlaWdodCwgMCwgcGFyZW50LlRleHR1cmVGb3JtYXQsIHBhcmVudC5FbGVtZW50Rm9ybWF0LCBidWZmZXIpO1xuICAgIH1cbiAgICB0aGlzLnVuYmluZCgpO1xuICB9XG5cbiAgcHVibGljIGdlbmVyYXRlSHRtbEltYWdlKGVuY29kZXI/OiBGdW5jMzxudW1iZXIsIG51bWJlciwgQXJyYXlCdWZmZXJWaWV3LCBVaW50OEFycmF5Pik6IEhUTUxJbWFnZUVsZW1lbnQge1xuICAgIGNvbnN0IHBhcmVudCA9IDxCdWZmZXJUZXh0dXJlPnRoaXMuUGFyZW50O1xuICAgIHJldHVybiB0aGlzLl9fZW5jb2RlSHRtbEltYWdlKHBhcmVudC5XaWR0aCwgcGFyZW50LkhlaWdodCwgZW5jb2Rlcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyVGV4dHVyZVdyYXBwZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

import ContextComponents from "../ContextComponents";
import SceneStructureDebugger from "./Modules/SceneStructureDebugger";
import RendererDebugger from "./Modules/RendererDebugger";
class Debugger {
    constructor() {
        this._debuggerModules = [new SceneStructureDebugger(), new RendererDebugger()];
        this.debuggerAPI = window.j3d;
        if (!this.debuggerAPI) {
            console.warn("Debugger API was not found! Did you surely import j3d.js?\nDebugger will not be attached.");
        }
    }
    getContextComponentIndex() {
        return ContextComponents.Debugger;
    }
    attach() {
        if (this.debuggerAPI) {
            this._debuggerModules.forEach(m => m.attach(this));
            console.info("Debugger API was attached.");
        }
        ;
    }
    setInfo(key, val) {
        if (!this.debuggerAPI) {
            return;
        }
        if (typeof val === "object") {
            let stringfied = "";
            for (let k in val) {
                const v = val[k];
                stringfied += `${k}:${v}<br/>`;
            }
            val = stringfied;
        }
        this.debuggerAPI.info.setInfo(key, val);
    }
}
export default Debugger;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlYnVnL0RlYnVnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUNPLGlCQUFpQixNQUFNLHNCQUFzQjtPQUU3QyxzQkFBc0IsTUFBTSxrQ0FBa0M7T0FFOUQsZ0JBQWdCLE1BQU0sNEJBQTRCO0FBRXpEO0lBTUU7UUFIUSxxQkFBZ0IsR0FBeUIsQ0FBQyxJQUFJLHNCQUFzQixFQUFFLEVBQTZCLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBSWpJLElBQUksQ0FBQyxXQUFXLEdBQVMsTUFBTyxDQUFDLEdBQUcsQ0FBQztRQUNyQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkZBQTJGLENBQUMsQ0FBQztRQUM1RyxDQUFDO0lBQ0gsQ0FBQztJQUVNLHdCQUF3QjtRQUM3QixNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFTSxNQUFNO1FBQ1gsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE9BQU8sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQUEsQ0FBQztJQUNKLENBQUM7SUFFTSxPQUFPLENBQUMsR0FBVyxFQUFFLEdBQVE7UUFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLENBQUM7UUFDVCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDcEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixVQUFVLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDakMsQ0FBQztZQUNELEdBQUcsR0FBRyxVQUFVLENBQUM7UUFDbkIsQ0FBQztRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLFFBQVEsQ0FBQyIsImZpbGUiOiJEZWJ1Zy9EZWJ1Z2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJQ29udGV4dENvbXBvbmVudCBmcm9tIFwiLi4vSUNvbnRleHRDb21wb25lbnRcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbmltcG9ydCBEZWJ1Z2dlck1vZHVsZUJhc2UgZnJvbSBcIi4vTW9kdWxlcy9EZWJ1Z2dlck1vZHVsZUJhc2VcIjtcbmltcG9ydCBTY2VuZVN0cnVjdHVyZURlYnVnZ2VyIGZyb20gXCIuL01vZHVsZXMvU2NlbmVTdHJ1Y3R1cmVEZWJ1Z2dlclwiO1xuLy8gaW1wb3J0IEdMU3BlY0RlYnVnZ2VyIGZyb20gXCIuL01vZHVsZXMvR0xTcGVjRGVidWdnZXJcIjtcbmltcG9ydCBSZW5kZXJlckRlYnVnZ2VyIGZyb20gXCIuL01vZHVsZXMvUmVuZGVyZXJEZWJ1Z2dlclwiO1xuaW1wb3J0IERlYnVnZ2VyQVBJIGZyb20gXCIuL0RlYnVnZ2VyQVBJXCI7XG5jbGFzcyBEZWJ1Z2dlciBpbXBsZW1lbnRzIElDb250ZXh0Q29tcG9uZW50IHtcbiAgcHVibGljIGRlYnVnZ2VyQVBJOiBEZWJ1Z2dlckFQSTtcblxuICBwcml2YXRlIF9kZWJ1Z2dlck1vZHVsZXM6IERlYnVnZ2VyTW9kdWxlQmFzZVtdID0gW25ldyBTY2VuZVN0cnVjdHVyZURlYnVnZ2VyKCksIC8qbmV3IEdMU3BlY0RlYnVnZ2VyKCksICovIG5ldyBSZW5kZXJlckRlYnVnZ2VyKCldO1xuXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kZWJ1Z2dlckFQSSA9ICg8YW55PndpbmRvdykuajNkO1xuICAgIGlmICghdGhpcy5kZWJ1Z2dlckFQSSkge1xuICAgICAgY29uc29sZS53YXJuKFwiRGVidWdnZXIgQVBJIHdhcyBub3QgZm91bmQhIERpZCB5b3Ugc3VyZWx5IGltcG9ydCBqM2QuanM/XFxuRGVidWdnZXIgd2lsbCBub3QgYmUgYXR0YWNoZWQuXCIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRDb250ZXh0Q29tcG9uZW50SW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gQ29udGV4dENvbXBvbmVudHMuRGVidWdnZXI7XG4gIH1cblxuICBwdWJsaWMgYXR0YWNoKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRlYnVnZ2VyQVBJKSB7XG4gICAgICB0aGlzLl9kZWJ1Z2dlck1vZHVsZXMuZm9yRWFjaChtID0+IG0uYXR0YWNoKHRoaXMpKTtcbiAgICAgIGNvbnNvbGUuaW5mbyhcIkRlYnVnZ2VyIEFQSSB3YXMgYXR0YWNoZWQuXCIpO1xuICAgIH07XG4gIH1cblxuICBwdWJsaWMgc2V0SW5mbyhrZXk6IHN0cmluZywgdmFsOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGVidWdnZXJBUEkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGxldCBzdHJpbmdmaWVkID0gXCJcIjtcbiAgICAgIGZvciAobGV0IGsgaW4gdmFsKSB7XG4gICAgICAgIGNvbnN0IHYgPSB2YWxba107XG4gICAgICAgIHN0cmluZ2ZpZWQgKz0gYCR7a306JHt2fTxici8+YDtcbiAgICAgIH1cbiAgICAgIHZhbCA9IHN0cmluZ2ZpZWQ7XG4gICAgfVxuICAgIHRoaXMuZGVidWdnZXJBUEkuaW5mby5zZXRJbmZvKGtleSwgdmFsKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZWJ1Z2dlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

import JThreeObjectWithID from "../../Base/JThreeObjectWithID";
class AnimaterBase extends JThreeObjectWithID {
    constructor(targetAttribute, begintime, duration, beginValue, endValue, easing, onComplete) {
        super();
        this.__targetAttribute = targetAttribute;
        this.__beginTime = begintime;
        this.__duration = duration;
        this.__onComplete = onComplete;
        this.__easingFunction = easing;
        this.__beginValue = this.__targetAttribute.Converter.toObjectAttr(beginValue);
        this.__endValue = this.__targetAttribute.Converter.toObjectAttr(endValue);
    }
    /**
    * Upate
    */
    update(time) {
        let progress = (time - this.__beginTime) / this.__duration;
        const isFinish = progress >= 1;
        progress = Math.min(Math.max(progress, 0), 1); // clamp [0,1]
        this.__updateAnimation(progress);
        if (isFinish && typeof this.__onComplete === "function") {
            this.__onComplete();
        }
        return isFinish;
    }
    /**
     * This methods should be overridden.
     * @param {number} progress [description]
     */
    __updateAnimation(progress) {
        return;
    }
}
export default AnimaterBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvbWwvQW5pbWF0ZXIvQW5pbWF0ZXJCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLGtCQUFrQixNQUFNLCtCQUErQjtBQUs5RCwyQkFBMkIsa0JBQWtCO0lBZTNDLFlBQVksZUFBOEIsRUFBRSxTQUFpQixFQUFFLFFBQWdCLEVBQUUsVUFBZSxFQUFFLFFBQWEsRUFBRSxNQUEwQixFQUFFLFVBQW9CO1FBQy9KLE9BQU8sQ0FBQztRQUNSLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7UUFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVEOztNQUVFO0lBQ0ssTUFBTSxDQUFDLElBQVk7UUFDeEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDM0QsTUFBTSxRQUFRLEdBQUcsUUFBUSxJQUFJLENBQUMsQ0FBQztRQUMvQixRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWM7UUFDN0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsSUFBSSxPQUFPLElBQUksQ0FBQyxZQUFZLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEIsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7T0FHRztJQUNPLGlCQUFpQixDQUFDLFFBQWdCO1FBQzFDLE1BQU0sQ0FBQztJQUNULENBQUM7QUFDSCxDQUFDO0FBRUQsZUFBZSxZQUFZLENBQUMiLCJmaWxlIjoiR29tbC9BbmltYXRlci9BbmltYXRlckJhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlRocmVlT2JqZWN0V2l0aElEIGZyb20gXCIuLi8uLi9CYXNlL0pUaHJlZU9iamVjdFdpdGhJRFwiO1xuaW1wb3J0IEdvbWxBdHRyaWJ1dGUgZnJvbSBcIi4uL0dvbWxBdHRyaWJ1dGVcIjtcbmltcG9ydCBFYXNpbmdGdW5jdGlvbkJhc2UgZnJvbSBcIi4uL0Vhc2luZy9FYXNpbmdGdW5jdGlvbkJhc2VcIjtcbmltcG9ydCB7QWN0aW9uMH0gZnJvbSBcIi4uLy4uL0Jhc2UvRGVsZWdhdGVzXCI7XG5cbmNsYXNzIEFuaW1hdGVyQmFzZSBleHRlbmRzIEpUaHJlZU9iamVjdFdpdGhJRCB7XG4gIHByb3RlY3RlZCBfX3RhcmdldEF0dHJpYnV0ZTogR29tbEF0dHJpYnV0ZTtcblxuICBwcm90ZWN0ZWQgX19vbkNvbXBsZXRlOiBBY3Rpb24wO1xuXG4gIHByb3RlY3RlZCBfX2R1cmF0aW9uOiBudW1iZXI7XG5cbiAgcHJvdGVjdGVkIF9fYmVnaW5UaW1lOiBudW1iZXI7XG5cbiAgcHJvdGVjdGVkIF9fZWFzaW5nRnVuY3Rpb246IEVhc2luZ0Z1bmN0aW9uQmFzZTtcblxuICBwcm90ZWN0ZWQgX19iZWdpblZhbHVlOiBhbnk7XG5cbiAgcHJvdGVjdGVkIF9fZW5kVmFsdWU6IGFueTtcblxuICBjb25zdHJ1Y3Rvcih0YXJnZXRBdHRyaWJ1dGU6IEdvbWxBdHRyaWJ1dGUsIGJlZ2ludGltZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCBiZWdpblZhbHVlOiBhbnksIGVuZFZhbHVlOiBhbnksIGVhc2luZzogRWFzaW5nRnVuY3Rpb25CYXNlLCBvbkNvbXBsZXRlPzogQWN0aW9uMCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX3RhcmdldEF0dHJpYnV0ZSA9IHRhcmdldEF0dHJpYnV0ZTtcbiAgICB0aGlzLl9fYmVnaW5UaW1lID0gYmVnaW50aW1lO1xuICAgIHRoaXMuX19kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHRoaXMuX19vbkNvbXBsZXRlID0gb25Db21wbGV0ZTtcbiAgICB0aGlzLl9fZWFzaW5nRnVuY3Rpb24gPSBlYXNpbmc7XG4gICAgdGhpcy5fX2JlZ2luVmFsdWUgPSB0aGlzLl9fdGFyZ2V0QXR0cmlidXRlLkNvbnZlcnRlci50b09iamVjdEF0dHIoYmVnaW5WYWx1ZSk7XG4gICAgdGhpcy5fX2VuZFZhbHVlID0gdGhpcy5fX3RhcmdldEF0dHJpYnV0ZS5Db252ZXJ0ZXIudG9PYmplY3RBdHRyKGVuZFZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAqIFVwYXRlXG4gICovXG4gIHB1YmxpYyB1cGRhdGUodGltZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgbGV0IHByb2dyZXNzID0gKHRpbWUgLSB0aGlzLl9fYmVnaW5UaW1lKSAvIHRoaXMuX19kdXJhdGlvbjtcbiAgICBjb25zdCBpc0ZpbmlzaCA9IHByb2dyZXNzID49IDE7XG4gICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpOyAvLyBjbGFtcCBbMCwxXVxuICAgIHRoaXMuX191cGRhdGVBbmltYXRpb24ocHJvZ3Jlc3MpO1xuICAgIGlmIChpc0ZpbmlzaCAmJiB0eXBlb2YgdGhpcy5fX29uQ29tcGxldGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5fX29uQ29tcGxldGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRmluaXNoO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kcyBzaG91bGQgYmUgb3ZlcnJpZGRlbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHByb2dyZXNzIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByb3RlY3RlZCBfX3VwZGF0ZUFuaW1hdGlvbihwcm9ncmVzczogbnVtYmVyKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGVyQmFzZTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

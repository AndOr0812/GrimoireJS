import GomlTreeNodeBase from "../../GomlTreeNodeBase";
import ContextComponents from "../../../ContextComponents";
import JThreeContext from "../../../JThreeContext";
class ImportNode extends GomlTreeNodeBase {
    constructor() {
        super();
        this._type = null;
        this.attributes.defineAttribute({
            "type": {
                value: undefined,
                converter: "string",
                onchanged: this._onTypeAttrChanged.bind(this),
            },
            "src": {
                value: undefined,
                converter: "string",
                onchanged: this._onSrcAttrChanged.bind(this),
            }
        });
        this._materialManager = JThreeContext.getContextComponent(ContextComponents.MaterialManager);
    }
    __onMount() {
        super.__onMount();
    }
    _onTypeAttrChanged(attr) {
        if (["material"].indexOf(attr.Value) !== -1) {
            this._type = attr.Value;
            attr.done();
        }
        else {
            throw new Error(`Unknown type: ${attr.Value}`);
        }
    }
    _onSrcAttrChanged(attr) {
        const path = attr.Value;
        if (!this._type) {
            switch (path.match(/\.(\w+?)$/)[1]) {
                case "xmml":
                    this._type = "material";
                    break;
            }
        }
        if (this._type) {
            this._getImport(path, attr.done.bind(attr));
        }
    }
    _getImport(path, done) {
        const xhr = new XMLHttpRequest();
        xhr.open("GET", path, true);
        xhr.setRequestHeader("Accept", "text");
        xhr.onload = () => {
            if (xhr.status === 200) {
                let exportName = null;
                switch (this._type) {
                    case "material":
                        const matName = this._materialManager.registerMaterial(xhr.responseText);
                        exportName = `material-${matName}`;
                        break;
                }
                this.nodeExport(exportName);
            }
            done();
        };
        xhr.onerror = (err) => {
            console.error(err);
            done();
        };
        xhr.send(null);
    }
}
export default ImportNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvbWwvTm9kZXMvSW1wb3J0cy9JbXBvcnROb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLGdCQUFnQixNQUFNLHdCQUF3QjtPQUU5QyxpQkFBaUIsTUFBTSw0QkFBNEI7T0FDbkQsYUFBYSxNQUFNLHdCQUF3QjtBQUdsRCx5QkFBeUIsZ0JBQWdCO0lBS3ZDO1FBQ0UsT0FBTyxDQUFDO1FBSEYsVUFBSyxHQUFXLElBQUksQ0FBQztRQUkzQixJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztZQUM5QixNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLFNBQVMsRUFBRSxRQUFRO2dCQUNuQixTQUFTLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDOUM7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLFNBQVMsRUFBRSxRQUFRO2dCQUNuQixTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDN0M7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFrQixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBR1MsU0FBUztRQUNqQixLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVPLGtCQUFrQixDQUFDLElBQW1CO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELENBQUM7SUFDSCxDQUFDO0lBRU8saUJBQWlCLENBQUMsSUFBbUI7UUFDM0MsTUFBTSxJQUFJLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxLQUFLLE1BQU07b0JBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7b0JBQ3hCLEtBQUssQ0FBQztZQUNWLENBQUM7UUFDSCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUM7SUFDSCxDQUFDO0lBRU8sVUFBVSxDQUFDLElBQVksRUFBRSxJQUFnQjtRQUMvQyxNQUFNLEdBQUcsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxNQUFNLEdBQUc7WUFDWCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDdEIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ25CLEtBQUssVUFBVTt3QkFDYixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUN6RSxVQUFVLEdBQUcsWUFBWSxPQUFPLEVBQUUsQ0FBQzt3QkFDbkMsS0FBSyxDQUFDO2dCQUNWLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM5QixDQUFDO1lBQ0QsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDLENBQUM7UUFDRixHQUFHLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDO1FBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixDQUFDO0FBQ0gsQ0FBQztBQUVELGVBQWUsVUFBVSxDQUFDIiwiZmlsZSI6IkdvbWwvTm9kZXMvSW1wb3J0cy9JbXBvcnROb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdvbWxUcmVlTm9kZUJhc2UgZnJvbSBcIi4uLy4uL0dvbWxUcmVlTm9kZUJhc2VcIjtcbmltcG9ydCBNYXRlcmlhbE1hbmFnZXIgZnJvbSBcIi4uLy4uLy4uL0NvcmUvTWF0ZXJpYWxzL0Jhc2UvTWF0ZXJpYWxNYW5hZ2VyXCI7XG5pbXBvcnQgQ29udGV4dENvbXBvbmVudHMgZnJvbSBcIi4uLy4uLy4uL0NvbnRleHRDb21wb25lbnRzXCI7XG5pbXBvcnQgSlRocmVlQ29udGV4dCBmcm9tIFwiLi4vLi4vLi4vSlRocmVlQ29udGV4dFwiO1xuaW1wb3J0IEdvbWxBdHRyaWJ1dGUgZnJvbSBcIi4uLy4uL0dvbWxBdHRyaWJ1dGVcIjtcblxuY2xhc3MgSW1wb3J0Tm9kZSBleHRlbmRzIEdvbWxUcmVlTm9kZUJhc2Uge1xuICBwcml2YXRlIF9tYXRlcmlhbE1hbmFnZXI6IE1hdGVyaWFsTWFuYWdlcjtcblxuICBwcml2YXRlIF90eXBlOiBzdHJpbmcgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hdHRyaWJ1dGVzLmRlZmluZUF0dHJpYnV0ZSh7XG4gICAgICBcInR5cGVcIjoge1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBjb252ZXJ0ZXI6IFwic3RyaW5nXCIsXG4gICAgICAgIG9uY2hhbmdlZDogdGhpcy5fb25UeXBlQXR0ckNoYW5nZWQuYmluZCh0aGlzKSxcbiAgICAgIH0sXG4gICAgICBcInNyY1wiOiB7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGNvbnZlcnRlcjogXCJzdHJpbmdcIixcbiAgICAgICAgb25jaGFuZ2VkOiB0aGlzLl9vblNyY0F0dHJDaGFuZ2VkLmJpbmQodGhpcyksXG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5fbWF0ZXJpYWxNYW5hZ2VyID0gSlRocmVlQ29udGV4dC5nZXRDb250ZXh0Q29tcG9uZW50PE1hdGVyaWFsTWFuYWdlcj4oQ29udGV4dENvbXBvbmVudHMuTWF0ZXJpYWxNYW5hZ2VyKTtcbiAgfVxuXG5cbiAgcHJvdGVjdGVkIF9fb25Nb3VudCgpOiB2b2lkIHtcbiAgICBzdXBlci5fX29uTW91bnQoKTtcbiAgfVxuXG4gIHByaXZhdGUgX29uVHlwZUF0dHJDaGFuZ2VkKGF0dHI6IEdvbWxBdHRyaWJ1dGUpOiB2b2lkIHtcbiAgICBpZiAoW1wibWF0ZXJpYWxcIl0uaW5kZXhPZihhdHRyLlZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX3R5cGUgPSBhdHRyLlZhbHVlO1xuICAgICAgYXR0ci5kb25lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biB0eXBlOiAke2F0dHIuVmFsdWV9YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfb25TcmNBdHRyQ2hhbmdlZChhdHRyOiBHb21sQXR0cmlidXRlKTogdm9pZCB7XG4gICAgY29uc3QgcGF0aDogc3RyaW5nID0gYXR0ci5WYWx1ZTtcbiAgICBpZiAoIXRoaXMuX3R5cGUpIHtcbiAgICAgIHN3aXRjaCAocGF0aC5tYXRjaCgvXFwuKFxcdys/KSQvKVsxXSkge1xuICAgICAgICBjYXNlIFwieG1tbFwiOlxuICAgICAgICAgIHRoaXMuX3R5cGUgPSBcIm1hdGVyaWFsXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLl90eXBlKSB7XG4gICAgICB0aGlzLl9nZXRJbXBvcnQocGF0aCwgYXR0ci5kb25lLmJpbmQoYXR0cikpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2dldEltcG9ydChwYXRoOiBzdHJpbmcsIGRvbmU6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihcIkdFVFwiLCBwYXRoLCB0cnVlKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcInRleHRcIik7XG4gICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgbGV0IGV4cG9ydE5hbWUgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3R5cGUpIHtcbiAgICAgICAgICBjYXNlIFwibWF0ZXJpYWxcIjpcbiAgICAgICAgICAgIGNvbnN0IG1hdE5hbWUgPSB0aGlzLl9tYXRlcmlhbE1hbmFnZXIucmVnaXN0ZXJNYXRlcmlhbCh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIGV4cG9ydE5hbWUgPSBgbWF0ZXJpYWwtJHttYXROYW1lfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGVFeHBvcnQoZXhwb3J0TmFtZSk7XG4gICAgICB9XG4gICAgICBkb25lKCk7XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9IChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9O1xuICAgIHhoci5zZW5kKG51bGwpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltcG9ydE5vZGU7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

import OrthoCamera from "../../../../Core/SceneObjects/Camera/OrthoCamera";
import CameraNodeBase from "./CameraNodeBase";
class OrthoCameraNode extends CameraNodeBase {
    constructor() {
        super();
        this.attributes.defineAttribute({
            "left": {
                value: -100,
                converter: "float",
                onchanged: this._onLeftAttrChanged.bind(this),
            },
            "right": {
                value: 100,
                converter: "float",
                onchanged: this._onRightAttrChanged.bind(this),
            },
            "bottom": {
                value: -100,
                converter: "float",
                onchanged: this._onBottomAttrChanged.bind(this),
            },
            "top": {
                value: 100,
                converter: "float",
                onchanged: this._onTopAttrChanged.bind(this),
            },
            "near": {
                value: -100,
                converter: "float",
                onchanged: this._onNearAttrChanged.bind(this),
            },
            "far": {
                value: -100,
                converter: "float",
                onchanged: this._onFarAttrChanged.bind(this),
            }
        });
        this.on("update-scene-object", (obj) => {
            this._onLeftAttrChanged.call(this, this.attributes.getAttribute("left"));
            this._onRightAttrChanged.call(this, this.attributes.getAttribute("right"));
            this._onBottomAttrChanged.call(this, this.attributes.getAttribute("bottom"));
            this._onTopAttrChanged.call(this, this.attributes.getAttribute("top"));
            this._onNearAttrChanged.call(this, this.attributes.getAttribute("near"));
            this._onFarAttrChanged.call(this, this.attributes.getAttribute("far"));
        });
    }
    __constructCamera() {
        return new OrthoCamera();
    }
    _onLeftAttrChanged(attr) {
        if (this.TargetSceneObject) {
            this.TargetSceneObject.Left = attr.Value;
            attr.done();
        }
    }
    _onRightAttrChanged(attr) {
        if (this.TargetSceneObject) {
            this.TargetSceneObject.Right = attr.Value;
            attr.done();
        }
    }
    _onBottomAttrChanged(attr) {
        if (this.TargetSceneObject) {
            this.TargetSceneObject.Bottom = attr.Value;
            attr.done();
        }
    }
    _onTopAttrChanged(attr) {
        if (this.TargetSceneObject) {
            this.TargetSceneObject.Top = attr.Value;
            attr.done();
        }
    }
    _onNearAttrChanged(attr) {
        if (this.TargetSceneObject) {
            this.TargetSceneObject.Near = attr.Value;
            attr.done();
        }
    }
    _onFarAttrChanged(attr) {
        if (this.TargetSceneObject) {
            this.TargetSceneObject.Far = attr.Value;
            attr.done();
        }
    }
}
export default OrthoCameraNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvbWwvTm9kZXMvU2NlbmVPYmplY3RzL0NhbWVyYXMvT3J0aG9DYW1lcmFOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLFdBQVcsTUFBTSxrREFBa0Q7T0FDbkUsY0FBYyxNQUFNLGtCQUFrQjtBQUc3Qyw4QkFBOEIsY0FBYztJQUUxQztRQUNFLE9BQU8sQ0FBQztRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDO1lBQzlCLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxHQUFHO2dCQUNYLFNBQVMsRUFBRSxPQUFPO2dCQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDOUM7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsS0FBSyxFQUFFLEdBQUc7Z0JBQ1YsU0FBUyxFQUFFLE9BQU87Z0JBQ2xCLFNBQVMsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUMvQztZQUNELFFBQVEsRUFBRTtnQkFDUixLQUFLLEVBQUUsQ0FBQyxHQUFHO2dCQUNYLFNBQVMsRUFBRSxPQUFPO2dCQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDaEQ7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLEdBQUc7Z0JBQ1YsU0FBUyxFQUFFLE9BQU87Z0JBQ2xCLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUM3QztZQUNELE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxHQUFHO2dCQUNYLFNBQVMsRUFBRSxPQUFPO2dCQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDOUM7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLENBQUMsR0FBRztnQkFDWCxTQUFTLEVB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Q0FBQyxDQUFDO1lBQ2IsSUFBSSxDQUFDLGlCQUFrQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELGVBQWUsZUFBZSxDQUFDIiwiZmlsZSI6IkdvbWwvTm9kZXMvU2NlbmVPYmplY3RzL0NhbWVyYXMvT3J0aG9DYW1lcmFOb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9ydGhvQ2FtZXJhIGZyb20gXCIuLi8uLi8uLi8uLi9Db3JlL1NjZW5lT2JqZWN0cy9DYW1lcmEvT3J0aG9DYW1lcmFcIjtcbmltcG9ydCBDYW1lcmFOb2RlQmFzZSBmcm9tIFwiLi9DYW1lcmFOb2RlQmFzZVwiO1xuaW1wb3J0IEdvbWxBdHRyaWJ1dGUgZnJvbSBcIi4uLy4uLy4uL0dvbWxBdHRyaWJ1dGVcIjtcblxuY2xhc3MgT3J0aG9DYW1lcmFOb2RlIGV4dGVuZHMgQ2FtZXJhTm9kZUJhc2U8T3J0aG9DYW1lcmE+IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYXR0cmlidXRlcy5kZWZpbmVBdHRyaWJ1dGUoe1xuICAgICAgXCJsZWZ0XCI6IHtcbiAgICAgICAgdmFsdWU6IC0xMDAsXG4gICAgICAgIGNvbnZlcnRlcjogXCJmbG9hdFwiLFxuICAgICAgICBvbmNoYW5nZWQ6IHRoaXMuX29uTGVmdEF0dHJDaGFuZ2VkLmJpbmQodGhpcyksXG4gICAgICB9LFxuICAgICAgXCJyaWdodFwiOiB7XG4gICAgICAgIHZhbHVlOiAxMDAsXG4gICAgICAgIGNvbnZlcnRlcjogXCJmbG9hdFwiLFxuICAgICAgICBvbmNoYW5nZWQ6IHRoaXMuX29uUmlnaHRBdHRyQ2hhbmdlZC5iaW5kKHRoaXMpLFxuICAgICAgfSxcbiAgICAgIFwiYm90dG9tXCI6IHtcbiAgICAgICAgdmFsdWU6IC0xMDAsXG4gICAgICAgIGNvbnZlcnRlcjogXCJmbG9hdFwiLFxuICAgICAgICBvbmNoYW5nZWQ6IHRoaXMuX29uQm90dG9tQXR0ckNoYW5nZWQuYmluZCh0aGlzKSxcbiAgICAgIH0sXG4gICAgICBcInRvcFwiOiB7XG4gICAgICAgIHZhbHVlOiAxMDAsXG4gICAgICAgIGNvbnZlcnRlcjogXCJmbG9hdFwiLFxuICAgICAgICBvbmNoYW5nZWQ6IHRoaXMuX29uVG9wQXR0ckNoYW5nZWQuYmluZCh0aGlzKSxcbiAgICAgIH0sXG4gICAgICBcIm5lYXJcIjoge1xuICAgICAgICB2YWx1ZTogLTEwMCxcbiAgICAgICAgY29udmVydGVyOiBcImZsb2F0XCIsXG4gICAgICAgIG9uY2hhbmdlZDogdGhpcy5fb25OZWFyQXR0ckNoYW5nZWQuYmluZCh0aGlzKSxcbiAgICAgIH0sXG4gICAgICBcImZhclwiOiB7XG4gICAgICAgIHZhbHVlOiAtMTAwLFxuICAgICAgICBjb252ZXJ0ZXI6IFwiZmxvYXRcIixcbiAgICAgICAgb25jaGFuZ2VkOiB0aGlzLl9vbkZhckF0dHJDaGFuZ2VkLmJpbmQodGhpcyksXG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5vbihcInVwZGF0ZS1zY2VuZS1vYmplY3RcIiwgKG9iajogT3J0aG9DYW1lcmEpID0+IHtcbiAgICAgIHRoaXMuX29uTGVmdEF0dHJDaGFuZ2VkLmNhbGwodGhpcywgdGhpcy5hdHRyaWJ1dGVzLmdldEF0dHJpYnV0ZShcImxlZnRcIikpO1xuICAgICAgdGhpcy5fb25SaWdodEF0dHJDaGFuZ2VkLmNhbGwodGhpcywgdGhpcy5hdHRyaWJ1dGVzLmdldEF0dHJpYnV0ZShcInJpZ2h0XCIpKTtcbiAgICAgIHRoaXMuX29uQm90dG9tQXR0ckNoYW5nZWQuY2FsbCh0aGlzLCB0aGlzLmF0dHJpYnV0ZXMuZ2V0QXR0cmlidXRlKFwiYm90dG9tXCIpKTtcbiAgICAgIHRoaXMuX29uVG9wQXR0ckNoYW5nZWQuY2FsbCh0aGlzLCB0aGlzLmF0dHJpYnV0ZXMuZ2V0QXR0cmlidXRlKFwidG9wXCIpKTtcbiAgICAgIHRoaXMuX29uTmVhckF0dHJDaGFuZ2VkLmNhbGwodGhpcywgdGhpcy5hdHRyaWJ1dGVzLmdldEF0dHJpYnV0ZShcIm5lYXJcIikpO1xuICAgICAgdGhpcy5fb25GYXJBdHRyQ2hhbmdlZC5jYWxsKHRoaXMsIHRoaXMuYXR0cmlidXRlcy5nZXRBdHRyaWJ1dGUoXCJmYXJcIikpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9fY29uc3RydWN0Q2FtZXJhKCk6IE9ydGhvQ2FtZXJhIHtcbiAgICByZXR1cm4gbmV3IE9ydGhvQ2FtZXJhKCk7XG4gIH1cblxuICBwcml2YXRlIF9vbkxlZnRBdHRyQ2hhbmdlZChhdHRyOiBHb21sQXR0cmlidXRlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuVGFyZ2V0U2NlbmVPYmplY3QpIHtcbiAgICAgICg8T3J0aG9DYW1lcmE+dGhpcy5UYXJnZXRTY2VuZU9iamVjdCkuTGVmdCA9IGF0dHIuVmFsdWU7XG4gICAgICBhdHRyLmRvbmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vblJpZ2h0QXR0ckNoYW5nZWQoYXR0cjogR29tbEF0dHJpYnV0ZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLlRhcmdldFNjZW5lT2JqZWN0KSB7XG4gICAgICAoPE9ydGhvQ2FtZXJhPnRoaXMuVGFyZ2V0U2NlbmVPYmplY3QpLlJpZ2h0ID0gYXR0ci5WYWx1ZTtcbiAgICAgIGF0dHIuZG9uZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX29uQm90dG9tQXR0ckNoYW5nZWQoYXR0cjogR29tbEF0dHJpYnV0ZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLlRhcmdldFNjZW5lT2JqZWN0KSB7XG4gICAgICAoPE9ydGhvQ2FtZXJhPnRoaXMuVGFyZ2V0U2NlbmVPYmplY3QpLkJvdHRvbSA9IGF0dHIuVmFsdWU7XG4gICAgICBhdHRyLmRvbmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vblRvcEF0dHJDaGFuZ2VkKGF0dHI6IEdvbWxBdHRyaWJ1dGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5UYXJnZXRTY2VuZU9iamVjdCkge1xuICAgICAgKDxPcnRob0NhbWVyYT50aGlzLlRhcmdldFNjZW5lT2JqZWN0KS5Ub3AgPSBhdHRyLlZhbHVlO1xuICAgICAgYXR0ci5kb25lKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfb25OZWFyQXR0ckNoYW5nZWQoYXR0cjogR29tbEF0dHJpYnV0ZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLlRhcmdldFNjZW5lT2JqZWN0KSB7XG4gICAgICAoPE9ydGhvQ2FtZXJhPnRoaXMuVGFyZ2V0U2NlbmVPYmplY3QpLk5lYXIgPSBhdHRyLlZhbHVlO1xuICAgICAgYXR0ci5kb25lKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfb25GYXJBdHRyQ2hhbmdlZChhdHRyOiBHb21sQXR0cmlidXRlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuVGFyZ2V0U2NlbmVPYmplY3QpIHtcbiAgICAgICg8T3J0aG9DYW1lcmE+dGhpcy5UYXJnZXRTY2VuZU9iamVjdCkuRmFyID0gYXR0ci5WYWx1ZTtcbiAgICAgIGF0dHIuZG9uZSgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPcnRob0NhbWVyYU5vZGU7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

import ImageLoader from "../../../Core/Resources/ImageLoader";
import TextureNodeBase from "./TextureNodeBase";
import Q from "q";
/**
 * Basic 2d texture resource node.
 */
class TextureNode extends TextureNodeBase {
    constructor() {
        super();
        this.__groupPrefix = "Texture2D";
        this.attributes.defineAttribute({
            src: {
                converter: "string",
                src: undefined,
                onchanged: this._onSrcAttrChanged.bind(this),
            }
        });
        this.on("update-target", (obj) => {
            this._onSrcAttrChanged.call(this, this.attributes.getAttribute("src"));
        });
    }
    __constructTexture(name, rm) {
        const deferred = Q.defer();
        if (this.attributes.getValue("src")) {
            rm.loadTexture(this.attributes.getValue("src")).then((texture) => {
                deferred.resolve(texture);
            });
        }
        else {
            process.nextTick(() => {
                deferred.resolve(null);
            });
        }
        return deferred.promise;
    }
    _onSrcAttrChanged(attr) {
        if (this.target) {
            ImageLoader.loadImage(attr.Value).then(imgTag => {
                this.target.ImageSource = imgTag;
            });
            attr.done();
        }
    }
}
export default TextureNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvbWwvTm9kZXMvVGV4dHVyZS9UZXh0dXJlTm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FDTyxXQUFXLE1BQU0scUNBQXFDO09BR3RELGVBQWUsTUFBTSxtQkFBbUI7T0FFeEMsQ0FBQyxNQUFNLEdBQUc7QUFDakI7O0dBRUc7QUFDSCwwQkFBMEIsZUFBZTtJQUd2QztRQUNFLE9BQU8sQ0FBQztRQUhBLGtCQUFhLEdBQVcsV0FBVyxDQUFDO1FBSTVDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDO1lBQzlCLEdBQUcsRUFBRTtnQkFDSCxTQUFTLEVBQUUsUUFBUTtnQkFDbkIsR0FBRyxFQUFFLFNBQVM7Z0JBQ2QsU0FBUyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQzdDO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxHQUFZO1lBQ3BDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsa0JBQWtCLENBQUMsSUFBWSxFQUFFLEVBQW1CO1FBQzVELE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQWUsQ0FBQztRQUN4QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU87Z0JBQzNELFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUNmLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUVPLGlCQUFpQixDQUFDLElBQW1CO1FBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNO2dCQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLFdBQVcsQ0FBQyIsImZpbGUiOiJHb21sL05vZGVzL1RleHR1cmUvVGV4dHVyZU5vZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vLi4vLi4vQ29yZS9SZXNvdXJjZXMvVGV4dHVyZS9UZXh0dXJlXCI7XG5pbXBvcnQgSW1hZ2VMb2FkZXIgZnJvbSBcIi4uLy4uLy4uL0NvcmUvUmVzb3VyY2VzL0ltYWdlTG9hZGVyXCI7XG5pbXBvcnQgUmVzb3VyY2VNYW5hZ2VyIGZyb20gXCIuLi8uLi8uLi9Db3JlL1Jlc291cmNlTWFuYWdlclwiO1xuaW1wb3J0IFRleHR1cmVCYXNlIGZyb20gXCIuLi8uLi8uLi9Db3JlL1Jlc291cmNlcy9UZXh0dXJlL1RleHR1cmVCYXNlXCI7XG5pbXBvcnQgVGV4dHVyZU5vZGVCYXNlIGZyb20gXCIuL1RleHR1cmVOb2RlQmFzZVwiO1xuaW1wb3J0IEdvbWxBdHRyaWJ1dGUgZnJvbSBcIi4uLy4uL0dvbWxBdHRyaWJ1dGVcIjtcbmltcG9ydCBRIGZyb20gXCJxXCI7XG4vKipcbiAqIEJhc2ljIDJkIHRleHR1cmUgcmVzb3VyY2Ugbm9kZS5cbiAqL1xuY2xhc3MgVGV4dHVyZU5vZGUgZXh0ZW5kcyBUZXh0dXJlTm9kZUJhc2U8VGV4dHVyZT4ge1xuICBwcm90ZWN0ZWQgX19ncm91cFByZWZpeDogc3RyaW5nID0gXCJUZXh0dXJlMkRcIjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYXR0cmlidXRlcy5kZWZpbmVBdHRyaWJ1dGUoe1xuICAgICAgc3JjOiB7XG4gICAgICAgIGNvbnZlcnRlcjogXCJzdHJpbmdcIixcbiAgICAgICAgc3JjOiB1bmRlZmluZWQsXG4gICAgICAgIG9uY2hhbmdlZDogdGhpcy5fb25TcmNBdHRyQ2hhbmdlZC5iaW5kKHRoaXMpLFxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMub24oXCJ1cGRhdGUtdGFyZ2V0XCIsIChvYmo6IFRleHR1cmUpID0+IHtcbiAgICAgIHRoaXMuX29uU3JjQXR0ckNoYW5nZWQuY2FsbCh0aGlzLCB0aGlzLmF0dHJpYnV0ZXMuZ2V0QXR0cmlidXRlKFwic3JjXCIpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfX2NvbnN0cnVjdFRleHR1cmUobmFtZTogc3RyaW5nLCBybTogUmVzb3VyY2VNYW5hZ2VyKTogUS5JUHJvbWlzZTxUZXh0dXJlPiB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBRLmRlZmVyPFRleHR1cmVCYXNlPigpO1xuICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuZ2V0VmFsdWUoXCJzcmNcIikpIHtcbiAgICAgIHJtLmxvYWRUZXh0dXJlKHRoaXMuYXR0cmlidXRlcy5nZXRWYWx1ZShcInNyY1wiKSkudGhlbigodGV4dHVyZSkgPT4ge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRleHR1cmUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG51bGwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25TcmNBdHRyQ2hhbmdlZChhdHRyOiBHb21sQXR0cmlidXRlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICBJbWFnZUxvYWRlci5sb2FkSW1hZ2UoYXR0ci5WYWx1ZSkudGhlbihpbWdUYWcgPT4ge1xuICAgICAgICB0aGlzLnRhcmdldC5JbWFnZVNvdXJjZSA9IGltZ1RhZztcbiAgICAgIH0pO1xuICAgICAgYXR0ci5kb25lKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHR1cmVOb2RlO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

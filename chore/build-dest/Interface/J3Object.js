import GomlTreeNodeBase from "../Goml/GomlTreeNodeBase";
import J3ObjectBase from "./J3ObjectBase";
import isArray from "lodash.isarray";
import isString from "lodash.isstring";
/**
 * Provides jQuery like API for jThree.
 */
class J3Object extends J3ObjectBase {
    /**
     * Construct J3Object from Nodes or selector query.
     * @param {GomlTreeNodeBase[]} nodes [description]
     */
    constructor(argu) {
        super();
        let nodes;
        let query;
        switch (true) {
            case (isString(argu)):
                query = argu;
                break;
            case (argu instanceof GomlTreeNodeBase):
                nodes = [argu];
                break;
            case (isArray(argu) && argu.every((v) => v instanceof GomlTreeNodeBase)):
                nodes = argu;
                break;
            default:
                throw new Error("Argument type is not correct");
        }
        if (nodes) {
            this.__setArray(nodes);
        }
        else if (query) {
            this.__setArray(J3Object.find(query));
        }
    }
}
export default J3Object;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkludGVyZmFjZS9KM09iamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxnQkFBZ0IsTUFBTSwwQkFBMEI7T0FDaEQsWUFBWSxNQUFNLGdCQUFnQjtPQUNsQyxPQUFPLE1BQU0sZ0JBQWdCO09BQzdCLFFBQVEsTUFBTSxpQkFBaUI7QUFPdEM7O0dBRUc7QUFDSCx1QkFBdUIsWUFBWTtJQVdqQzs7O09BR0c7SUFDSCxZQUFZLElBQVM7UUFDbkIsT0FBTyxDQUFDO1FBQ1IsSUFBSSxLQUF5QixDQUFDO1FBQzlCLElBQUksS0FBYSxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDYixLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQixLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNiLEtBQUssQ0FBQztZQUNSLEtBQUssQ0FBQyxJQUFJLFlBQVksZ0JBQWdCLENBQUM7Z0JBQ3JDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNmLEtBQUssQ0FBQztZQUNSLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQXlCLElBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLGdCQUFnQixDQUFDLENBQUM7Z0JBQzVGLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2IsS0FBSyxDQUFDO1lBQ1I7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQztJQUNILENBQUM7QUFnRkgsQ0FBQztBQUVELGVBQWUsUUFBUSxDQUFDIiwiZmlsZSI6IkludGVyZmFjZS9KM09iamVjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHb21sVHJlZU5vZGVCYXNlIGZyb20gXCIuLi9Hb21sL0dvbWxUcmVlTm9kZUJhc2VcIjtcbmltcG9ydCBKM09iamVjdEJhc2UgZnJvbSBcIi4vSjNPYmplY3RCYXNlXCI7XG5pbXBvcnQgaXNBcnJheSBmcm9tIFwibG9kYXNoLmlzYXJyYXlcIjtcbmltcG9ydCBpc1N0cmluZyBmcm9tIFwibG9kYXNoLmlzc3RyaW5nXCI7XG4vLyBmb3IgSW1wbGVtZW50c1xuaW1wb3J0IEdvbWxOb2RlTWV0aG9kcyBmcm9tIFwiLi9NaXNjZWxsYW5lb3VzL0dvbWxOb2RlTWV0aG9kc1wiO1xuaW1wb3J0IFRyZWVUcmF2ZXJzYWwgZnJvbSBcIi4vVHJhdmVyc2luZy9UcmVlVHJhdmVyc2FsXCI7XG5pbXBvcnQgR2VuZXJhbEF0dHJpYnV0ZXMgZnJvbSBcIi4vTWFuaXB1bGF0aW9uL0dlbmVyYWxBdHRyaWJ1dGVzXCI7XG5pbXBvcnQgQ29sbGVjdGlvbk1hbmlwdWxhdGlvbiBmcm9tIFwiLi9NYW5pcHVsYXRpb24vQ29sbGVjdGlvbk1hbmlwdWxhdGlvblwiO1xuXG4vKipcbiAqIFByb3ZpZGVzIGpRdWVyeSBsaWtlIEFQSSBmb3IgalRocmVlLlxuICovXG5jbGFzcyBKM09iamVjdCBleHRlbmRzIEozT2JqZWN0QmFzZSBpbXBsZW1lbnRzIEdvbWxOb2RlTWV0aG9kcywgVHJlZVRyYXZlcnNhbCwgR2VuZXJhbEF0dHJpYnV0ZXMsIENvbGxlY3Rpb25NYW5pcHVsYXRpb24ge1xuICAvKipcbiAgICogQ29uc3RydWN0IEozT2JqZWN0IGZyb20gTm9kZXMuXG4gICAqIEBwYXJhbSB7R29tbFRyZWVOb2RlQmFzZVtdfSBub2RlcyBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihub2RlczogR29tbFRyZWVOb2RlQmFzZVtdKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBKM09iamVjdCBmcm9tIHNlbGVjdG9yIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IocXVlcnk6IHN0cmluZyk7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgSjNPYmplY3QgZnJvbSBOb2RlcyBvciBzZWxlY3RvciBxdWVyeS5cbiAgICogQHBhcmFtIHtHb21sVHJlZU5vZGVCYXNlW119IG5vZGVzIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGFyZ3U6IGFueSkge1xuICAgIHN1cGVyKCk7XG4gICAgbGV0IG5vZGVzOiBHb21sVHJlZU5vZGVCYXNlW107XG4gICAgbGV0IHF1ZXJ5OiBzdHJpbmc7XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIChpc1N0cmluZyhhcmd1KSk6XG4gICAgICAgIHF1ZXJ5ID0gYXJndTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIChhcmd1IGluc3RhbmNlb2YgR29tbFRyZWVOb2RlQmFzZSk6XG4gICAgICAgIG5vZGVzID0gW2FyZ3VdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKGlzQXJyYXkoYXJndSkgJiYgKDxHb21sVHJlZU5vZGVCYXNlW10+YXJndSkuZXZlcnkoKHYpID0+IHYgaW5zdGFuY2VvZiBHb21sVHJlZU5vZGVCYXNlKSk6XG4gICAgICAgIG5vZGVzID0gYXJndTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCB0eXBlIGlzIG5vdCBjb3JyZWN0XCIpO1xuICAgIH1cbiAgICBpZiAobm9kZXMpIHtcbiAgICAgIHRoaXMuX19zZXRBcnJheShub2Rlcyk7XG4gICAgfSBlbHNlIGlmIChxdWVyeSkge1xuICAgICAgdGhpcy5fX3NldEFycmF5KEozT2JqZWN0LmZpbmQocXVlcnkpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXRpbGl0aWVzL1V0aWxpdGllc1xuICAgKi9cblxuICBwdWJsaWMgc3RhdGljIGVhY2g6IHtcbiAgICAoYXJndTA6IGFueSwgY2FsbGJhY2s6IChhcmd1MTogYW55LCBhcmd1MjogYW55KSA9PiBhbnkpOiBhbnk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0YXRpYy9GaW5kXG4gICAqL1xuXG4gIHB1YmxpYyBzdGF0aWMgZmluZDoge1xuICAgIChzZWxlY3Rvcjogc3RyaW5nLCBjb250ZXh0PzogR29tbFRyZWVOb2RlQmFzZSk6IEdvbWxUcmVlTm9kZUJhc2VbXTtcbiAgfTtcblxuICAvKipcbiAgICogTWlzY2VsbGFuZW91cy9Hb21sTm9kZU1ldGhvZHNcbiAgICovXG5cbiAgcHVibGljIGdldDoge1xuICAgICgpOiBHb21sVHJlZU5vZGVCYXNlW107XG4gICAgKGluZGV4OiBudW1iZXIpOiBHb21sVHJlZU5vZGVCYXNlO1xuICAgIChpbmRleD86IG51bWJlcik6IGFueTtcbiAgfTtcblxuICBwdWJsaWMgZ2V0T2JqOiB7XG4gICAgPFQ+KCk6IFRbXTtcbiAgICA8VD4oaW5kZXg6IG51bWJlcik6IFQ7XG4gICAgPFQ+KGFyZ3U/OiBudW1iZXIpOiBhbnk7XG4gIH07XG5cbiAgcHVibGljIGluZGV4OiB7XG4gICAgKCk6IG51bWJlcjtcbiAgICAoc2VsZWN0b3I6IHN0cmluZyk6IG51bWJlcjtcbiAgICAobm9kZTogR29tbFRyZWVOb2RlQmFzZSk6IG51bWJlcjtcbiAgICAoajNvYmo6IEozT2JqZWN0KTogbnVtYmVyO1xuICAgIChhcmc/OiBzdHJpbmcgfCBHb21sVHJlZU5vZGVCYXNlIHwgSjNPYmplY3QpOiBudW1iZXJcbiAgfTtcblxuICAvKipcbiAgICogVHJhdmVyc2luZy9UcmVlVHJhdmVyc2FsXG4gICAqL1xuXG4gIHB1YmxpYyBmaW5kOiB7XG4gICAgKHNlbGVjdG9yOiBzdHJpbmcpOiBKM09iamVjdDtcbiAgICAobm9kZTogR29tbFRyZWVOb2RlQmFzZSk6IEozT2JqZWN0O1xuICAgIChqM29iajogSjNPYmplY3QpOiBKM09iamVjdDtcbiAgICAoYXJndTogYW55KTogSjNPYmplY3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1hbmlwdWxhdGlvbi9HZW5lcmFsQXR0cmlidXRlc1xuICAgKi9cblxuICBwdWJsaWMgYXR0cjoge1xuICAgIChhdHRyaWJ1dGVOYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IEozT2JqZWN0O1xuICAgIChhdHRyaWJ1dGVzOiBPYmplY3QpOiBKM09iamVjdDtcbiAgICAoYXR0cmlidXRlTmFtZTogc3RyaW5nLCBmdW5jOiAobnVtYmVyLCBzdHJpbmcpID0+IHN0cmluZyk6IEozT2JqZWN0O1xuICAgIChhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsIGZ1bmM6IChudW1iZXIsIHN0cmluZykgPT4gbnVtYmVyKTogSjNPYmplY3Q7XG4gICAgKGFyZ3UwOiBhbnksIGFyZ3UxPzogYW55KTogYW55O1xuICB9O1xuXG4gIHB1YmxpYyBhdHRyT2JqOiB7XG4gICAgKGF0dHJpYnV0ZU5hbWU6IHN0cmluZyk6IGFueTtcbiAgICAoYXR0cmlidXRlTmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogSjNPYmplY3Q7XG4gICAgKGF0dHJpYnV0ZXM6IE9iamVjdCk6IEozT2JqZWN0O1xuICAgIChhcmd1MDogYW55LCBhcmd1MT86IGFueSk6IGFueTtcbiAgfTtcblxuICAvKipcbiAgICogTWFuaXB1bGF0aW9uL0NvbGxlY3Rpb25NYW5pcHVsYXRpb25cbiAgICovXG5cbiAgcHVibGljIGVhY2g6IHtcbiAgICAoZnVuYzogKGluZGV4OiBudW1iZXIsIG5vZGU6IEdvbWxUcmVlTm9kZUJhc2UpID0+IGJvb2xlYW4pOiBKM09iamVjdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSjNPYmplY3Q7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

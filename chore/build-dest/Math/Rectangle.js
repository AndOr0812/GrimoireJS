import Vector2 from "./Vector2";
import jThreeObject from "../Base/JThreeObject";
class Rectangle extends jThreeObject {
    constructor(left, top, width, height) {
        super();
        this._left = left;
        this._top = top;
        this._width = width;
        this._height = height;
    }
    static equals(r1, r2) {
        return r1.Left === r2.Left && r1.Right === r2.Right && r1.Top === r2.Top && r1.Bottom === r2.Bottom;
    }
    static edgeSizeEquals(r1, r2) {
        return r1.Width === r2.Width && r1.Height === r2.Height;
    }
    get Left() {
        return this._left;
    }
    get Right() {
        return this.Left + this.Width;
    }
    get Top() {
        return this._top;
    }
    get Bottom() {
        return this._top + this._height;
    }
    get Width() {
        return this._width;
    }
    get Height() {
        return this._height;
    }
    contains(xOrPoint, y) {
        let x;
        if (xOrPoint instanceof Vector2) {
            x = xOrPoint.X;
            y = xOrPoint.Y;
        }
        else {
            x = xOrPoint;
        }
        return this.Left <= x && this.Right >= x && this.Top <= y && this.Bottom >= y;
    }
    toLocal(xOrPoint, y) {
        let x;
        if (xOrPoint instanceof Vector2) {
            x = xOrPoint.X;
            y = xOrPoint.Y;
        }
        else {
            x = xOrPoint;
        }
        x -= this.Left;
        y -= this.Top;
        return xOrPoint instanceof Vector2 ? new Vector2(x, y) : [x, y];
    }
    toString() {
        return `Rectangle(${this.Left},${this.Top}-${this.Right},${this.Bottom})`;
    }
}
export default Rectangle;

//# sourceMappingURL=data:application/json;base64,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QUFHLENBQUM7UUFFZCxNQUFNLENBQUMsUUFBUSxZQUFZLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVNLFFBQVE7UUFDYixNQUFNLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7SUFDNUUsQ0FBQztBQUVILENBQUM7QUFDRCxlQUFlLFNBQVMsQ0FBQyIsImZpbGUiOiJNYXRoL1JlY3RhbmdsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IyIGZyb20gXCIuL1ZlY3RvcjJcIjtcbmltcG9ydCBqVGhyZWVPYmplY3QgZnJvbSBcIi4uL0Jhc2UvSlRocmVlT2JqZWN0XCI7XG5jbGFzcyBSZWN0YW5nbGUgZXh0ZW5kcyBqVGhyZWVPYmplY3Qge1xuXG4gIHByaXZhdGUgX2xlZnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfdG9wOiBudW1iZXI7XG4gIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9sZWZ0ID0gbGVmdDtcbiAgICB0aGlzLl90b3AgPSB0b3A7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGVxdWFscyhyMTogUmVjdGFuZ2xlLCByMjogUmVjdGFuZ2xlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHIxLkxlZnQgPT09IHIyLkxlZnQgJiYgcjEuUmlnaHQgPT09IHIyLlJpZ2h0ICYmIHIxLlRvcCA9PT0gcjIuVG9wICYmIHIxLkJvdHRvbSA9PT0gcjIuQm90dG9tO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBlZGdlU2l6ZUVxdWFscyhyMTogUmVjdGFuZ2xlLCByMjogUmVjdGFuZ2xlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHIxLldpZHRoID09PSByMi5XaWR0aCAmJiByMS5IZWlnaHQgPT09IHIyLkhlaWdodDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgTGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sZWZ0O1xuICB9XG5cbiAgcHVibGljIGdldCBSaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLkxlZnQgKyB0aGlzLldpZHRoO1xuICB9XG5cbiAgcHVibGljIGdldCBUb3AoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdG9wO1xuICB9XG5cbiAgcHVibGljIGdldCBCb3R0b20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdG9wICsgdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgcHVibGljIGdldCBXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIHB1YmxpYyBjb250YWlucyhwb2ludDogVmVjdG9yMik6IGJvb2xlYW47XG4gIHB1YmxpYyBjb250YWlucyh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW47XG4gIHB1YmxpYyBjb250YWlucyh4T3JQb2ludDogbnVtYmVyfFZlY3RvcjIsIHk/OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBsZXQgeDtcbiAgICBpZiAoeE9yUG9pbnQgaW5zdGFuY2VvZiBWZWN0b3IyKSB7XG4gICAgICB4ID0geE9yUG9pbnQuWDtcbiAgICAgIHkgPSB4T3JQb2ludC5ZO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geE9yUG9pbnQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLkxlZnQgPD0geCAmJiB0aGlzLlJpZ2h0ID49IHggJiYgdGhpcy5Ub3AgPD0geSAmJiB0aGlzLkJvdHRvbSA+PSB5O1xuICB9XG5cbiAgcHVibGljIHRvTG9jYWwoeDogVmVjdG9yMik6IFZlY3RvcjI7XG4gIHB1YmxpYyB0b0xvY2FsKHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyW107XG4gIHB1YmxpYyB0b0xvY2FsKHhPclBvaW50OiBWZWN0b3IyIHwgbnVtYmVyLCB5PzogbnVtYmVyKTogYW55IHtcbiAgICBsZXQgeDtcbiAgICBpZiAoeE9yUG9pbnQgaW5zdGFuY2VvZiBWZWN0b3IyKSB7XG4gICAgICB4ID0geE9yUG9pbnQuWDtcbiAgICAgIHkgPSB4T3JQb2ludC5ZO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geE9yUG9pbnQ7XG4gICAgfVxuICAgIHggLT0gdGhpcy5MZWZ0O1xuICAgIHkgLT0gdGhpcy5Ub3A7XG5cbiAgICByZXR1cm4geE9yUG9pbnQgaW5zdGFuY2VvZiBWZWN0b3IyID8gbmV3IFZlY3RvcjIoeCwgeSkgOiBbeCwgeV07XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFJlY3RhbmdsZSgke3RoaXMuTGVmdH0sJHt0aGlzLlRvcH0tJHt0aGlzLlJpZ2h0fSwke3RoaXMuQm90dG9tfSlgO1xuICB9XG5cbn1cbmV4cG9ydCBkZWZhdWx0IFJlY3RhbmdsZTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

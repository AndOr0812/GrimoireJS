import BasicMaterial from "../../../Core/Materials/Base/BasicMaterial";
import Vector4 from "../../../Math/Vector4";
/**
 * the materials for PMX.
 */
class PMXHitAreaMaterial extends BasicMaterial {
    constructor(material) {
        super(require("../../Materials/HitAreaTest.html"));
        this.__associatedMaterial = material;
    }
    /**
     * Count of verticies
     */
    get VerticiesCount() {
        return this.__associatedMaterial.VerticiesCount;
    }
    /**
     * Offset of verticies in index buffer
     */
    get VerticiesOffset() {
        return this.__associatedMaterial.VerticiesOffset;
    }
    apply(matArg) {
        const r = 0xFF00 & matArg.renderStage.___objectIndex;
        const g = 0x00FF & matArg.renderStage.___objectIndex;
        const b = 0xFF & this.__associatedMaterial.materialIndex;
        const skeleton = this.__associatedMaterial.ParentModel.skeleton;
        this.materialVariables = {
            boneCount: skeleton.BoneCount,
            boneMatriciesTexture: skeleton.MatrixTexture,
            indexColor: new Vector4(r / 0xFF, g / 0xFF, b / 0xFF, 1)
        };
        super.apply(matArg);
    }
    getDrawGeometryLength(geo) {
        return this.__associatedMaterial.Diffuse.A > 0 ? this.VerticiesCount : 0;
    }
    getDrawGeometryOffset(geo) {
        return this.VerticiesOffset * 4;
    }
}
export default PMXHitAreaMaterial;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBNWC9Db3JlL01hdGVyaWFscy9QTVhIaXRBcmVhTWF0ZXJpYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sYUFBYSxNQUFNLDRDQUE0QztPQUkvRCxPQUFPLE1BQU0sdUJBQXVCO0FBQzNDOztHQUVHO0FBQ0gsaUNBQWlDLGFBQWE7SUFpQjVDLFlBQVksUUFBcUI7UUFDL0IsTUFBTSxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxRQUFRLENBQUM7SUFDdkMsQ0FBQztJQWpCRDs7T0FFRztJQUNILElBQVcsY0FBYztRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGVBQWU7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7SUFDbkQsQ0FBQztJQU9NLEtBQUssQ0FBQyxNQUE4QjtRQUN6QyxNQUFNLENBQUMsR0FBRyxNQUFNLEdBQUksTUFBTSxDQUFDLFdBQW1CLENBQUMsY0FBYyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxHQUFHLE1BQU0sR0FBSSxNQUFNLENBQUMsV0FBbUIsQ0FBQyxjQUFjLENBQUM7UUFDOUQsTUFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUM7UUFDekQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7UUFDaEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHO1lBQ3ZCLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztZQUM3QixvQkFBb0IsRUFBRSxRQUFRLENBQUMsYUFBYTtZQUM1QyxVQUFVLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3pELENBQUM7UUFDRixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxxQkFBcUIsQ0FBQyxHQUFhO1FBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVNLHFCQUFxQixDQUFDLEdBQWE7UUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7QUFDSCxDQUFDO0FBRUQsZUFBZSxrQkFBa0IsQ0FBQyIsImZpbGUiOiJQTVgvQ29yZS9NYXRlcmlhbHMvUE1YSGl0QXJlYU1hdGVyaWFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2ljTWF0ZXJpYWwgZnJvbSBcIi4uLy4uLy4uL0NvcmUvTWF0ZXJpYWxzL0Jhc2UvQmFzaWNNYXRlcmlhbFwiO1xuaW1wb3J0IElBcHBseU1hdGVyaWFsQXJndW1lbnQgZnJvbSBcIi4uLy4uLy4uL0NvcmUvTWF0ZXJpYWxzL0Jhc2UvSUFwcGx5TWF0ZXJpYWxBcmd1bWVudFwiO1xuaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuLi8uLi8uLi9Db3JlL0dlb21ldHJpZXMvQmFzZS9HZW9tZXRyeVwiO1xuaW1wb3J0IFBNWE1hdGVyaWFsIGZyb20gXCIuL1BNWE1hdGVyaWFsXCI7XG5pbXBvcnQgVmVjdG9yNCBmcm9tIFwiLi4vLi4vLi4vTWF0aC9WZWN0b3I0XCI7XG4vKipcbiAqIHRoZSBtYXRlcmlhbHMgZm9yIFBNWC5cbiAqL1xuY2xhc3MgUE1YSGl0QXJlYU1hdGVyaWFsIGV4dGVuZHMgQmFzaWNNYXRlcmlhbCB7XG4gIHByb3RlY3RlZCBfX2Fzc29jaWF0ZWRNYXRlcmlhbDogUE1YTWF0ZXJpYWw7XG5cbiAgLyoqXG4gICAqIENvdW50IG9mIHZlcnRpY2llc1xuICAgKi9cbiAgcHVibGljIGdldCBWZXJ0aWNpZXNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2Fzc29jaWF0ZWRNYXRlcmlhbC5WZXJ0aWNpZXNDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPZmZzZXQgb2YgdmVydGljaWVzIGluIGluZGV4IGJ1ZmZlclxuICAgKi9cbiAgcHVibGljIGdldCBWZXJ0aWNpZXNPZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19hc3NvY2lhdGVkTWF0ZXJpYWwuVmVydGljaWVzT2Zmc2V0O1xuICB9XG5cbiAgY29uc3RydWN0b3IobWF0ZXJpYWw6IFBNWE1hdGVyaWFsKSB7XG4gICAgc3VwZXIocmVxdWlyZShcIi4uLy4uL01hdGVyaWFscy9IaXRBcmVhVGVzdC5odG1sXCIpKTtcbiAgICB0aGlzLl9fYXNzb2NpYXRlZE1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gIH1cblxuICBwdWJsaWMgYXBwbHkobWF0QXJnOiBJQXBwbHlNYXRlcmlhbEFyZ3VtZW50KTogdm9pZCB7XG4gICAgY29uc3QgciA9IDB4RkYwMCAmIChtYXRBcmcucmVuZGVyU3RhZ2UgYXMgYW55KS5fX19vYmplY3RJbmRleDtcbiAgICBjb25zdCBnID0gMHgwMEZGICYgKG1hdEFyZy5yZW5kZXJTdGFnZSBhcyBhbnkpLl9fX29iamVjdEluZGV4O1xuICAgIGNvbnN0IGIgPSAweEZGICYgdGhpcy5fX2Fzc29jaWF0ZWRNYXRlcmlhbC5tYXRlcmlhbEluZGV4O1xuICAgIGNvbnN0IHNrZWxldG9uID0gdGhpcy5fX2Fzc29jaWF0ZWRNYXRlcmlhbC5QYXJlbnRNb2RlbC5za2VsZXRvbjtcbiAgICB0aGlzLm1hdGVyaWFsVmFyaWFibGVzID0ge1xuICAgICAgYm9uZUNvdW50OiBza2VsZXRvbi5Cb25lQ291bnQsXG4gICAgICBib25lTWF0cmljaWVzVGV4dHVyZTogc2tlbGV0b24uTWF0cml4VGV4dHVyZSxcbiAgICAgIGluZGV4Q29sb3I6IG5ldyBWZWN0b3I0KHIgLyAweEZGLCBnIC8gMHhGRiwgYiAvIDB4RkYsIDEpXG4gICAgfTtcbiAgICBzdXBlci5hcHBseShtYXRBcmcpO1xuICB9XG5cbiAgcHVibGljIGdldERyYXdHZW9tZXRyeUxlbmd0aChnZW86IEdlb21ldHJ5KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fX2Fzc29jaWF0ZWRNYXRlcmlhbC5EaWZmdXNlLkEgPiAwID8gdGhpcy5WZXJ0aWNpZXNDb3VudCA6IDA7XG4gIH1cblxuICBwdWJsaWMgZ2V0RHJhd0dlb21ldHJ5T2Zmc2V0KGdlbzogR2VvbWV0cnkpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLlZlcnRpY2llc09mZnNldCAqIDQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUE1YSGl0QXJlYU1hdGVyaWFsO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

import SceneObject from "../../Core/SceneObjects/SceneObject";
import PMXBoneTransformer from "./PMXBoneTransformer";
import Vector3 from "../../Math/Vector3";
class PMXBone extends SceneObject {
    constructor(model, skeleton, boneIndex) {
        super();
        this.__transformer = new PMXBoneTransformer(this, model, boneIndex);
        this._targetModel = model;
        this._targetSkeleton = skeleton;
        this.boneIndex = boneIndex;
        this.name = this.TargetBoneData.boneName;
    }
    get TargetBoneData() {
        return this._targetModel.ModelData.Bones[this.boneIndex];
    }
    get IsRootBone() {
        return this.TargetBoneData.parentBoneIndex === -1;
    }
    get OrderCriteria() {
        const latex = this._targetModel.ModelData.Bones.length;
        return this.boneIndex + this.TargetBoneData.transformLayer * latex + (this.AfterPhysics ? latex * latex : 0);
    }
    get AfterPhysics() {
        return (this.TargetBoneData.boneFlag & 0x1000) > 0;
    }
    /**
     * This method is intended to use by PMXSkeleton.
     * No need to call this method by user.
     */
    boneDictionaryConstructed() {
        if (this.IsRootBone) {
            this._targetModel.addChild(this);
        }
        else {
            this._targetSkeleton.getBoneByIndex(this.TargetBoneData.parentBoneIndex).addChild(this);
        }
        this.Transformer.LocalOrigin = new Vector3(this.TargetBoneData.position);
        const transformer = this.__transformer;
        if (transformer.IsIKBone) {
            for (let i = 0; i < this.TargetBoneData.ikLinkCount; i++) {
                this._targetSkeleton.getBoneByIndex(this.TargetBoneData.ikLinks[i].ikLinkBoneIndex).__transformer.isIKLink = true;
            }
        }
    }
    updateBoneTransform() {
        const t = this.__transformer;
        t.updateTransformForPMX();
    }
    structureToString(layer) {
        let result = "";
        for (let i = 0; i < layer; i++) {
            result += "  ";
        }
        result += this.toString() + "\n";
        let arr = this.Children;
        for (let index = 0; index < arr.length; index++) {
            if (typeof arr[index] !== "undefined") {
                result += arr[index].structureToString(layer + 1);
            }
        }
        return result;
    }
    toString() {
        return `${this.TargetBoneData.boneName}(${this.TargetBoneData.boneNameEn})`;
    }
    applyMatrixToBuffer(buffer) {
        // if (!(<PMXBoneTransformer>this.Transformer).transformUpdated) return;
        for (let i = 0; i < 16; i++) {
            buffer[16 * this.boneIndex + i] = this.Transformer.LocalToGlobal.rawElements[i];
        }
        // (<PMXBoneTransformer>this.Transformer).transformUpdated = false;
    }
}
export default PMXBone;

//# sourceMappingURL=data:application/json;base64,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Q0FBQyxDQUFDO1FBQ2xGLENBQUM7UUFDRCxtRUFBbUU7SUFDckUsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLE9BQU8sQ0FBQyIsImZpbGUiOiJQTVgvQ29yZS9QTVhCb25lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNjZW5lT2JqZWN0IGZyb20gXCIuLi8uLi9Db3JlL1NjZW5lT2JqZWN0cy9TY2VuZU9iamVjdFwiO1xuaW1wb3J0IFBNWFNrZWxldG9uIGZyb20gXCIuL1BNWFNrZWxldG9uXCI7XG5pbXBvcnQgUE1YTW9kZWwgZnJvbSBcIi4vUE1YTW9kZWxcIjtcbmltcG9ydCBQTVhCb25lVHJhbnNmb3JtZXIgZnJvbSBcIi4vUE1YQm9uZVRyYW5zZm9ybWVyXCI7XG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vLi4vTWF0aC9WZWN0b3IzXCI7XG5jbGFzcyBQTVhCb25lIGV4dGVuZHMgU2NlbmVPYmplY3Qge1xuICBwdWJsaWMgYm9uZUluZGV4OiBudW1iZXI7XG4gIHByaXZhdGUgX3RhcmdldE1vZGVsOiBQTVhNb2RlbDtcbiAgcHJpdmF0ZSBfdGFyZ2V0U2tlbGV0b246IFBNWFNrZWxldG9uO1xuXG4gIGNvbnN0cnVjdG9yKG1vZGVsOiBQTVhNb2RlbCwgc2tlbGV0b246IFBNWFNrZWxldG9uLCBib25lSW5kZXg6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX3RyYW5zZm9ybWVyID0gbmV3IFBNWEJvbmVUcmFuc2Zvcm1lcih0aGlzLCBtb2RlbCwgYm9uZUluZGV4KTtcbiAgICB0aGlzLl90YXJnZXRNb2RlbCA9IG1vZGVsO1xuICAgIHRoaXMuX3RhcmdldFNrZWxldG9uID0gc2tlbGV0b247XG4gICAgdGhpcy5ib25lSW5kZXggPSBib25lSW5kZXg7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5UYXJnZXRCb25lRGF0YS5ib25lTmFtZTtcbiAgfVxuXG5cbiAgcHVibGljIGdldCBUYXJnZXRCb25lRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0TW9kZWwuTW9kZWxEYXRhLkJvbmVzW3RoaXMuYm9uZUluZGV4XTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSXNSb290Qm9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5UYXJnZXRCb25lRGF0YS5wYXJlbnRCb25lSW5kZXggPT09IC0xO1xuICB9XG5cbiAgcHVibGljIGdldCBPcmRlckNyaXRlcmlhKCkge1xuICAgIGNvbnN0IGxhdGV4ID0gdGhpcy5fdGFyZ2V0TW9kZWwuTW9kZWxEYXRhLkJvbmVzLmxlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5ib25lSW5kZXggKyB0aGlzLlRhcmdldEJvbmVEYXRhLnRyYW5zZm9ybUxheWVyICogbGF0ZXggKyAodGhpcy5BZnRlclBoeXNpY3MgPyBsYXRleCAqIGxhdGV4IDogMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IEFmdGVyUGh5c2ljcygpIHtcbiAgICByZXR1cm4gKHRoaXMuVGFyZ2V0Qm9uZURhdGEuYm9uZUZsYWcgJiAweDEwMDApID4gMDtcbiAgfVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCB0byB1c2UgYnkgUE1YU2tlbGV0b24uXG5cdCAqIE5vIG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBieSB1c2VyLlxuXHQgKi9cbiAgcHVibGljIGJvbmVEaWN0aW9uYXJ5Q29uc3RydWN0ZWQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuSXNSb290Qm9uZSkge1xuICAgICAgdGhpcy5fdGFyZ2V0TW9kZWwuYWRkQ2hpbGQodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RhcmdldFNrZWxldG9uLmdldEJvbmVCeUluZGV4KHRoaXMuVGFyZ2V0Qm9uZURhdGEucGFyZW50Qm9uZUluZGV4KS5hZGRDaGlsZCh0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5UcmFuc2Zvcm1lci5Mb2NhbE9yaWdpbiA9IG5ldyBWZWN0b3IzKHRoaXMuVGFyZ2V0Qm9uZURhdGEucG9zaXRpb24pO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gPFBNWEJvbmVUcmFuc2Zvcm1lcj50aGlzLl9fdHJhbnNmb3JtZXI7XG4gICAgaWYgKHRyYW5zZm9ybWVyLklzSUtCb25lKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVGFyZ2V0Qm9uZURhdGEuaWtMaW5rQ291bnQ7IGkrKykge1xuICAgICAgICAoPFBNWEJvbmVUcmFuc2Zvcm1lcj50aGlzLl90YXJnZXRTa2VsZXRvbi5nZXRCb25lQnlJbmRleCh0aGlzLlRhcmdldEJvbmVEYXRhLmlrTGlua3NbaV0uaWtMaW5rQm9uZUluZGV4KS5fX3RyYW5zZm9ybWVyKS5pc0lLTGluayA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZUJvbmVUcmFuc2Zvcm0oKTogdm9pZCB7XG4gICAgY29uc3QgdCA9IDxQTVhCb25lVHJhbnNmb3JtZXI+dGhpcy5fX3RyYW5zZm9ybWVyO1xuICAgIHQudXBkYXRlVHJhbnNmb3JtRm9yUE1YKCk7XG4gIH1cblxuICBwdWJsaWMgc3RydWN0dXJlVG9TdHJpbmcobGF5ZXI6IG51bWJlcik6IHN0cmluZyB7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcjsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gXCIgIFwiO1xuICAgIH1cbiAgICByZXN1bHQgKz0gdGhpcy50b1N0cmluZygpICsgXCJcXG5cIjtcbiAgICBsZXQgYXJyID0gdGhpcy5DaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKHR5cGVvZiBhcnJbaW5kZXhdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlc3VsdCArPSAoPFBNWEJvbmU+YXJyW2luZGV4XSkuc3RydWN0dXJlVG9TdHJpbmcobGF5ZXIgKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLlRhcmdldEJvbmVEYXRhLmJvbmVOYW1lfSgke3RoaXMuVGFyZ2V0Qm9uZURhdGEuYm9uZU5hbWVFbn0pYDtcbiAgfVxuXG4gIHB1YmxpYyBhcHBseU1hdHJpeFRvQnVmZmVyKGJ1ZmZlcjogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgLy8gaWYgKCEoPFBNWEJvbmVUcmFuc2Zvcm1lcj50aGlzLlRyYW5zZm9ybWVyKS50cmFuc2Zvcm1VcGRhdGVkKSByZXR1cm47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBidWZmZXJbMTYgKiB0aGlzLmJvbmVJbmRleCArIGldID0gdGhpcy5UcmFuc2Zvcm1lci5Mb2NhbFRvR2xvYmFsLnJhd0VsZW1lbnRzW2ldO1xuICAgIH1cbiAgICAvLyAoPFBNWEJvbmVUcmFuc2Zvcm1lcj50aGlzLlRyYW5zZm9ybWVyKS50cmFuc2Zvcm1VcGRhdGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUE1YQm9uZTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

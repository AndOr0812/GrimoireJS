import PMXMorph from "./PMXMorph";
class PMXMorphManager {
    constructor(model) {
        this.postProcessFlag = [false, false, false, false, false, false, false, false, false];
        this._morphsDictionary = {};
        this._model = model;
        this._morphs = new Array(model.ModelData.Morphs.length);
        for (let i = 0; i < model.ModelData.Morphs.length; ++i) {
            this._morphs[i] = PMXMorph.createMorph(model, i, this);
            if (this._morphs[i] != null) {
                this._morphsDictionary[this._morphs[i].MorphName] = this._morphs[i];
            }
        }
    }
    applyMorph() {
        for (let i = 0; i < this._morphs.length; ++i) {
            if (this._morphs[i] != null) {
                this._morphs[i].update();
            }
        }
        for (let i = 0; i < this.postProcessFlag.length; i++) {
            if (this.postProcessFlag[i]) {
                PMXMorph.postProcess(this._model, i);
                this.postProcessFlag[i] = false;
            }
        }
    }
    getMorphByName(name) {
        return this._morphsDictionary[name];
    }
    getMorphByIndex(index) {
        return this._morphs[index];
    }
}
export default PMXMorphManager;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBNWC9Db3JlL1BNWE1vcnBoTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxRQUFRLE1BQU0sWUFBWTtBQUVqQztJQVNFLFlBQVksS0FBZTtRQVJwQixvQkFBZSxHQUFjLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQU01RixzQkFBaUIsR0FBc0MsRUFBRSxDQUFDO1FBR2hFLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEUsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sVUFBVTtRQUNmLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUM3QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDM0IsQ0FBQztRQUNILENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDckMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sY0FBYyxDQUFDLElBQVk7UUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sZUFBZSxDQUFDLEtBQWE7UUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLGVBQWUsQ0FBQyIsImZpbGUiOiJQTVgvQ29yZS9QTVhNb3JwaE1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUE1YTW9ycGggZnJvbSBcIi4vUE1YTW9ycGhcIjtcbmltcG9ydCBQTVhNb2RlbCBmcm9tIFwiLi9QTVhNb2RlbFwiO1xuY2xhc3MgUE1YTW9ycGhNYW5hZ2VyIHtcbiAgcHVibGljIHBvc3RQcm9jZXNzRmxhZzogYm9vbGVhbltdID0gW2ZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdO1xuXG4gIHByaXZhdGUgX21vcnBoczogUE1YTW9ycGhbXTtcblxuICBwcml2YXRlIF9tb2RlbDogUE1YTW9kZWw7XG5cbiAgcHJpdmF0ZSBfbW9ycGhzRGljdGlvbmFyeTogeyBbbW9ycGhOYW1lOiBzdHJpbmddOiBQTVhNb3JwaCB9ID0ge307XG5cbiAgY29uc3RydWN0b3IobW9kZWw6IFBNWE1vZGVsKSB7XG4gICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcbiAgICB0aGlzLl9tb3JwaHMgPSBuZXcgQXJyYXkobW9kZWwuTW9kZWxEYXRhLk1vcnBocy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWwuTW9kZWxEYXRhLk1vcnBocy5sZW5ndGg7ICsraSkge1xuICAgICAgdGhpcy5fbW9ycGhzW2ldID0gUE1YTW9ycGguY3JlYXRlTW9ycGgobW9kZWwsIGksIHRoaXMpO1xuICAgICAgaWYgKHRoaXMuX21vcnBoc1tpXSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX21vcnBoc0RpY3Rpb25hcnlbdGhpcy5fbW9ycGhzW2ldLk1vcnBoTmFtZV0gPSB0aGlzLl9tb3JwaHNbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFwcGx5TW9ycGgoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3JwaHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLl9tb3JwaHNbaV0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tb3JwaHNbaV0udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wb3N0UHJvY2Vzc0ZsYWcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLnBvc3RQcm9jZXNzRmxhZ1tpXSkge1xuICAgICAgICBQTVhNb3JwaC5wb3N0UHJvY2Vzcyh0aGlzLl9tb2RlbCwgaSk7XG4gICAgICAgIHRoaXMucG9zdFByb2Nlc3NGbGFnW2ldID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldE1vcnBoQnlOYW1lKG5hbWU6IHN0cmluZyk6IFBNWE1vcnBoIHtcbiAgICByZXR1cm4gdGhpcy5fbW9ycGhzRGljdGlvbmFyeVtuYW1lXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNb3JwaEJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFBNWE1vcnBoIHtcbiAgICByZXR1cm4gdGhpcy5fbW9ycGhzW2luZGV4XTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQTVhNb3JwaE1hbmFnZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

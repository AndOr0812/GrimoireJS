import JThreeContext from "../../JThreeContext";
import ContextComponents from "../../ContextComponents";
import BasicGeometry from "../../Core/Geometries/Base/BasicGeometry";
class XGeometry extends BasicGeometry {
    constructor(x) {
        super();
        const rm = JThreeContext.getContextComponent(ContextComponents.ResourceManager);
        this.indexBuffer = rm.createBuffer(name + "-index", WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 1, WebGLRenderingContext.UNSIGNED_INT);
        this.positionBuffer = rm.createBuffer(name + "-pos", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.normalBuffer = rm.createBuffer(name + "-nor", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.uvBuffer = rm.createBuffer(name + "-uv", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 2, WebGLRenderingContext.FLOAT);
        this.__updateBuffers(x);
    }
    /**
     * apply pmx geometries to buffer.
     */
    __updateBuffers(x) {
        this.indexBuffer.update(x.indicies, x.indicies.length);
        this.normalBuffer.update(x.normals, x.normals.length);
        this.uvBuffer.update(x.texCoords, x.texCoords.length);
        this.positionBuffer.update(x.positions, x.texCoords.length);
    }
}
export default XGeometry;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlgvQ29yZS9YR2VvbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BRU8sYUFBYSxNQUFNLHFCQUFxQjtPQUN4QyxpQkFBaUIsTUFBTSx5QkFBeUI7T0FDaEQsYUFBYSxNQUFNLDBDQUEwQztBQUNwRSx3QkFBd0IsYUFBYTtJQUNuQyxZQUFZLENBQVk7UUFDdEIsT0FBTyxDQUFDO1FBQ1IsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFrQixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFLLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVKLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFKLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsS0FBSyxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JKLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ08sZUFBZSxDQUFDLENBQVk7UUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlELENBQUM7QUFDSCxDQUFDO0FBRUQsZUFBZSxTQUFTLENBQUMiLCJmaWxlIjoiWC9Db3JlL1hHZW9tZXRyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYRmlsZURhdGEgZnJvbSBcIi4uL1hGaWxlRGF0YVwiO1xuaW1wb3J0IFJlc291cmNlTWFuYWdlciBmcm9tIFwiLi4vLi4vQ29yZS9SZXNvdXJjZU1hbmFnZXJcIjtcbmltcG9ydCBKVGhyZWVDb250ZXh0IGZyb20gXCIuLi8uLi9KVGhyZWVDb250ZXh0XCI7XG5pbXBvcnQgQ29udGV4dENvbXBvbmVudHMgZnJvbSBcIi4uLy4uL0NvbnRleHRDb21wb25lbnRzXCI7XG5pbXBvcnQgQmFzaWNHZW9tZXRyeSBmcm9tIFwiLi4vLi4vQ29yZS9HZW9tZXRyaWVzL0Jhc2UvQmFzaWNHZW9tZXRyeVwiO1xuY2xhc3MgWEdlb21ldHJ5IGV4dGVuZHMgQmFzaWNHZW9tZXRyeSB7XG4gIGNvbnN0cnVjdG9yKHg6IFhGaWxlRGF0YSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3Qgcm0gPSBKVGhyZWVDb250ZXh0LmdldENvbnRleHRDb21wb25lbnQ8UmVzb3VyY2VNYW5hZ2VyPihDb250ZXh0Q29tcG9uZW50cy5SZXNvdXJjZU1hbmFnZXIpO1xuICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLWluZGV4XCIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNUQVRJQ19EUkFXLCAxLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuVU5TSUdORURfSU5UKTtcbiAgICB0aGlzLnBvc2l0aW9uQnVmZmVyID0gcm0uY3JlYXRlQnVmZmVyKG5hbWUgKyBcIi1wb3NcIiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkFSUkFZX0JVRkZFUiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNUQVRJQ19EUkFXLCAzLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRkxPQVQpO1xuICAgIHRoaXMubm9ybWFsQnVmZmVyID0gcm0uY3JlYXRlQnVmZmVyKG5hbWUgKyBcIi1ub3JcIiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkFSUkFZX0JVRkZFUiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNUQVRJQ19EUkFXLCAzLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRkxPQVQpO1xuICAgIHRoaXMudXZCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLXV2XCIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5BUlJBWV9CVUZGRVIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TVEFUSUNfRFJBVywgMiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkZMT0FUKTtcbiAgICB0aGlzLl9fdXBkYXRlQnVmZmVycyh4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhcHBseSBwbXggZ2VvbWV0cmllcyB0byBidWZmZXIuXG4gICAqL1xuICBwcm90ZWN0ZWQgX191cGRhdGVCdWZmZXJzKHg6IFhGaWxlRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuaW5kZXhCdWZmZXIudXBkYXRlKHguaW5kaWNpZXMsIHguaW5kaWNpZXMubGVuZ3RoKTtcbiAgICB0aGlzLm5vcm1hbEJ1ZmZlci51cGRhdGUoeC5ub3JtYWxzLCB4Lm5vcm1hbHMubGVuZ3RoKTtcbiAgICB0aGlzLnV2QnVmZmVyLnVwZGF0ZSh4LnRleENvb3JkcywgeC50ZXhDb29yZHMubGVuZ3RoKTtcbiAgICB0aGlzLnBvc2l0aW9uQnVmZmVyLnVwZGF0ZSh4LnBvc2l0aW9ucywgeC50ZXhDb29yZHMubGVuZ3RoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBYR2VvbWV0cnk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

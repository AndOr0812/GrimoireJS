<?xml version="1.0" encoding="UTF-8"?>
<material name="sobel.edge" group="builtin.forward" order="300">
  <uniform-register>
    <register name="builtin.basic"/>
    <register name="builtin.buffer"/>
  </uniform-register>
  <passes>
    <pass>
      <glsl>
        <![CDATA[
        attribute vec3 position;
        attribute vec3 normal;
        attribute vec2 uv;

        @vert {
        @import "jthree.builtin.vertex"
          uniform mat4 _matPVM;
          uniform mat4 _matVM;
        }

        varying vec3 vNormal;
        varying vec2 vUv;
        varying vec4 vPosition;

        vec2 calcLightUV(vec4 projectionSpacePos)
        {
           return (projectionSpacePos.xy/projectionSpacePos.w+vec2(1,1))/2.;
        }

        @vert{
          void main(void)
          {
            BasicVertexTransformOutput o =  basicVertexTransform(position,normal,uv,_matPVM,_matVM);
            gl_Position = vPosition = o.position;
            //gl_Position.xyz *= vec3(position.x,position.x * position.z,position.z);
            vNormal = o.normal;
            vUv = o.uv;
          }
        }

        @frag{
          @{register:1,type:"buffer",name:"DLIGHT"}
          uniform sampler2D _dlBuffer;
          @{register:2,type:"buffer",name:"SLIGHT"}
          uniform sampler2D _slBuffer;
          uniform vec4 diffuse;
          uniform vec3 specular;
          uniform vec4 ambient;
          uniform vec3 ambientCoefficient;
          uniform float brightness;
          @{register:3,flag:"_textureUsed"}
          uniform sampler2D texture;
          uniform int _textureUsed;
          void main(void)
          {
            gl_FragColor=vec4(0,0,0,1);
            gl_FragColor.rgb+=ambient.rgb;
            ////calculate light uv
            vec2 lightUV=calcLightUV(vPosition);
            vec3 d = _textureUsed == 1 ? texture2D(texture,vUv).rgb : diffuse.rgb;
            gl_FragColor.rgb+= d * texture2D(_dlBuffer,lightUV).rgb+specular.rgb *texture2D(_slBuffer,lightUV).rgb;
            gl_FragColor.rgb += ambient.rgb;
          }
        }
        ]]>
      </glsl>
    </pass>
    <pass>
      <depth enabled="true" mode="LEQUAL"/>
      <glsl>
        <![CDATA[
      attribute vec3 position;
      attribute vec3 normal;

      @vert {
        uniform mat4 _matPVM;

        void main(void)
        {
          gl_Position =  _matPVM * vec4(position,1.0);
        }
      }

      @frag {
        @import "builtin.gbuffer-reader"

        uniform vec4 edgeColor;

        uniform vec2 _resolution;

        @{type:"buffer",register:0,name:"GBUFFER"}
        uniform sampler2D _normal;

        @{default:[1,0,-1,2,0,-2,1,0,-1]}
        uniform float xKernel[9];

        @{default:[1,2,1,0,0,0,-1,-2,-1]}
        uniform float yKernel[9];

        vec3 fetchNormal(vec2 scPos){
          return getNormal(texture2D(_normal,scPos/_resolution));
        }

        void main(void)
        {

        vec3 xDiff = vec3(0);
        vec3 yDiff = vec3(0);
        vec2 coords[9];
        coords[0] = vec2(-1,1);
        coords[1] = vec2(0,1);
        coords[2] = vec2(1,1);
        coords[3] = vec2(-1,0);
        coords[4] = vec2(0,0);
        coords[5] = vec2(1,0);
        coords[6] = vec2(-1,-1);
        coords[7] = vec2(0,-1);
        coords[8] = vec2(1,-1);
        for(int i = 0; i < 9; i++){
          xDiff += xKernel[i] * fetchNormal(gl_FragCoord.xy + coords[i]);
          yDiff += yKernel[i] * fetchNormal(gl_FragCoord.xy + coords[i]);
        }
        vec2 diff = vec2(length(xDiff),length(yDiff));
        if(length(diff) > 0.01){
        gl_FragColor = edgeColor;
        return;
        }
        }
      }
      ]]>
      </glsl>
    </pass>
  </passes>
</material>

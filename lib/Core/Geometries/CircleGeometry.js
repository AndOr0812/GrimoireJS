import GeometryBuilder from "./Base/GeometryBuilder";
import BasicGeometry from "./Base/BasicGeometry";
import Vector3 from "../../Math/Vector3";
import ContextComponents from "../../ContextComponents";
import JThreeContext from "../../JThreeContext";
class CircleGeometry extends BasicGeometry {
    constructor(name) {
        super();
        this._divideCount = 30;
        const rm = JThreeContext.getContextComponent(ContextComponents.ResourceManager);
        this.indexBuffer = rm.createBuffer(name + "index", WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 1, WebGLRenderingContext.UNSIGNED_BYTE);
        this.positionBuffer = rm.createBuffer(name + "-pos", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.normalBuffer = rm.createBuffer(name + "-nor", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.uvBuffer = rm.createBuffer(name + "-uv", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 2, WebGLRenderingContext.FLOAT);
        this.__updateBuffers();
    }
    get DiviceCount() {
        return this._divideCount;
    }
    set DiviceCount(count) {
        this._divideCount = count;
        this.__updateBuffers();
    }
    __updateBuffers() {
        const pos = [];
        const normal = [];
        const uv = [];
        const index = [];
        GeometryBuilder.addCircle(pos, normal, uv, index, this._divideCount, Vector3.Zero, Vector3.YUnit, new Vector3(0, 0, -1));
        this.indexBuffer.update(new Uint8Array(index), index.length);
        this.normalBuffer.update(new Float32Array(normal), normal.length);
        this.uvBuffer.update(new Float32Array(uv), uv.length);
        this.positionBuffer.update(new Float32Array(pos), pos.length);
    }
}
export default CircleGeometry;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvR2VvbWV0cmllcy9DaXJjbGVHZW9tZXRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxlQUFlLE1BQU0sd0JBQXdCO09BQzdDLGFBQWEsTUFBTSxzQkFBc0I7T0FDekMsT0FBTyxNQUFNLG9CQUFvQjtPQUNqQyxpQkFBaUIsTUFBTSx5QkFBeUI7T0FDaEQsYUFBYSxNQUFNLHFCQUFxQjtBQUUvQyw2QkFBNkIsYUFBYTtJQVl0QyxZQUFZLElBQVk7UUFDcEIsT0FBTyxDQUFDO1FBWkosaUJBQVksR0FBVyxFQUFFLENBQUM7UUFhOUIsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFrQixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLE9BQU8sRUFBRSxxQkFBcUIsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFLLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVKLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFKLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsS0FBSyxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JKLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBakJELElBQVcsV0FBVztRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBVyxXQUFXLENBQUMsS0FBYTtRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQWFTLGVBQWU7UUFDckIsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUM1QixNQUFNLEVBQUUsR0FBYSxFQUFFLENBQUM7UUFDeEIsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQzNCLGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pILElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0FBQ0wsQ0FBQztBQUVELGVBQWUsY0FBYyxDQUFDIiwiZmlsZSI6IkNvcmUvR2VvbWV0cmllcy9DaXJjbGVHZW9tZXRyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHZW9tZXRyeUJ1aWxkZXIgZnJvbSBcIi4vQmFzZS9HZW9tZXRyeUJ1aWxkZXJcIjtcbmltcG9ydCBCYXNpY0dlb21ldHJ5IGZyb20gXCIuL0Jhc2UvQmFzaWNHZW9tZXRyeVwiO1xuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uLy4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IENvbnRleHRDb21wb25lbnRzIGZyb20gXCIuLi8uLi9Db250ZXh0Q29tcG9uZW50c1wiO1xuaW1wb3J0IEpUaHJlZUNvbnRleHQgZnJvbSBcIi4uLy4uL0pUaHJlZUNvbnRleHRcIjtcbmltcG9ydCBSZXNvdXJjZU1hbmFnZXIgZnJvbSBcIi4uL1Jlc291cmNlTWFuYWdlclwiO1xuY2xhc3MgQ2lyY2xlR2VvbWV0cnkgZXh0ZW5kcyBCYXNpY0dlb21ldHJ5IHtcbiAgICBwcml2YXRlIF9kaXZpZGVDb3VudDogbnVtYmVyID0gMzA7XG5cbiAgICBwdWJsaWMgZ2V0IERpdmljZUNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXZpZGVDb3VudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IERpdmljZUNvdW50KGNvdW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fZGl2aWRlQ291bnQgPSBjb3VudDtcbiAgICAgICAgdGhpcy5fX3VwZGF0ZUJ1ZmZlcnMoKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc3Qgcm0gPSBKVGhyZWVDb250ZXh0LmdldENvbnRleHRDb21wb25lbnQ8UmVzb3VyY2VNYW5hZ2VyPihDb250ZXh0Q29tcG9uZW50cy5SZXNvdXJjZU1hbmFnZXIpO1xuICAgICAgICB0aGlzLmluZGV4QnVmZmVyID0gcm0uY3JlYXRlQnVmZmVyKG5hbWUgKyBcImluZGV4XCIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNUQVRJQ19EUkFXLCAxLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuVU5TSUdORURfQllURSk7XG4gICAgICAgIHRoaXMucG9zaXRpb25CdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLXBvc1wiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDMsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgICAgIHRoaXMubm9ybWFsQnVmZmVyID0gcm0uY3JlYXRlQnVmZmVyKG5hbWUgKyBcIi1ub3JcIiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkFSUkFZX0JVRkZFUiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNUQVRJQ19EUkFXLCAzLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRkxPQVQpO1xuICAgICAgICB0aGlzLnV2QnVmZmVyID0gcm0uY3JlYXRlQnVmZmVyKG5hbWUgKyBcIi11dlwiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgICAgIHRoaXMuX191cGRhdGVCdWZmZXJzKCk7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgX191cGRhdGVCdWZmZXJzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBwb3M6IG51bWJlcltdID0gW107XG4gICAgICAgIGNvbnN0IG5vcm1hbDogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3QgdXY6IG51bWJlcltdID0gW107XG4gICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBHZW9tZXRyeUJ1aWxkZXIuYWRkQ2lyY2xlKHBvcywgbm9ybWFsLCB1diwgaW5kZXgsIHRoaXMuX2RpdmlkZUNvdW50LCBWZWN0b3IzLlplcm8sIFZlY3RvcjMuWVVuaXQsIG5ldyBWZWN0b3IzKDAsIDAsIC0xKSk7XG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIudXBkYXRlKG5ldyBVaW50OEFycmF5KGluZGV4KSwgaW5kZXgubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5ub3JtYWxCdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkobm9ybWFsKSwgbm9ybWFsLmxlbmd0aCk7XG4gICAgICAgIHRoaXMudXZCdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkodXYpLCB1di5sZW5ndGgpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uQnVmZmVyLnVwZGF0ZShuZXcgRmxvYXQzMkFycmF5KHBvcyksIHBvcy5sZW5ndGgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlR2VvbWV0cnk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

import GeometryBuilder from "./Base/GeometryBuilder";
import BasicGeometry from "./Base/BasicGeometry";
import Vector3 from "../../Math/Vector3";
import JThreeContext from "../../JThreeContext";
import ContextComponents from "../../ContextComponents";
class CylinderGeometry extends BasicGeometry {
    constructor(name) {
        super();
        this._divideCount = 10;
        const rm = JThreeContext.getContextComponent(ContextComponents.ResourceManager);
        this.indexBuffer = rm.createBuffer(name + "index", WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 1, WebGLRenderingContext.UNSIGNED_SHORT);
        this.positionBuffer = rm.createBuffer(name + "-pos", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.normalBuffer = rm.createBuffer(name + "-nor", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.uvBuffer = rm.createBuffer(name + "-uv", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 2, WebGLRenderingContext.FLOAT);
        this.__updateBuffers();
    }
    get DivideCount() {
        return this._divideCount;
    }
    set DivideCount(count) {
        this._divideCount = count;
        this.__updateBuffers();
    }
    __updateBuffers() {
        const pos = [];
        const normal = [];
        const uv = [];
        const index = [];
        GeometryBuilder.addCylinder(pos, normal, uv, index, this.DivideCount, new Vector3(0, 1, 0), new Vector3(0, -1, 0), new Vector3(0, 0, -1), 1);
        this.indexBuffer.update(new Uint16Array(index), index.length);
        this.normalBuffer.update(new Float32Array(normal), normal.length);
        this.uvBuffer.update(new Float32Array(uv), uv.length);
        this.positionBuffer.update(new Float32Array(pos), pos.length);
    }
}
export default CylinderGeometry;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvR2VvbWV0cmllcy9DeWxpbmRlckdlb21ldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLGVBQWUsTUFBTSx3QkFBd0I7T0FDN0MsYUFBYSxNQUFNLHNCQUFzQjtPQUN6QyxPQUFPLE1BQU0sb0JBQW9CO09BQ2pDLGFBQWEsTUFBTSxxQkFBcUI7T0FDeEMsaUJBQWlCLE1BQU0seUJBQXlCO0FBRXZELCtCQUErQixhQUFhO0lBYXhDLFlBQVksSUFBWTtRQUNwQixPQUFPLENBQUM7UUFaSixpQkFBWSxHQUFXLEVBQUUsQ0FBQztRQWE5QixNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsbUJBQW1CLENBQWtCLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFLHFCQUFxQixDQUFDLG9CQUFvQixFQUFFLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDM0ssSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUscUJBQXFCLENBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUosSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUscUJBQXFCLENBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUosSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxLQUFLLEVBQUUscUJBQXFCLENBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckosSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFqQkQsSUFBVyxXQUFXO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFXLFdBQVcsQ0FBQyxLQUFhO1FBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBYVMsZUFBZTtRQUNyQixNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUM7UUFDekIsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO1FBQzVCLE1BQU0sRUFBRSxHQUFhLEVBQUUsQ0FBQztRQUN4QixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7UUFDM0IsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0ksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7QUFDTCxDQUFDO0FBRUQsZUFBZSxnQkFBZ0IsQ0FBQyIsImZpbGUiOiJDb3JlL0dlb21ldHJpZXMvQ3lsaW5kZXJHZW9tZXRyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHZW9tZXRyeUJ1aWxkZXIgZnJvbSBcIi4vQmFzZS9HZW9tZXRyeUJ1aWxkZXJcIjtcbmltcG9ydCBCYXNpY0dlb21ldHJ5IGZyb20gXCIuL0Jhc2UvQmFzaWNHZW9tZXRyeVwiO1xuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uLy4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IEpUaHJlZUNvbnRleHQgZnJvbSBcIi4uLy4uL0pUaHJlZUNvbnRleHRcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbmltcG9ydCBSZXNvdXJjZU1hbmFnZXIgZnJvbSBcIi4uL1Jlc291cmNlTWFuYWdlclwiO1xuY2xhc3MgQ3lsaW5kZXJHZW9tZXRyeSBleHRlbmRzIEJhc2ljR2VvbWV0cnkge1xuXG4gICAgcHJpdmF0ZSBfZGl2aWRlQ291bnQ6IG51bWJlciA9IDEwO1xuXG4gICAgcHVibGljIGdldCBEaXZpZGVDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpdmlkZUNvdW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgRGl2aWRlQ291bnQoY291bnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9kaXZpZGVDb3VudCA9IGNvdW50O1xuICAgICAgICB0aGlzLl9fdXBkYXRlQnVmZmVycygpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCBybSA9IEpUaHJlZUNvbnRleHQuZ2V0Q29udGV4dENvbXBvbmVudDxSZXNvdXJjZU1hbmFnZXI+KENvbnRleHRDb21wb25lbnRzLlJlc291cmNlTWFuYWdlcik7XG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiaW5kZXhcIiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDEsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5VTlNJR05FRF9TSE9SVCk7XG4gICAgICAgIHRoaXMucG9zaXRpb25CdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLXBvc1wiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDMsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgICAgIHRoaXMubm9ybWFsQnVmZmVyID0gcm0uY3JlYXRlQnVmZmVyKG5hbWUgKyBcIi1ub3JcIiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkFSUkFZX0JVRkZFUiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNUQVRJQ19EUkFXLCAzLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRkxPQVQpO1xuICAgICAgICB0aGlzLnV2QnVmZmVyID0gcm0uY3JlYXRlQnVmZmVyKG5hbWUgKyBcIi11dlwiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgICAgIHRoaXMuX191cGRhdGVCdWZmZXJzKCk7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgX191cGRhdGVCdWZmZXJzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBwb3M6IG51bWJlcltdID0gW107XG4gICAgICAgIGNvbnN0IG5vcm1hbDogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3QgdXY6IG51bWJlcltdID0gW107XG4gICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBHZW9tZXRyeUJ1aWxkZXIuYWRkQ3lsaW5kZXIocG9zLCBub3JtYWwsIHV2LCBpbmRleCwgdGhpcy5EaXZpZGVDb3VudCwgbmV3IFZlY3RvcjMoMCwgMSwgMCksIG5ldyBWZWN0b3IzKDAsIC0xLCAwKSwgbmV3IFZlY3RvcjMoMCwgMCwgLTEpLCAxKTtcbiAgICAgICAgdGhpcy5pbmRleEJ1ZmZlci51cGRhdGUobmV3IFVpbnQxNkFycmF5KGluZGV4KSwgaW5kZXgubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5ub3JtYWxCdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkobm9ybWFsKSwgbm9ybWFsLmxlbmd0aCk7XG4gICAgICAgIHRoaXMudXZCdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkodXYpLCB1di5sZW5ndGgpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uQnVmZmVyLnVwZGF0ZShuZXcgRmxvYXQzMkFycmF5KHBvcyksIHBvcy5sZW5ndGgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3lsaW5kZXJHZW9tZXRyeTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

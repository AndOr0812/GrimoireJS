import GeometryBuilder from "./Base/GeometryBuilder";
import BasicGeometry from "./Base/BasicGeometry";
import ContextComponents from "../../ContextComponents";
import JThreeContext from "../../JThreeContext";
class QuadGeometry extends BasicGeometry {
    constructor(name) {
        super();
        this._divX = 2;
        this._divY = 2;
        const rm = JThreeContext.getContextComponent(ContextComponents.ResourceManager);
        this.indexBuffer = rm.createBuffer(name + "index", WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 1, WebGLRenderingContext.UNSIGNED_BYTE);
        this.positionBuffer = rm.createBuffer(name + "-pos", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.normalBuffer = rm.createBuffer(name + "-nor", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.uvBuffer = rm.createBuffer(name + "-uv", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 2, WebGLRenderingContext.FLOAT);
        this.__updateBuffers();
    }
    set DivX(num) {
        this._divX = num;
        this.__updateBuffers();
    }
    set DivY(num) {
        this._divX = num;
        this.__updateBuffers();
    }
    __updateBuffers() {
        const pos = [];
        const nor = [];
        const uv = [];
        const index = [];
        GeometryBuilder.addDividedQuad(pos, nor, uv, index, this._divX, this._divY);
        this.positionBuffer.update(new Float32Array(pos), pos.length);
        this.normalBuffer.update(new Float32Array(nor), nor.length);
        this.uvBuffer.update(new Float32Array(uv), uv.length);
        this.indexBuffer.update(new Uint8Array(index), index.length);
    }
}
export default QuadGeometry;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvR2VvbWV0cmllcy9RdWFkR2VvbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sZUFBZSxNQUFNLHdCQUF3QjtPQUM3QyxhQUFhLE1BQU0sc0JBQXNCO09BQ3pDLGlCQUFpQixNQUFNLHlCQUF5QjtPQUVoRCxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLDJCQUEyQixhQUFhO0lBQ3RDLFlBQVksSUFBWTtRQUN0QixPQUFPLENBQUM7UUFTRixVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBQ2xCLFVBQUssR0FBVyxDQUFDLENBQUM7UUFUeEIsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFrQixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLE9BQU8sRUFBRSxxQkFBcUIsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFLLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVKLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFKLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsS0FBSyxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JKLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBS0QsSUFBVyxJQUFJLENBQUMsR0FBVztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUNELElBQVcsSUFBSSxDQUFDLEdBQVc7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDakIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFUyxlQUFlO1FBQ3ZCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztRQUN6QixNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUM7UUFDekIsTUFBTSxFQUFFLEdBQWEsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQztRQUMzQixlQUFlLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0QsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLFlBQVksQ0FBQyIsImZpbGUiOiJDb3JlL0dlb21ldHJpZXMvUXVhZEdlb21ldHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdlb21ldHJ5QnVpbGRlciBmcm9tIFwiLi9CYXNlL0dlb21ldHJ5QnVpbGRlclwiO1xuaW1wb3J0IEJhc2ljR2VvbWV0cnkgZnJvbSBcIi4vQmFzZS9CYXNpY0dlb21ldHJ5XCI7XG5pbXBvcnQgQ29udGV4dENvbXBvbmVudHMgZnJvbSBcIi4uLy4uL0NvbnRleHRDb21wb25lbnRzXCI7XG5pbXBvcnQgUmVzb3VyY2VNYW5hZ2VyIGZyb20gXCIuLi9SZXNvdXJjZU1hbmFnZXJcIjtcbmltcG9ydCBKVGhyZWVDb250ZXh0IGZyb20gXCIuLi8uLi9KVGhyZWVDb250ZXh0XCI7XG5jbGFzcyBRdWFkR2VvbWV0cnkgZXh0ZW5kcyBCYXNpY0dlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCBybSA9IEpUaHJlZUNvbnRleHQuZ2V0Q29udGV4dENvbXBvbmVudDxSZXNvdXJjZU1hbmFnZXI+KENvbnRleHRDb21wb25lbnRzLlJlc291cmNlTWFuYWdlcik7XG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IHJtLmNyZWF0ZUJ1ZmZlcihuYW1lICsgXCJpbmRleFwiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TVEFUSUNfRFJBVywgMSwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlVOU0lHTkVEX0JZVEUpO1xuICAgIHRoaXMucG9zaXRpb25CdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLXBvc1wiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDMsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgdGhpcy5ub3JtYWxCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLW5vclwiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDMsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgdGhpcy51dkJ1ZmZlciA9IHJtLmNyZWF0ZUJ1ZmZlcihuYW1lICsgXCItdXZcIiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkFSUkFZX0JVRkZFUiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNUQVRJQ19EUkFXLCAyLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRkxPQVQpO1xuICAgIHRoaXMuX191cGRhdGVCdWZmZXJzKCk7XG4gIH1cblxuICBwcml2YXRlIF9kaXZYOiBudW1iZXIgPSAyO1xuICBwcml2YXRlIF9kaXZZOiBudW1iZXIgPSAyO1xuXG4gIHB1YmxpYyBzZXQgRGl2WChudW06IG51bWJlcikge1xuICAgIHRoaXMuX2RpdlggPSBudW07XG4gICAgdGhpcy5fX3VwZGF0ZUJ1ZmZlcnMoKTtcbiAgfVxuICBwdWJsaWMgc2V0IERpdlkobnVtOiBudW1iZXIpIHtcbiAgICB0aGlzLl9kaXZYID0gbnVtO1xuICAgIHRoaXMuX191cGRhdGVCdWZmZXJzKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX191cGRhdGVCdWZmZXJzKCk6IHZvaWQge1xuICAgIGNvbnN0IHBvczogbnVtYmVyW10gPSBbXTtcbiAgICBjb25zdCBub3I6IG51bWJlcltdID0gW107XG4gICAgY29uc3QgdXY6IG51bWJlcltdID0gW107XG4gICAgY29uc3QgaW5kZXg6IG51bWJlcltdID0gW107XG4gICAgR2VvbWV0cnlCdWlsZGVyLmFkZERpdmlkZWRRdWFkKHBvcywgbm9yLCB1diwgaW5kZXgsIHRoaXMuX2RpdlgsIHRoaXMuX2RpdlkpO1xuICAgIHRoaXMucG9zaXRpb25CdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkocG9zKSwgcG9zLmxlbmd0aCk7XG4gICAgdGhpcy5ub3JtYWxCdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkobm9yKSwgbm9yLmxlbmd0aCk7XG4gICAgdGhpcy51dkJ1ZmZlci51cGRhdGUobmV3IEZsb2F0MzJBcnJheSh1diksIHV2Lmxlbmd0aCk7XG4gICAgdGhpcy5pbmRleEJ1ZmZlci51cGRhdGUobmV3IFVpbnQ4QXJyYXkoaW5kZXgpLCBpbmRleC5sZW5ndGgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFF1YWRHZW9tZXRyeTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

import GeometryBuilder from "./Base/GeometryBuilder";
import BasicGeometry from "./Base/BasicGeometry";
import Vector3 from "../../Math/Vector3";
import JThreeContext from "../../JThreeContext";
import ContextComponents from "../../ContextComponents";
class SphereGeometry extends BasicGeometry {
    constructor(name) {
        super();
        this._divideCount = 10;
        const rm = JThreeContext.getContextComponent(ContextComponents.ResourceManager);
        this.indexBuffer = rm.createBuffer(name + "index", WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 1, WebGLRenderingContext.UNSIGNED_SHORT);
        this.positionBuffer = rm.createBuffer(name + "-pos", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.normalBuffer = rm.createBuffer(name + "-nor", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 3, WebGLRenderingContext.FLOAT);
        this.uvBuffer = rm.createBuffer(name + "-uv", WebGLRenderingContext.ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW, 2, WebGLRenderingContext.FLOAT);
        this.__updateBuffers();
    }
    get DivideCount() {
        return this._divideCount;
    }
    set DivideCount(count) {
        this._divideCount = count;
        this.__updateBuffers();
    }
    __updateBuffers() {
        const pos = [];
        const normal = [];
        const uv = [];
        const index = [];
        GeometryBuilder.addSphere(pos, normal, uv, index, 8, 24, new Vector3(0, 0, 0));
        // GeometryBuilder.addCylinder(pos,normal,uv,index,this.DivideCount,new Vector3(0,1,0),new Vector3(0,-1,0),new Vector3(0,0,-1),1);
        this.indexBuffer.update(new Uint16Array(index), index.length);
        this.normalBuffer.update(new Float32Array(normal), normal.length);
        this.uvBuffer.update(new Float32Array(uv), uv.length);
        this.positionBuffer.update(new Float32Array(pos), pos.length);
    }
}
export default SphereGeometry;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvR2VvbWV0cmllcy9TcGhlcmVHZW9tZXRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxlQUFlLE1BQU0sd0JBQXdCO09BQzdDLGFBQWEsTUFBTSxzQkFBc0I7T0FDekMsT0FBTyxNQUFNLG9CQUFvQjtPQUNqQyxhQUFhLE1BQU0scUJBQXFCO09BQ3hDLGlCQUFpQixNQUFNLHlCQUF5QjtBQUV2RCw2QkFBNkIsYUFBYTtJQWF0QyxZQUFZLElBQVk7UUFDcEIsT0FBTyxDQUFDO1FBWkosaUJBQVksR0FBVyxFQUFFLENBQUM7UUFhOUIsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFrQixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLE9BQU8sRUFBRSxxQkFBcUIsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNLLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVKLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFKLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsS0FBSyxFQUFFLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JKLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBakJELElBQVcsV0FBVztRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBVyxXQUFXLENBQUMsS0FBYTtRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQWFTLGVBQWU7UUFDckIsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUM1QixNQUFNLEVBQUUsR0FBYSxFQUFFLENBQUM7UUFDeEIsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQzNCLGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLGtJQUFrSTtRQUNsSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztBQUNMLENBQUM7QUFFRCxlQUFlLGNBQWMsQ0FBQyIsImZpbGUiOiJDb3JlL0dlb21ldHJpZXMvU3BoZXJlR2VvbWV0cnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2VvbWV0cnlCdWlsZGVyIGZyb20gXCIuL0Jhc2UvR2VvbWV0cnlCdWlsZGVyXCI7XG5pbXBvcnQgQmFzaWNHZW9tZXRyeSBmcm9tIFwiLi9CYXNlL0Jhc2ljR2VvbWV0cnlcIjtcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi8uLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCBKVGhyZWVDb250ZXh0IGZyb20gXCIuLi8uLi9KVGhyZWVDb250ZXh0XCI7XG5pbXBvcnQgQ29udGV4dENvbXBvbmVudHMgZnJvbSBcIi4uLy4uL0NvbnRleHRDb21wb25lbnRzXCI7XG5pbXBvcnQgUmVzb3VyY2VNYW5hZ2VyIGZyb20gXCIuLi9SZXNvdXJjZU1hbmFnZXJcIjtcbmNsYXNzIFNwaGVyZUdlb21ldHJ5IGV4dGVuZHMgQmFzaWNHZW9tZXRyeSB7XG5cbiAgICBwcml2YXRlIF9kaXZpZGVDb3VudDogbnVtYmVyID0gMTA7XG5cbiAgICBwdWJsaWMgZ2V0IERpdmlkZUNvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGl2aWRlQ291bnQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBEaXZpZGVDb3VudChjb3VudDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2RpdmlkZUNvdW50ID0gY291bnQ7XG4gICAgICAgIHRoaXMuX191cGRhdGVCdWZmZXJzKCk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbnN0IHJtID0gSlRocmVlQ29udGV4dC5nZXRDb250ZXh0Q29tcG9uZW50PFJlc291cmNlTWFuYWdlcj4oQ29udGV4dENvbXBvbmVudHMuUmVzb3VyY2VNYW5hZ2VyKTtcbiAgICAgICAgdGhpcy5pbmRleEJ1ZmZlciA9IHJtLmNyZWF0ZUJ1ZmZlcihuYW1lICsgXCJpbmRleFwiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TVEFUSUNfRFJBVywgMSwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LlVOU0lHTkVEX1NIT1JUKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbkJ1ZmZlciA9IHJtLmNyZWF0ZUJ1ZmZlcihuYW1lICsgXCItcG9zXCIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5BUlJBWV9CVUZGRVIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TVEFUSUNfRFJBVywgMywgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkZMT0FUKTtcbiAgICAgICAgdGhpcy5ub3JtYWxCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLW5vclwiLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQVJSQVlfQlVGRkVSLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1RBVElDX0RSQVcsIDMsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GTE9BVCk7XG4gICAgICAgIHRoaXMudXZCdWZmZXIgPSBybS5jcmVhdGVCdWZmZXIobmFtZSArIFwiLXV2XCIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5BUlJBWV9CVUZGRVIsIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TVEFUSUNfRFJBVywgMiwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LkZMT0FUKTtcbiAgICAgICAgdGhpcy5fX3VwZGF0ZUJ1ZmZlcnMoKTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBfX3VwZGF0ZUJ1ZmZlcnMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBvczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3Qgbm9ybWFsOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBjb25zdCB1djogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3QgaW5kZXg6IG51bWJlcltdID0gW107XG4gICAgICAgIEdlb21ldHJ5QnVpbGRlci5hZGRTcGhlcmUocG9zLCBub3JtYWwsIHV2LCBpbmRleCwgOCwgMjQsIG5ldyBWZWN0b3IzKDAsIDAsIDApKTtcbiAgICAgICAgLy8gR2VvbWV0cnlCdWlsZGVyLmFkZEN5bGluZGVyKHBvcyxub3JtYWwsdXYsaW5kZXgsdGhpcy5EaXZpZGVDb3VudCxuZXcgVmVjdG9yMygwLDEsMCksbmV3IFZlY3RvcjMoMCwtMSwwKSxuZXcgVmVjdG9yMygwLDAsLTEpLDEpO1xuICAgICAgICB0aGlzLmluZGV4QnVmZmVyLnVwZGF0ZShuZXcgVWludDE2QXJyYXkoaW5kZXgpLCBpbmRleC5sZW5ndGgpO1xuICAgICAgICB0aGlzLm5vcm1hbEJ1ZmZlci51cGRhdGUobmV3IEZsb2F0MzJBcnJheShub3JtYWwpLCBub3JtYWwubGVuZ3RoKTtcbiAgICAgICAgdGhpcy51dkJ1ZmZlci51cGRhdGUobmV3IEZsb2F0MzJBcnJheSh1diksIHV2Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMucG9zaXRpb25CdWZmZXIudXBkYXRlKG5ldyBGbG9hdDMyQXJyYXkocG9zKSwgcG9zLmxlbmd0aCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTcGhlcmVHZW9tZXRyeTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

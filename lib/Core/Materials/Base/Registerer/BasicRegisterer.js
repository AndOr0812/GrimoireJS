import Vector2 from "../../../../Math/Vector2";
import Matrix from "../../../../Math/Matrix";
import RegistererBase from "./RegistererBase";
class BasicRegisterer extends RegistererBase {
    getName() {
        return "builtin.basic";
    }
    register(gl, pWrapper, matArg, uniforms) {
        if (uniforms["_matM"]) {
            pWrapper.uniformMatrix("_matM", matArg.object.Transformer.LocalToGlobal);
        }
        if (uniforms["_matV"]) {
            pWrapper.uniformMatrix("_matV", matArg.camera.viewMatrix);
        }
        if (uniforms["_matP"]) {
            pWrapper.uniformMatrix("_matP", matArg.camera.projectionMatrix);
        }
        if (uniforms["_matVM"]) {
            pWrapper.uniformMatrix("_matVM", Matrix.multiply(matArg.camera.viewMatrix, matArg.object.Transformer.LocalToGlobal));
        }
        if (uniforms["_matPV"]) {
            pWrapper.uniformMatrix("_matPV", matArg.camera.viewProjectionMatrix);
        }
        if (uniforms["_matPVM"]) {
            pWrapper.uniformMatrix("_matPVM", matArg.object.Transformer.calculateMVPMatrix(matArg.renderStage.Renderer));
        }
        if (uniforms["_matIP"]) {
            pWrapper.uniformMatrix("_matIP", matArg.camera.invProjectionMatrix);
        }
        if (uniforms["_eyePosition"]) {
            pWrapper.uniformVector("_eyePosition", matArg.camera.Transformer.GlobalPosition);
        }
        if (uniforms["_farClip"]) {
            pWrapper.uniformFloat("_farClip", matArg.camera.Far);
        }
        if (uniforms["_nearClip"]) {
            pWrapper.uniformFloat("_nearClip", matArg.camera.Near);
        }
        if (uniforms["_resolution"]) {
            const region = matArg.renderStage.Renderer.region;
            pWrapper.uniformVector("_resolution", new Vector2(region.Width, region.Height));
        }
    }
}
export default BasicRegisterer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvTWF0ZXJpYWxzL0Jhc2UvUmVnaXN0ZXJlci9CYXNpY1JlZ2lzdGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sT0FBTyxNQUFNLDBCQUEwQjtPQUl2QyxNQUFNLE1BQU0seUJBQXlCO09BQ3JDLGNBQWMsTUFBTSxrQkFBa0I7QUFDN0MsOEJBQThCLGNBQWM7SUFDbkMsT0FBTztRQUNaLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxFQUF5QixFQUFFLFFBQXdCLEVBQUUsTUFBOEIsRUFBRSxRQUFpRDtRQUNwSixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xFLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN2SCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDdkUsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQy9HLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixRQUFRLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNuRixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixRQUFRLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLFFBQVEsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ2xELFFBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbEYsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBQ0QsZUFBZSxlQUFlLENBQUMiLCJmaWxlIjoiQ29yZS9NYXRlcmlhbHMvQmFzZS9SZWdpc3RlcmVyL0Jhc2ljUmVnaXN0ZXJlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IyIGZyb20gXCIuLi8uLi8uLi8uLi9NYXRoL1ZlY3RvcjJcIjtcbmltcG9ydCBJVmFyaWFibGVEZXNjcmlwdGlvbiBmcm9tIFwiLi4vSVZhcmlhYmxlRGVzY3JpcHRpb25cIjtcbmltcG9ydCBJQXBwbHlNYXRlcmlhbEFyZ3VtZW50IGZyb20gXCIuLi9JQXBwbHlNYXRlcmlhbEFyZ3VtZW50XCI7XG5pbXBvcnQgUHJvZ3JhbVdyYXBwZXIgZnJvbSBcIi4uLy4uLy4uL1Jlc291cmNlcy9Qcm9ncmFtL1Byb2dyYW1XcmFwcGVyXCI7XG5pbXBvcnQgTWF0cml4IGZyb20gXCIuLi8uLi8uLi8uLi9NYXRoL01hdHJpeFwiO1xuaW1wb3J0IFJlZ2lzdGVyZXJCYXNlIGZyb20gXCIuL1JlZ2lzdGVyZXJCYXNlXCI7XG5jbGFzcyBCYXNpY1JlZ2lzdGVyZXIgZXh0ZW5kcyBSZWdpc3RlcmVyQmFzZSB7XG4gIHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiYnVpbHRpbi5iYXNpY1wiO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHBXcmFwcGVyOiBQcm9ncmFtV3JhcHBlciwgbWF0QXJnOiBJQXBwbHlNYXRlcmlhbEFyZ3VtZW50LCB1bmlmb3JtczogeyBba2V5OiBzdHJpbmddOiBJVmFyaWFibGVEZXNjcmlwdGlvbiB9KTogdm9pZCB7XG4gICAgaWYgKHVuaWZvcm1zW1wiX21hdE1cIl0pIHtcbiAgICAgIHBXcmFwcGVyLnVuaWZvcm1NYXRyaXgoXCJfbWF0TVwiLCBtYXRBcmcub2JqZWN0LlRyYW5zZm9ybWVyLkxvY2FsVG9HbG9iYWwpO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybXNbXCJfbWF0VlwiXSkge1xuICAgICAgcFdyYXBwZXIudW5pZm9ybU1hdHJpeChcIl9tYXRWXCIsIG1hdEFyZy5jYW1lcmEudmlld01hdHJpeCk7XG4gICAgfVxuICAgIGlmICh1bmlmb3Jtc1tcIl9tYXRQXCJdKSB7XG4gICAgICBwV3JhcHBlci51bmlmb3JtTWF0cml4KFwiX21hdFBcIiwgbWF0QXJnLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4KTtcbiAgICB9XG4gICAgaWYgKHVuaWZvcm1zW1wiX21hdFZNXCJdKSB7XG4gICAgICBwV3JhcHBlci51bmlmb3JtTWF0cml4KFwiX21hdFZNXCIsIE1hdHJpeC5tdWx0aXBseShtYXRBcmcuY2FtZXJhLnZpZXdNYXRyaXgsIG1hdEFyZy5vYmplY3QuVHJhbnNmb3JtZXIuTG9jYWxUb0dsb2JhbCkpO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybXNbXCJfbWF0UFZcIl0pIHtcbiAgICAgIHBXcmFwcGVyLnVuaWZvcm1NYXRyaXgoXCJfbWF0UFZcIiwgbWF0QXJnLmNhbWVyYS52aWV3UHJvamVjdGlvbk1hdHJpeCk7XG4gICAgfVxuICAgIGlmICh1bmlmb3Jtc1tcIl9tYXRQVk1cIl0pIHtcbiAgICAgIHBXcmFwcGVyLnVuaWZvcm1NYXRyaXgoXCJfbWF0UFZNXCIsIG1hdEFyZy5vYmplY3QuVHJhbnNmb3JtZXIuY2FsY3VsYXRlTVZQTWF0cml4KG1hdEFyZy5yZW5kZXJTdGFnZS5SZW5kZXJlcikpO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybXNbXCJfbWF0SVBcIl0pIHtcbiAgICAgIHBXcmFwcGVyLnVuaWZvcm1NYXRyaXgoXCJfbWF0SVBcIiwgbWF0QXJnLmNhbWVyYS5pbnZQcm9qZWN0aW9uTWF0cml4KTtcbiAgICB9XG4gICAgaWYgKHVuaWZvcm1zW1wiX2V5ZVBvc2l0aW9uXCJdKSB7XG4gICAgICBwV3JhcHBlci51bmlmb3JtVmVjdG9yKFwiX2V5ZVBvc2l0aW9uXCIsIG1hdEFyZy5jYW1lcmEuVHJhbnNmb3JtZXIuR2xvYmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybXNbXCJfZmFyQ2xpcFwiXSkge1xuICAgICAgcFdyYXBwZXIudW5pZm9ybUZsb2F0KFwiX2ZhckNsaXBcIiwgbWF0QXJnLmNhbWVyYS5GYXIpO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybXNbXCJfbmVhckNsaXBcIl0pIHtcbiAgICAgIHBXcmFwcGVyLnVuaWZvcm1GbG9hdChcIl9uZWFyQ2xpcFwiLCBtYXRBcmcuY2FtZXJhLk5lYXIpO1xuICAgIH1cbiAgICBpZiAodW5pZm9ybXNbXCJfcmVzb2x1dGlvblwiXSkge1xuICAgICAgY29uc3QgcmVnaW9uID0gbWF0QXJnLnJlbmRlclN0YWdlLlJlbmRlcmVyLnJlZ2lvbjtcbiAgICAgIHBXcmFwcGVyLnVuaWZvcm1WZWN0b3IoXCJfcmVzb2x1dGlvblwiLCBuZXcgVmVjdG9yMihyZWdpb24uV2lkdGgsIHJlZ2lvbi5IZWlnaHQpKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJhc2ljUmVnaXN0ZXJlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

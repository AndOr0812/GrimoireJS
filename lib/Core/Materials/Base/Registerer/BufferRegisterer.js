import RBO from "../../../Resources/RBO/RBO";
import RegistererBase from "./RegistererBase";
class BufferRegitserer extends RegistererBase {
    getName() {
        return "builtin.buffer";
    }
    register(gl, pWrapper, matArg, uniforms) {
        for (let variableName in uniforms) {
            const uniform = uniforms[variableName];
            if (variableName[0] !== "_" || uniform.variableType !== "sampler2D") {
                continue;
            }
            if (uniform.variableAnnotation["type"] === "buffer") {
                const bufferName = uniform.variableAnnotation["name"];
                if (!bufferName || !matArg.textureResource[bufferName]) {
                    continue;
                }
                let register = uniform.variableAnnotation["register"];
                if (!register) {
                    register = 0;
                }
                if (matArg.textureResource[bufferName] instanceof RBO) {
                    throw new Error("RBO can not be acceptable for shader argument");
                }
                pWrapper.uniformSampler(variableName, matArg.textureResource[bufferName], register);
            }
        }
    }
}
export default BufferRegitserer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvTWF0ZXJpYWxzL0Jhc2UvUmVnaXN0ZXJlci9CdWZmZXJSZWdpc3RlcmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUNPLEdBQUcsTUFBTSw0QkFBNEI7T0FDckMsY0FBYyxNQUFNLGtCQUFrQjtBQUs3QywrQkFBK0IsY0FBYztJQUNwQyxPQUFPO1FBQ1osTUFBTSxDQUFDLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFTSxRQUFRLENBQUMsRUFBeUIsRUFBRSxRQUF3QixFQUFFLE1BQThCLEVBQUUsUUFBaUQ7UUFDcEosR0FBRyxDQUFDLENBQUMsSUFBSSxZQUFZLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsWUFBWSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsUUFBUSxDQUFDO1lBQUMsQ0FBQztZQUNsRixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDcEQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0RCxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN2RCxRQUFRLENBQUM7Z0JBQ1gsQ0FBQztnQkFDRCxJQUFJLFFBQVEsR0FBVyxPQUFPLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzlELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUFDLENBQUM7Z0JBQ2hDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDdEQsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO2dCQUNuRSxDQUFDO2dCQUNELFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFnQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3JHLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLGdCQUFnQixDQUFDIiwiZmlsZSI6IkNvcmUvTWF0ZXJpYWxzL0Jhc2UvUmVnaXN0ZXJlci9CdWZmZXJSZWdpc3RlcmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRleHR1cmVCYXNlIGZyb20gXCIuLi8uLi8uLi9SZXNvdXJjZXMvVGV4dHVyZS9UZXh0dXJlQmFzZVwiO1xuaW1wb3J0IFJCTyBmcm9tIFwiLi4vLi4vLi4vUmVzb3VyY2VzL1JCTy9SQk9cIjtcbmltcG9ydCBSZWdpc3RlcmVyQmFzZSBmcm9tIFwiLi9SZWdpc3RlcmVyQmFzZVwiO1xuaW1wb3J0IFByb2dyYW1XcmFwcGVyIGZyb20gXCIuLi8uLi8uLi9SZXNvdXJjZXMvUHJvZ3JhbS9Qcm9ncmFtV3JhcHBlclwiO1xuaW1wb3J0IElWYXJpYWJsZURlc2NyaXB0aW9uIGZyb20gXCIuLi9JVmFyaWFibGVEZXNjcmlwdGlvblwiO1xuaW1wb3J0IElBcHBseU1hdGVyaWFsQXJndW1lbnQgZnJvbSBcIi4uL0lBcHBseU1hdGVyaWFsQXJndW1lbnRcIjtcblxuY2xhc3MgQnVmZmVyUmVnaXRzZXJlciBleHRlbmRzIFJlZ2lzdGVyZXJCYXNlIHtcbiAgcHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJidWlsdGluLmJ1ZmZlclwiO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHBXcmFwcGVyOiBQcm9ncmFtV3JhcHBlciwgbWF0QXJnOiBJQXBwbHlNYXRlcmlhbEFyZ3VtZW50LCB1bmlmb3JtczogeyBba2V5OiBzdHJpbmddOiBJVmFyaWFibGVEZXNjcmlwdGlvbiB9KTogdm9pZCB7XG4gICAgZm9yIChsZXQgdmFyaWFibGVOYW1lIGluIHVuaWZvcm1zKSB7XG4gICAgICBjb25zdCB1bmlmb3JtID0gdW5pZm9ybXNbdmFyaWFibGVOYW1lXTtcbiAgICAgIGlmICh2YXJpYWJsZU5hbWVbMF0gIT09IFwiX1wiIHx8IHVuaWZvcm0udmFyaWFibGVUeXBlICE9PSBcInNhbXBsZXIyRFwiKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodW5pZm9ybS52YXJpYWJsZUFubm90YXRpb25bXCJ0eXBlXCJdID09PSBcImJ1ZmZlclwiKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlck5hbWUgPSB1bmlmb3JtLnZhcmlhYmxlQW5ub3RhdGlvbltcIm5hbWVcIl07XG4gICAgICAgIGlmICghYnVmZmVyTmFtZSB8fCAhbWF0QXJnLnRleHR1cmVSZXNvdXJjZVtidWZmZXJOYW1lXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZWdpc3RlcjogbnVtYmVyID0gdW5pZm9ybS52YXJpYWJsZUFubm90YXRpb25bXCJyZWdpc3RlclwiXTtcbiAgICAgICAgaWYgKCFyZWdpc3RlcikgeyByZWdpc3RlciA9IDA7IH1cbiAgICAgICAgaWYgKG1hdEFyZy50ZXh0dXJlUmVzb3VyY2VbYnVmZmVyTmFtZV0gaW5zdGFuY2VvZiBSQk8pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSQk8gY2FuIG5vdCBiZSBhY2NlcHRhYmxlIGZvciBzaGFkZXIgYXJndW1lbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcFdyYXBwZXIudW5pZm9ybVNhbXBsZXIodmFyaWFibGVOYW1lLCBtYXRBcmcudGV4dHVyZVJlc291cmNlW2J1ZmZlck5hbWVdIGFzIFRleHR1cmVCYXNlLCByZWdpc3Rlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1ZmZlclJlZ2l0c2VyZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

import ContextComponents from "../../ContextComponents";
import JThreeContext from "../../JThreeContext";
class RenderPath {
    constructor(renderer) {
        this.path = [];
        this._renderer = renderer;
    }
    pushStage(stage) {
        this.path.push(this._fromTemplate(stage));
    }
    fromPathTemplate(templates) {
        templates.forEach((e) => {
            this.path.push(this._fromTemplate(e));
        });
    }
    insertWithIndex(index, stage) {
        if (index >= 0 && index <= this.path.length) {
            const newStageChain = new Array(this.path.length + 1);
            for (let i = 0; i < index; i++) {
                newStageChain[i] = this.path[i];
            }
            newStageChain[index] = this._fromTemplate(stage);
            for (let i = index + 1; i < newStageChain.length; i++) {
                newStageChain[i] = this.path[i - 1];
            }
            this.path = newStageChain;
        }
        else {
            console.error(`Invalid render stage index : ${index}, Current length of stage chain is $${this.path.length}`);
        }
    }
    deleteWithIndex(index) {
        if (index >= 0 && index < this.path.length && this.path.length > 0) {
            const newStageChain = new Array(this.path.length - 1);
            for (let i = 0; i < index; i++) {
                newStageChain[i] = this.path[i];
            }
            for (let i = index; i < newStageChain.length; i++) {
                newStageChain[i] = this.path[i + 1];
            }
            this.path = newStageChain;
        }
        else {
            console.error(`Invalid render stage index:${index}, Current length of stage chain is ${this.path.length}`);
        }
    }
    _fromTemplate(template) {
        const rr = JThreeContext.getContextComponent(ContextComponents.RenderStageRegistory);
        return {
            buffers: template.buffers,
            stage: rr.construct(template.stage, this._renderer),
            variables: template.variables || {}
        };
    }
}
export default RenderPath;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVuZGVyZXJzL1JlbmRlclBhdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQ08saUJBQWlCLE1BQU0seUJBQXlCO09BRWhELGFBQWEsTUFBTSxxQkFBcUI7QUFHL0M7SUFLRSxZQUFZLFFBQXVCO1FBSjVCLFNBQUksR0FBdUIsRUFBRSxDQUFDO1FBS25DLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFTSxTQUFTLENBQUMsS0FBeUI7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxTQUErQjtRQUNyRCxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sZUFBZSxDQUFDLEtBQWEsRUFBRSxLQUF5QjtRQUM3RCxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDNUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDdEQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDL0IsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsQ0FBQztZQUNELGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDdEQsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxLQUFLLHVDQUF1QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDaEgsQ0FBQztJQUNILENBQUM7SUFFTSxlQUFlLENBQUMsS0FBYTtRQUNsQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sYUFBYSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQy9CLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLENBQUM7WUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDbEQsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixLQUFLLHNDQUFzQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDN0csQ0FBQztJQUNILENBQUM7SUFFTyxhQUFhLENBQUMsUUFBNEI7UUFDaEQsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUF1QixpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzNHLE1BQU0sQ0FBQztZQUNMLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTztZQUN6QixLQUFLLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDbkQsU0FBUyxFQUFFLFFBQVEsQ0FBQyxTQUFTLElBQUksRUFBRTtTQUNwQyxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLFVBQVUsQ0FBQyIsImZpbGUiOiJDb3JlL1JlbmRlcmVycy9SZW5kZXJQYXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2ljUmVuZGVyZXIgZnJvbSBcIi4vQmFzaWNSZW5kZXJlclwiO1xuaW1wb3J0IENvbnRleHRDb21wb25lbnRzIGZyb20gXCIuLi8uLi9Db250ZXh0Q29tcG9uZW50c1wiO1xuaW1wb3J0IFJlbmRlclN0YWdlUmVnaXN0b3J5IGZyb20gXCIuL1JlbmRlclN0YWdlUmVnaXN0b3J5XCI7XG5pbXBvcnQgSlRocmVlQ29udGV4dCBmcm9tIFwiLi4vLi4vSlRocmVlQ29udGV4dFwiO1xuaW1wb3J0IFN0YWdlQ2hhaW5UZW1wbGF0ZSBmcm9tIFwiLi9TdGFnZUNoYWluVGVtcGxhdGVcIjtcbmltcG9ydCBSZW5kZXJTdGFnZUNoYWluIGZyb20gXCIuL1JlbmRlclN0YWdlQ2hhaW5cIjtcbmNsYXNzIFJlbmRlclBhdGgge1xuICBwdWJsaWMgcGF0aDogUmVuZGVyU3RhZ2VDaGFpbltdID0gW107XG5cbiAgcHJpdmF0ZSBfcmVuZGVyZXI6IEJhc2ljUmVuZGVyZXI7XG5cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IEJhc2ljUmVuZGVyZXIpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG5cbiAgcHVibGljIHB1c2hTdGFnZShzdGFnZTogU3RhZ2VDaGFpblRlbXBsYXRlKTogdm9pZCB7XG4gICAgdGhpcy5wYXRoLnB1c2godGhpcy5fZnJvbVRlbXBsYXRlKHN0YWdlKSk7XG4gIH1cblxuICBwdWJsaWMgZnJvbVBhdGhUZW1wbGF0ZSh0ZW1wbGF0ZXM6IFN0YWdlQ2hhaW5UZW1wbGF0ZVtdKTogdm9pZCB7XG4gICAgdGVtcGxhdGVzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIHRoaXMucGF0aC5wdXNoKHRoaXMuX2Zyb21UZW1wbGF0ZShlKSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgaW5zZXJ0V2l0aEluZGV4KGluZGV4OiBudW1iZXIsIHN0YWdlOiBTdGFnZUNoYWluVGVtcGxhdGUpOiB2b2lkIHtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSB0aGlzLnBhdGgubGVuZ3RoKSB7XG4gICAgICBjb25zdCBuZXdTdGFnZUNoYWluID0gbmV3IEFycmF5KHRoaXMucGF0aC5sZW5ndGggKyAxKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkrKykge1xuICAgICAgICBuZXdTdGFnZUNoYWluW2ldID0gdGhpcy5wYXRoW2ldO1xuICAgICAgfVxuICAgICAgbmV3U3RhZ2VDaGFpbltpbmRleF0gPSB0aGlzLl9mcm9tVGVtcGxhdGUoc3RhZ2UpO1xuICAgICAgZm9yIChsZXQgaSA9IGluZGV4ICsgMTsgaSA8IG5ld1N0YWdlQ2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3U3RhZ2VDaGFpbltpXSA9IHRoaXMucGF0aFtpIC0gMV07XG4gICAgICB9XG4gICAgICB0aGlzLnBhdGggPSBuZXdTdGFnZUNoYWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHJlbmRlciBzdGFnZSBpbmRleCA6ICR7aW5kZXh9LCBDdXJyZW50IGxlbmd0aCBvZiBzdGFnZSBjaGFpbiBpcyAkJHt0aGlzLnBhdGgubGVuZ3RofWApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVXaXRoSW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5wYXRoLmxlbmd0aCAmJiB0aGlzLnBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbmV3U3RhZ2VDaGFpbiA9IG5ldyBBcnJheSh0aGlzLnBhdGgubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspIHtcbiAgICAgICAgbmV3U3RhZ2VDaGFpbltpXSA9IHRoaXMucGF0aFtpXTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBpbmRleDsgaSA8IG5ld1N0YWdlQ2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3U3RhZ2VDaGFpbltpXSA9IHRoaXMucGF0aFtpICsgMV07XG4gICAgICB9XG4gICAgICB0aGlzLnBhdGggPSBuZXdTdGFnZUNoYWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHJlbmRlciBzdGFnZSBpbmRleDoke2luZGV4fSwgQ3VycmVudCBsZW5ndGggb2Ygc3RhZ2UgY2hhaW4gaXMgJHt0aGlzLnBhdGgubGVuZ3RofWApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZTogU3RhZ2VDaGFpblRlbXBsYXRlKTogUmVuZGVyU3RhZ2VDaGFpbiB7XG4gICAgY29uc3QgcnIgPSBKVGhyZWVDb250ZXh0LmdldENvbnRleHRDb21wb25lbnQ8UmVuZGVyU3RhZ2VSZWdpc3Rvcnk+KENvbnRleHRDb21wb25lbnRzLlJlbmRlclN0YWdlUmVnaXN0b3J5KTtcbiAgICByZXR1cm4ge1xuICAgICAgYnVmZmVyczogdGVtcGxhdGUuYnVmZmVycyxcbiAgICAgIHN0YWdlOiByci5jb25zdHJ1Y3QodGVtcGxhdGUuc3RhZ2UsIHRoaXMuX3JlbmRlcmVyKSxcbiAgICAgIHZhcmlhYmxlczogdGVtcGxhdGUudmFyaWFibGVzIHx8IHt9XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZW5kZXJQYXRoO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

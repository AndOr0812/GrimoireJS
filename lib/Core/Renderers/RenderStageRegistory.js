import HitAreaRenderStage from "./RenderStages/HitAreaRenderStage";
import RSMLRenderStage from "./RenderStages/RSML/RSMLRenderStage";
import ContextComponents from "../../ContextComponents";
class RenderStageRegistory {
    constructor() {
        this._renderStageFactoryFunctions = {};
        this.register("jthree.hitarea", (renderer) => new HitAreaRenderStage(renderer));
        this.register(require("./RenderStages/BuiltIn/GBuffer.html"));
        this.register(require("./RenderStages/BuiltIn/LightAccumulationStage.html"));
        this.register(require("./RenderStages/BuiltIn/ForwardShading.html"));
        this.register(require("./RenderStages/BuiltIn/Fog.html"));
        this.register(require("./RenderStages/BuiltIn/FogExp2.html"));
        this.register(require("./RenderStages/BuiltIn/Skybox.html"));
        this.register(require("./RenderStages/BuiltIn/FXAA.html"));
        this.register(require("./RenderStages/BuiltIn/Sobel.html"));
        this.register(require("./RenderStages/BuiltIn/Gaussian.html"));
    }
    getContextComponentIndex() {
        return ContextComponents.RenderStageRegistory;
    }
    register(nameOrsource, factory) {
        if (factory) {
            this._renderStageFactoryFunctions[nameOrsource] = factory;
            return;
        }
        const parser = new DOMParser();
        const rsmlRoot = parser.parseFromString(nameOrsource, "text/xml");
        const stageRoot = rsmlRoot.querySelector("rsml > stage");
        const name = stageRoot.getAttribute("name");
        if (!name) {
            console.error(`The name field was not found in RSML file.\n${nameOrsource}`);
            return;
        }
        this._renderStageFactoryFunctions[name] = (renderer) => new RSMLRenderStage(renderer, nameOrsource);
    }
    /**
     * Construct new render stage related to specifed key.
     * @param  {string}          name     the key to identify render stage
     * @param  {BasicRenderer}   renderer the renderer being going to hold generated render stage base
     * @return {RenderStageBase}          generated render stage base
     */
    construct(name, renderer) {
        return this._renderStageFactoryFunctions[name](renderer);
    }
}
export default RenderStageRegistory;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVuZGVyZXJzL1JlbmRlclN0YWdlUmVnaXN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLGtCQUFrQixNQUFNLG1DQUFtQztPQUMzRCxlQUFlLE1BQU0scUNBQXFDO09BRzFELGlCQUFpQixNQUFNLHlCQUF5QjtBQUd2RDtJQUdFO1FBRlEsaUNBQTRCLEdBQTZELEVBQUUsQ0FBQztRQUdsRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxLQUFLLElBQUksa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsb0RBQW9ELENBQUMsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMscUNBQXFDLENBQUMsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU0sd0JBQXdCO1FBQzdCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQztJQUNoRCxDQUFDO0lBY00sUUFBUSxDQUFDLFlBQW9CLEVBQUUsT0FBK0M7UUFDbkYsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNaLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxZQUFZLENBQUMsR0FBRyxPQUFPLENBQUM7WUFDMUQsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7UUFDL0IsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEUsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN6RCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0NBQStDLFlBQVksRUFBRSxDQUFDLENBQUM7WUFDN0UsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQXVCLEtBQUssSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3JILENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLFNBQVMsQ0FBQyxJQUFZLEVBQUUsUUFBdUI7UUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzRCxDQUFDO0FBQ0gsQ0FBQztBQUNELGVBQWUsb0JBQW9CLENBQUMiLCJmaWxlIjoiQ29yZS9SZW5kZXJlcnMvUmVuZGVyU3RhZ2VSZWdpc3RvcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGl0QXJlYVJlbmRlclN0YWdlIGZyb20gXCIuL1JlbmRlclN0YWdlcy9IaXRBcmVhUmVuZGVyU3RhZ2VcIjtcbmltcG9ydCBSU01MUmVuZGVyU3RhZ2UgZnJvbSBcIi4vUmVuZGVyU3RhZ2VzL1JTTUwvUlNNTFJlbmRlclN0YWdlXCI7XG5pbXBvcnQgQmFzaWNSZW5kZXJlciBmcm9tIFwiLi9CYXNpY1JlbmRlcmVyXCI7XG5pbXBvcnQgUmVuZGVyU3RhZ2VCYXNlIGZyb20gXCIuL1JlbmRlclN0YWdlcy9SZW5kZXJTdGFnZUJhc2VcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbmltcG9ydCBJQ29udGV4dENvbXBvbmVudCBmcm9tIFwiLi4vLi4vSUNvbnRleHRDb21wb25lbnRcIjtcbmltcG9ydCB7RnVuYzF9IGZyb20gXCIuLi8uLi9CYXNlL0RlbGVnYXRlc1wiO1xuY2xhc3MgUmVuZGVyU3RhZ2VSZWdpc3RvcnkgaW1wbGVtZW50cyBJQ29udGV4dENvbXBvbmVudCB7XG4gIHByaXZhdGUgX3JlbmRlclN0YWdlRmFjdG9yeUZ1bmN0aW9uczogeyBba2V5OiBzdHJpbmddOiBGdW5jMTxCYXNpY1JlbmRlcmVyLCBSZW5kZXJTdGFnZUJhc2U+IH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlZ2lzdGVyKFwianRocmVlLmhpdGFyZWFcIiwgKHJlbmRlcmVyKSA9PiBuZXcgSGl0QXJlYVJlbmRlclN0YWdlKHJlbmRlcmVyKSk7XG4gICAgdGhpcy5yZWdpc3RlcihyZXF1aXJlKFwiLi9SZW5kZXJTdGFnZXMvQnVpbHRJbi9HQnVmZmVyLmh0bWxcIikpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZShcIi4vUmVuZGVyU3RhZ2VzL0J1aWx0SW4vTGlnaHRBY2N1bXVsYXRpb25TdGFnZS5odG1sXCIpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoXCIuL1JlbmRlclN0YWdlcy9CdWlsdEluL0ZvcndhcmRTaGFkaW5nLmh0bWxcIikpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZShcIi4vUmVuZGVyU3RhZ2VzL0J1aWx0SW4vRm9nLmh0bWxcIikpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZShcIi4vUmVuZGVyU3RhZ2VzL0J1aWx0SW4vRm9nRXhwMi5odG1sXCIpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoXCIuL1JlbmRlclN0YWdlcy9CdWlsdEluL1NreWJveC5odG1sXCIpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoXCIuL1JlbmRlclN0YWdlcy9CdWlsdEluL0ZYQUEuaHRtbFwiKSk7XG4gICAgdGhpcy5yZWdpc3RlcihyZXF1aXJlKFwiLi9SZW5kZXJTdGFnZXMvQnVpbHRJbi9Tb2JlbC5odG1sXCIpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoXCIuL1JlbmRlclN0YWdlcy9CdWlsdEluL0dhdXNzaWFuLmh0bWxcIikpO1xuICB9XG5cbiAgcHVibGljIGdldENvbnRleHRDb21wb25lbnRJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiBDb250ZXh0Q29tcG9uZW50cy5SZW5kZXJTdGFnZVJlZ2lzdG9yeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBuZXcgcmVuZGVyIHN0YWdlIGZhY3RvcnkgZnJvbSBSU01MIHNvdXJjZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBSU01MIHNvdXJjZVxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVyKHNvdXJjZTogc3RyaW5nKTogdm9pZDtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIG5ldyByZW5kZXIgc3RhZ2UgZmFjdG9yeSBmcm9tIGRlbGVnYXRlIGZ1bmN0aW9uLlxuICAgKiBUaGlzIG92ZXJsb2FkIG1haW5seSB1c2VkIGZvciByZWdpc3RlcmluZyBjdXN0dW0gb3ZlcnJpZGVkIGNsYXNzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAgICAgICAgICAgdGhlIGtleSB0byBiZSB1c2VkIGZvciBjb25zdHJ1Y3RpbmcgdGhlIHJlbmRlciBzdGFnZVxuICAgKiBAcGFyYW0ge0Z1bmMxPEJhc2ljUmVuZGVyZXIsIFJlbmRlclN0YWdlQmFzZT59IGZhY3RvcnkgICAgICAgZmFjdG9yeSBmdW5jdGlvbiBmb3IgY29uc3RydWN0aW5nIHRoZSByZW5kZXIgc3RhZ2VcbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcihuYW1lOiBzdHJpbmcsIGZhY3Rvcnk6IEZ1bmMxPEJhc2ljUmVuZGVyZXIsIFJlbmRlclN0YWdlQmFzZT4pOiB2b2lkO1xuICBwdWJsaWMgcmVnaXN0ZXIobmFtZU9yc291cmNlOiBzdHJpbmcsIGZhY3Rvcnk/OiBGdW5jMTxCYXNpY1JlbmRlcmVyLCBSZW5kZXJTdGFnZUJhc2U+KTogdm9pZCB7XG4gICAgaWYgKGZhY3RvcnkpIHtcbiAgICAgIHRoaXMuX3JlbmRlclN0YWdlRmFjdG9yeUZ1bmN0aW9uc1tuYW1lT3Jzb3VyY2VdID0gZmFjdG9yeTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgIGNvbnN0IHJzbWxSb290ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhuYW1lT3Jzb3VyY2UsIFwidGV4dC94bWxcIik7XG4gICAgY29uc3Qgc3RhZ2VSb290ID0gcnNtbFJvb3QucXVlcnlTZWxlY3RvcihcInJzbWwgPiBzdGFnZVwiKTtcbiAgICBjb25zdCBuYW1lID0gc3RhZ2VSb290LmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBUaGUgbmFtZSBmaWVsZCB3YXMgbm90IGZvdW5kIGluIFJTTUwgZmlsZS5cXG4ke25hbWVPcnNvdXJjZX1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fcmVuZGVyU3RhZ2VGYWN0b3J5RnVuY3Rpb25zW25hbWVdID0gKHJlbmRlcmVyOiBCYXNpY1JlbmRlcmVyKSA9PiBuZXcgUlNNTFJlbmRlclN0YWdlKHJlbmRlcmVyLCBuYW1lT3Jzb3VyY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBuZXcgcmVuZGVyIHN0YWdlIHJlbGF0ZWQgdG8gc3BlY2lmZWQga2V5LlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgIG5hbWUgICAgIHRoZSBrZXkgdG8gaWRlbnRpZnkgcmVuZGVyIHN0YWdlXG4gICAqIEBwYXJhbSAge0Jhc2ljUmVuZGVyZXJ9ICAgcmVuZGVyZXIgdGhlIHJlbmRlcmVyIGJlaW5nIGdvaW5nIHRvIGhvbGQgZ2VuZXJhdGVkIHJlbmRlciBzdGFnZSBiYXNlXG4gICAqIEByZXR1cm4ge1JlbmRlclN0YWdlQmFzZX0gICAgICAgICAgZ2VuZXJhdGVkIHJlbmRlciBzdGFnZSBiYXNlXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0KG5hbWU6IHN0cmluZywgcmVuZGVyZXI6IEJhc2ljUmVuZGVyZXIpOiBSZW5kZXJTdGFnZUJhc2Uge1xuICAgIHJldHVybiB0aGlzLl9yZW5kZXJTdGFnZUZhY3RvcnlGdW5jdGlvbnNbbmFtZV0ocmVuZGVyZXIpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBSZW5kZXJTdGFnZVJlZ2lzdG9yeTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

import TextureBase from "../../Resources/Texture/TextureBase";
import RSMLRenderStageBase from "./RSML/RSMLRenderStage";
import Q from "q";
class HitAreaRenderStage extends RSMLRenderStageBase {
    constructor(renderer) {
        super(renderer, require("./BuiltIn/HitAreaRenderingStage.html"));
        /**
         * Object index for rendering hit area.
         * (This is internal use)
         * @type {number}
         */
        this.objectIndex = 1;
        this.indexObjectPair = {};
        this.hitTestQueries = [];
        this.Renderer.on("mouse-move", (e) => {
            this.queryHitTest(e.mouseX, e.mouseY).then((object) => {
                console.log(object);
            });
        });
    }
    preTechnique(scene, techniqueIndex, texs) {
        super.preTechnique(scene, techniqueIndex, texs);
        this.objectIndex = 1;
    }
    render(scene, object, techniqueCount, techniqueIndex, texs) {
        this.indexObjectPair[this.objectIndex] = object;
        super.render(scene, object, techniqueCount, techniqueIndex, texs);
        this.objectIndex++;
    }
    postTechnique(scene, techniqueIndex, texs) {
        if (texs["OUT"]) {
            if (!(texs["OUT"] instanceof TextureBase)) {
                throw new Error("OUT argument cannnot acceptable except TextureBase");
            }
            const canvas = this.Renderer.Canvas;
            for (let i = 0; i < this.hitTestQueries.length; i++) {
                const query = this.hitTestQueries[i];
                const fetchedPixel = texs["OUT"].getForContext(canvas).getPixel(query.x, this.Renderer.region.Height - query.y);
                const object = this._fetchRelatedObject(fetchedPixel);
                query.deferred.resolve(object);
            }
            this.hitTestQueries.splice(0);
        }
    }
    queryHitTest(x, y) {
        const deferred = Q.defer();
        this.hitTestQueries.push({
            x: x,
            y: y,
            deferred: deferred
        });
        return deferred.promise;
    }
    _fetchRelatedObject(pixel) {
        const id = (pixel[0] << 16) | pixel[1];
        return this.indexObjectPair[id];
    }
}
export default HitAreaRenderStage;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVuZGVyZXJzL1JlbmRlclN0YWdlcy9IaXRBcmVhUmVuZGVyU3RhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sV0FBVyxNQUFNLHFDQUFxQztPQUN0RCxtQkFBbUIsTUFBTSx3QkFBd0I7T0FJakQsQ0FBQyxNQUFNLEdBQUc7QUFRakIsaUNBQWlDLG1CQUFtQjtJQUNsRCxZQUFZLFFBQVE7UUFDbEIsTUFBTSxRQUFRLEVBQUUsT0FBTyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQztRQVFuRTs7OztXQUlHO1FBQ0ksZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFFeEIsb0JBQWUsR0FBbUMsRUFBRSxDQUFDO1FBRXJELG1CQUFjLEdBQW1CLEVBQUUsQ0FBQztRQWhCekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07Z0JBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFhTSxZQUFZLENBQUMsS0FBWSxFQUFFLGNBQXNCLEVBQUUsSUFBdUI7UUFDL0UsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBWSxFQUFFLE1BQW1CLEVBQUUsY0FBc0IsRUFBRSxjQUFzQixFQUFFLElBQXVCO1FBQ3RILElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNoRCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxLQUFZLEVBQUUsY0FBc0IsRUFBRSxJQUF1QjtRQUNoRixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7WUFDeEUsQ0FBQztZQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ3BDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDcEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsTUFBTSxZQUFZLEdBQUksSUFBSSxDQUFDLEtBQUssQ0FBaUIsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN0RCxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxDQUFDO1lBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNILENBQUM7SUFFTSxZQUFZLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDdEMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBZSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixRQUFRLEVBQUUsUUFBUTtTQUNuQixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRU8sbUJBQW1CLENBQUMsS0FBc0I7UUFDaEQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7QUFDSCxDQUFDO0FBRUQsZUFBZSxrQkFBa0IsQ0FBQyIsImZpbGUiOiJDb3JlL1JlbmRlcmVycy9SZW5kZXJTdGFnZXMvSGl0QXJlYVJlbmRlclN0YWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRleHR1cmVCYXNlIGZyb20gXCIuLi8uLi9SZXNvdXJjZXMvVGV4dHVyZS9UZXh0dXJlQmFzZVwiO1xuaW1wb3J0IFJTTUxSZW5kZXJTdGFnZUJhc2UgZnJvbSBcIi4vUlNNTC9SU01MUmVuZGVyU3RhZ2VcIjtcbmltcG9ydCBTY2VuZU9iamVjdCBmcm9tIFwiLi4vLi4vU2NlbmVPYmplY3RzL1NjZW5lT2JqZWN0XCI7XG5pbXBvcnQgUmVzb2x2ZWRDaGFpbkluZm8gZnJvbSBcIi4uL1Jlc29sdmVkQ2hhaW5JbmZvXCI7XG5pbXBvcnQgU2NlbmUgZnJvbSBcIi4uLy4uL1NjZW5lXCI7XG5pbXBvcnQgUSBmcm9tIFwicVwiO1xuXG5pbnRlcmZhY2UgSGl0VGVzdFF1ZXJ5IHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIGRlZmVycmVkOiBRLkRlZmVycmVkPFNjZW5lT2JqZWN0Pjtcbn1cblxuY2xhc3MgSGl0QXJlYVJlbmRlclN0YWdlIGV4dGVuZHMgUlNNTFJlbmRlclN0YWdlQmFzZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgc3VwZXIocmVuZGVyZXIsIHJlcXVpcmUoXCIuL0J1aWx0SW4vSGl0QXJlYVJlbmRlcmluZ1N0YWdlLmh0bWxcIikpO1xuICAgIHRoaXMuUmVuZGVyZXIub24oXCJtb3VzZS1tb3ZlXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5SGl0VGVzdChlLm1vdXNlWCwgZS5tb3VzZVkpLnRoZW4oKG9iamVjdCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT2JqZWN0IGluZGV4IGZvciByZW5kZXJpbmcgaGl0IGFyZWEuXG4gICAqIChUaGlzIGlzIGludGVybmFsIHVzZSlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHB1YmxpYyBvYmplY3RJbmRleDogbnVtYmVyID0gMTtcblxuICBwdWJsaWMgaW5kZXhPYmplY3RQYWlyOiB7IFtrZXk6IG51bWJlcl06IFNjZW5lT2JqZWN0IH0gPSB7fTtcblxuICBwdWJsaWMgaGl0VGVzdFF1ZXJpZXM6IEhpdFRlc3RRdWVyeVtdID0gW107XG5cbiAgcHVibGljIHByZVRlY2huaXF1ZShzY2VuZTogU2NlbmUsIHRlY2huaXF1ZUluZGV4OiBudW1iZXIsIHRleHM6IFJlc29sdmVkQ2hhaW5JbmZvKTogdm9pZCB7XG4gICAgc3VwZXIucHJlVGVjaG5pcXVlKHNjZW5lLCB0ZWNobmlxdWVJbmRleCwgdGV4cyk7XG4gICAgdGhpcy5vYmplY3RJbmRleCA9IDE7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKHNjZW5lOiBTY2VuZSwgb2JqZWN0OiBTY2VuZU9iamVjdCwgdGVjaG5pcXVlQ291bnQ6IG51bWJlciwgdGVjaG5pcXVlSW5kZXg6IG51bWJlciwgdGV4czogUmVzb2x2ZWRDaGFpbkluZm8pOiB2b2lkIHtcbiAgICB0aGlzLmluZGV4T2JqZWN0UGFpclt0aGlzLm9iamVjdEluZGV4XSA9IG9iamVjdDtcbiAgICBzdXBlci5yZW5kZXIoc2NlbmUsIG9iamVjdCwgdGVjaG5pcXVlQ291bnQsIHRlY2huaXF1ZUluZGV4LCB0ZXhzKTtcbiAgICB0aGlzLm9iamVjdEluZGV4Kys7XG4gIH1cblxuICBwdWJsaWMgcG9zdFRlY2huaXF1ZShzY2VuZTogU2NlbmUsIHRlY2huaXF1ZUluZGV4OiBudW1iZXIsIHRleHM6IFJlc29sdmVkQ2hhaW5JbmZvKTogdm9pZCB7XG4gICAgaWYgKHRleHNbXCJPVVRcIl0pIHtcbiAgICAgIGlmICghKHRleHNbXCJPVVRcIl0gaW5zdGFuY2VvZiBUZXh0dXJlQmFzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT1VUIGFyZ3VtZW50IGNhbm5ub3QgYWNjZXB0YWJsZSBleGNlcHQgVGV4dHVyZUJhc2VcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBjYW52YXMgPSB0aGlzLlJlbmRlcmVyLkNhbnZhcztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5oaXRUZXN0UXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBxdWVyeSA9IHRoaXMuaGl0VGVzdFF1ZXJpZXNbaV07XG4gICAgICAgIGNvbnN0IGZldGNoZWRQaXhlbCA9ICh0ZXhzW1wiT1VUXCJdIGFzIFRleHR1cmVCYXNlKS5nZXRGb3JDb250ZXh0KGNhbnZhcykuZ2V0UGl4ZWwocXVlcnkueCwgdGhpcy5SZW5kZXJlci5yZWdpb24uSGVpZ2h0IC0gcXVlcnkueSk7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuX2ZldGNoUmVsYXRlZE9iamVjdChmZXRjaGVkUGl4ZWwpO1xuICAgICAgICBxdWVyeS5kZWZlcnJlZC5yZXNvbHZlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhpdFRlc3RRdWVyaWVzLnNwbGljZSgwKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcXVlcnlIaXRUZXN0KHg6IG51bWJlciwgeTogbnVtYmVyKTogUS5JUHJvbWlzZTxTY2VuZU9iamVjdD4ge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcjxTY2VuZU9iamVjdD4oKTtcbiAgICB0aGlzLmhpdFRlc3RRdWVyaWVzLnB1c2goe1xuICAgICAgeDogeCxcbiAgICAgIHk6IHksXG4gICAgICBkZWZlcnJlZDogZGVmZXJyZWRcbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZldGNoUmVsYXRlZE9iamVjdChwaXhlbDogQXJyYXlCdWZmZXJWaWV3KTogU2NlbmVPYmplY3Qge1xuICAgIGNvbnN0IGlkID0gKHBpeGVsWzBdIDw8IDE2KSB8IHBpeGVsWzFdO1xuICAgIHJldHVybiB0aGlzLmluZGV4T2JqZWN0UGFpcltpZF07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGl0QXJlYVJlbmRlclN0YWdlO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

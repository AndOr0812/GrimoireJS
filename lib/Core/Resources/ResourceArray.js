import JThreeObject from "../../Base/JThreeObject";
class ResourceArray extends JThreeObject {
    constructor(...args) {
        super(...args);
        this._resourceArray = {};
        this._handlerArray = {};
    }
    create(id, creationFunc) {
        let resource;
        if (this._resourceArray[id]) {
            resource = this._resourceArray[id];
            return resource;
        }
        else {
            resource = creationFunc();
            this._resourceArray[id] = resource;
            const handlers = this._handlerArray[id];
            if (handlers) {
                handlers.forEach(v => v(resource));
            }
            return resource;
        }
    }
    get(id) {
        return this._resourceArray[id];
    }
    has(id) {
        return !!this._resourceArray[id];
    }
    getHandler(id, handler) {
        if (this.has(id)) {
            handler(this.get(id));
        }
        else {
            if (this._handlerArray[id]) {
                this._handlerArray[id].push(handler);
            }
            else {
                this._handlerArray[id] = [handler];
            }
        }
    }
}
export default ResourceArray;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVzb3VyY2VzL1Jlc291cmNlQXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sWUFBWSxNQUFNLHlCQUF5QjtBQUVsRCw0QkFBK0IsWUFBWTtJQUEzQztRQUErQixlQUFZO1FBQ2pDLG1CQUFjLEdBQXlCLEVBQUUsQ0FBQztRQUUxQyxrQkFBYSxHQUFtQyxFQUFFLENBQUM7SUFxQzdELENBQUM7SUFuQ1EsTUFBTSxDQUFDLEVBQVUsRUFBRSxZQUFzQjtRQUM5QyxJQUFJLFFBQVEsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDbEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sUUFBUSxHQUFHLFlBQVksRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO1lBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDYixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNsQixDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FBQyxFQUFVO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxHQUFHLENBQUMsRUFBVTtRQUNuQixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLFVBQVUsQ0FBQyxFQUFVLEVBQUUsT0FBbUI7UUFDL0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyQyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBRUQsZUFBZSxhQUFhLENBQUMiLCJmaWxlIjoiQ29yZS9SZXNvdXJjZXMvUmVzb3VyY2VBcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKVGhyZWVPYmplY3QgZnJvbSBcIi4uLy4uL0Jhc2UvSlRocmVlT2JqZWN0XCI7XG5pbXBvcnQge0FjdGlvbjEsIEZ1bmMwfSBmcm9tIFwiLi8uLi8uLi9CYXNlL0RlbGVnYXRlc1wiO1xuY2xhc3MgUmVzb3VyY2VBcnJheTxUPiBleHRlbmRzIEpUaHJlZU9iamVjdCB7XG4gIHByaXZhdGUgX3Jlc291cmNlQXJyYXk6IHsgW2tleTogc3RyaW5nXTogVCB9ID0ge307XG5cbiAgcHJpdmF0ZSBfaGFuZGxlckFycmF5OiB7IFtpZDogc3RyaW5nXTogQWN0aW9uMTxUPltdIH0gPSB7fTtcblxuICBwdWJsaWMgY3JlYXRlKGlkOiBzdHJpbmcsIGNyZWF0aW9uRnVuYzogRnVuYzA8VD4pOiBhbnkge1xuICAgIGxldCByZXNvdXJjZTtcbiAgICBpZiAodGhpcy5fcmVzb3VyY2VBcnJheVtpZF0pIHtcbiAgICAgIHJlc291cmNlID0gdGhpcy5fcmVzb3VyY2VBcnJheVtpZF07XG4gICAgICByZXR1cm4gcmVzb3VyY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc291cmNlID0gY3JlYXRpb25GdW5jKCk7XG4gICAgICB0aGlzLl9yZXNvdXJjZUFycmF5W2lkXSA9IHJlc291cmNlO1xuICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLl9oYW5kbGVyQXJyYXlbaWRdO1xuICAgICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzLmZvckVhY2godiA9PiB2KHJlc291cmNlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb3VyY2U7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldChpZDogc3RyaW5nKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlQXJyYXlbaWRdO1xuICB9XG5cbiAgcHVibGljIGhhcyhpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5fcmVzb3VyY2VBcnJheVtpZF07XG4gIH1cblxuICBwdWJsaWMgZ2V0SGFuZGxlcihpZDogc3RyaW5nLCBoYW5kbGVyOiBBY3Rpb24xPFQ+KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaGFzKGlkKSkge1xuICAgICAgaGFuZGxlcih0aGlzLmdldChpZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5faGFuZGxlckFycmF5W2lkXSkge1xuICAgICAgICB0aGlzLl9oYW5kbGVyQXJyYXlbaWRdLnB1c2goaGFuZGxlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9oYW5kbGVyQXJyYXlbaWRdID0gW2hhbmRsZXJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZXNvdXJjZUFycmF5O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

import JThreeLogger from "../../../Base/JThreeLogger";
import ResourceWrapper from "../ResourceWrapper";
class ShaderWrapper extends ResourceWrapper {
    constructor(parent, canvas) {
        super(canvas);
        this._targetShader = null;
        this._parentShader = parent;
    }
    get TargetShader() {
        if (!this.Initialized) {
            this.init();
        }
        return this._targetShader;
    }
    init() {
        if (!this.Initialized) {
            this._targetShader = this.GL.createShader(this._parentShader.ShaderType);
            this.GL.shaderSource(this._targetShader, this._parentShader.ShaderSource);
            this.GL.compileShader(this._targetShader);
            this._checkCompileStatus();
            this.__setInitialized(true);
        }
    }
    dispose() {
        if (this.Initialized) {
            this.GL.deleteShader(this._targetShader);
            this._targetShader = null;
            this.__setInitialized(false);
        }
    }
    /**
     * Update shader source from Shader class.
     */
    update() {
        this.GL.deleteShader(this._targetShader);
        this._targetShader = this.GL.createShader(this._parentShader.ShaderType);
        this.GL.shaderSource(this.TargetShader, this._parentShader.ShaderSource);
        this.GL.compileShader(this.TargetShader);
    }
    _checkCompileStatus() {
        if (!this.GL.getShaderParameter(this._targetShader, this.GL.COMPILE_STATUS)) {
            console.error(`Compile error!:${this.GL.getShaderInfoLog(this._targetShader)}`);
            JThreeLogger.sectionLongLog("COMPILE_ERROR", this._parentShader.ShaderSource);
        }
    }
}
export default ShaderWrapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmUvUmVzb3VyY2VzL1NoYWRlci9TaGFkZXJXcmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLFlBQVksTUFBTSw0QkFBNEI7T0FHOUMsZUFBZSxNQUFNLG9CQUFvQjtBQUNoRCw0QkFBNEIsZUFBZTtJQUV6QyxZQUFZLE1BQWMsRUFBRSxNQUFjO1FBQ3hDLE1BQU0sTUFBTSxDQUFDLENBQUM7UUFJUixrQkFBYSxHQUFnQixJQUFJLENBQUM7UUFIeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQU1ELElBQVcsWUFBWTtRQUNyQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRU0sSUFBSTtRQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUMxQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU07UUFDWCxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVPLG1CQUFtQjtRQUN6QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RSxPQUFPLENBQUMsS0FBSyxDQUFDLGtCQUFrQixJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUUsRUFBRSxDQUFDLENBQUM7WUFDakYsWUFBWSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoRixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLGFBQWEsQ0FBQyIsImZpbGUiOiJDb3JlL1Jlc291cmNlcy9TaGFkZXIvU2hhZGVyV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKVGhyZWVMb2dnZXIgZnJvbSBcIi4uLy4uLy4uL0Jhc2UvSlRocmVlTG9nZ2VyXCI7XG5pbXBvcnQgU2hhZGVyIGZyb20gXCIuL1NoYWRlclwiO1xuaW1wb3J0IENhbnZhcyBmcm9tIFwiLi4vLi4vQ2FudmFzL0NhbnZhc1wiO1xuaW1wb3J0IFJlc291cmNlV3JhcHBlciBmcm9tIFwiLi4vUmVzb3VyY2VXcmFwcGVyXCI7XG5jbGFzcyBTaGFkZXJXcmFwcGVyIGV4dGVuZHMgUmVzb3VyY2VXcmFwcGVyIHtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IFNoYWRlciwgY2FudmFzOiBDYW52YXMpIHtcbiAgICBzdXBlcihjYW52YXMpO1xuICAgIHRoaXMuX3BhcmVudFNoYWRlciA9IHBhcmVudDtcbiAgfVxuXG4gIHByaXZhdGUgX3RhcmdldFNoYWRlcjogV2ViR0xTaGFkZXIgPSBudWxsO1xuXG4gIHByaXZhdGUgX3BhcmVudFNoYWRlcjogU2hhZGVyO1xuXG4gIHB1YmxpYyBnZXQgVGFyZ2V0U2hhZGVyKCk6IFdlYkdMU2hhZGVyIHtcbiAgICBpZiAoIXRoaXMuSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0U2hhZGVyO1xuICB9XG5cbiAgcHVibGljIGluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLkluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLl90YXJnZXRTaGFkZXIgPSB0aGlzLkdMLmNyZWF0ZVNoYWRlcih0aGlzLl9wYXJlbnRTaGFkZXIuU2hhZGVyVHlwZSk7XG4gICAgICB0aGlzLkdMLnNoYWRlclNvdXJjZSh0aGlzLl90YXJnZXRTaGFkZXIsIHRoaXMuX3BhcmVudFNoYWRlci5TaGFkZXJTb3VyY2UpO1xuICAgICAgdGhpcy5HTC5jb21waWxlU2hhZGVyKHRoaXMuX3RhcmdldFNoYWRlcik7XG4gICAgICB0aGlzLl9jaGVja0NvbXBpbGVTdGF0dXMoKTtcbiAgICAgIHRoaXMuX19zZXRJbml0aWFsaXplZCh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5Jbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5HTC5kZWxldGVTaGFkZXIodGhpcy5fdGFyZ2V0U2hhZGVyKTtcbiAgICAgIHRoaXMuX3RhcmdldFNoYWRlciA9IG51bGw7XG4gICAgICB0aGlzLl9fc2V0SW5pdGlhbGl6ZWQoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc2hhZGVyIHNvdXJjZSBmcm9tIFNoYWRlciBjbGFzcy5cbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgdGhpcy5HTC5kZWxldGVTaGFkZXIodGhpcy5fdGFyZ2V0U2hhZGVyKTtcbiAgICB0aGlzLl90YXJnZXRTaGFkZXIgPSB0aGlzLkdMLmNyZWF0ZVNoYWRlcih0aGlzLl9wYXJlbnRTaGFkZXIuU2hhZGVyVHlwZSk7XG4gICAgdGhpcy5HTC5zaGFkZXJTb3VyY2UodGhpcy5UYXJnZXRTaGFkZXIsIHRoaXMuX3BhcmVudFNoYWRlci5TaGFkZXJTb3VyY2UpO1xuICAgIHRoaXMuR0wuY29tcGlsZVNoYWRlcih0aGlzLlRhcmdldFNoYWRlcik7XG4gIH1cblxuICBwcml2YXRlIF9jaGVja0NvbXBpbGVTdGF0dXMoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLkdMLmdldFNoYWRlclBhcmFtZXRlcih0aGlzLl90YXJnZXRTaGFkZXIsIHRoaXMuR0wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBDb21waWxlIGVycm9yIToke3RoaXMuR0wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLl90YXJnZXRTaGFkZXIpIH1gKTtcbiAgICAgIEpUaHJlZUxvZ2dlci5zZWN0aW9uTG9uZ0xvZyhcIkNPTVBJTEVfRVJST1JcIiwgdGhpcy5fcGFyZW50U2hhZGVyLlNoYWRlclNvdXJjZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNoYWRlcldyYXBwZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

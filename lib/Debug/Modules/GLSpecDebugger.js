import DebuggerModuleBase from "./DebuggerModuleBase";
import GLSpecResolver from "../../Core/Canvas/GL/GLSpecResolver";
import JThreeContext from "../../JThreeContext";
import ContextComponents from "../../ContextComponents";
class GLSpecDebugger extends DebuggerModuleBase {
    attach(debug) {
        JThreeContext.getContextComponent(ContextComponents.CanvasManager).canvasListChanged.addListener(() => {
            debug.setInfo("GLSPEC : Maximum combined texture unit", GLSpecResolver.MaxCombinedTextureUnits);
            debug.setInfo("GLSPEC : Maximum cubemap texture size", GLSpecResolver.MaxCubeMapTextureSize);
            debug.setInfo("GLSPEC : Maximum fragment uniform vectors", GLSpecResolver.MaxFragmentUniformVectors);
            debug.setInfo("GLSPEC : Maximum rederbuffer size", GLSpecResolver.MaxRenderbufferSize);
            debug.setInfo("GLSPEC : Maximum texture image units", GLSpecResolver.MaxTextureImageUnits);
            debug.setInfo("GLSPEC : Maximum texture size", GLSpecResolver.MaxTextureSize);
            debug.setInfo("GLSPEC : Maximum varying vectors", GLSpecResolver.MaxVaryingVectors);
            debug.setInfo("GLSPEC : Maximum vertex attribute", GLSpecResolver.MaxVertexAttribs);
            debug.setInfo("GLSPEC : Maximum VTF units", GLSpecResolver.MaxVertexTextureImageUnits);
            debug.setInfo("GLSPEC : Maximum vertex uniform vectors", GLSpecResolver.MaxVertexUniformVectors);
            debug.setInfo("GLSPEC : Maximum viewport dimension", GLSpecResolver.MaxViewportDims);
        });
    }
}
export default GLSpecDebugger;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlYnVnL01vZHVsZXMvR0xTcGVjRGVidWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sa0JBQWtCLE1BQU0sc0JBQXNCO09BRTlDLGNBQWMsTUFBTSxxQ0FBcUM7T0FFekQsYUFBYSxNQUFNLHFCQUFxQjtPQUN4QyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQsNkJBQTZCLGtCQUFrQjtJQUN0QyxNQUFNLENBQUMsS0FBZTtRQUMzQixhQUFhLENBQUMsbUJBQW1CLENBQWdCLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQztZQUM5RyxLQUFLLENBQUMsT0FBTyxDQUFDLHdDQUF3QyxFQUFFLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ2hHLEtBQUssQ0FBQyxPQUFPLENBQUMsdUNBQXVDLEVBQUUsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDN0YsS0FBSyxDQUFDLE9BQU8sQ0FBQywyQ0FBMkMsRUFBRSxjQUFjLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUNyRyxLQUFLLENBQUMsT0FBTyxDQUFDLG1DQUFtQyxFQUFFLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3ZGLEtBQUssQ0FBQyxPQUFPLENBQUMsc0NBQXNDLEVBQUUsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDM0YsS0FBSyxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsRUFBRSxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDOUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsRUFBRSxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNwRixLQUFLLENBQUMsT0FBTyxDQUFDLG1DQUFtQyxFQUFFLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3BGLEtBQUssQ0FBQyxPQUFPLENBQUMsNEJBQTRCLEVBQUUsY0FBYyxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDdkYsS0FBSyxDQUFDLE9BQU8sQ0FBQyx5Q0FBeUMsRUFBRSxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNqRyxLQUFLLENBQUMsT0FBTyxDQUFDLHFDQUFxQyxFQUFFLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7QUFDSCxDQUFDO0FBRUQsZUFBZSxjQUFjLENBQUMiLCJmaWxlIjoiRGVidWcvTW9kdWxlcy9HTFNwZWNEZWJ1Z2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEZWJ1Z2dlck1vZHVsZUJhc2UgZnJvbSBcIi4vRGVidWdnZXJNb2R1bGVCYXNlXCI7XG5pbXBvcnQgRGVidWdnZXIgZnJvbSBcIi4uL0RlYnVnZ2VyXCI7XG5pbXBvcnQgR0xTcGVjUmVzb2x2ZXIgZnJvbSBcIi4uLy4uL0NvcmUvQ2FudmFzL0dML0dMU3BlY1Jlc29sdmVyXCI7XG5pbXBvcnQgQ2FudmFzTWFuYWdlciBmcm9tIFwiLi4vLi4vQ29yZS9DYW52YXMvQ2FudmFzTWFuYWdlclwiO1xuaW1wb3J0IEpUaHJlZUNvbnRleHQgZnJvbSBcIi4uLy4uL0pUaHJlZUNvbnRleHRcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbmNsYXNzIEdMU3BlY0RlYnVnZ2VyIGV4dGVuZHMgRGVidWdnZXJNb2R1bGVCYXNlIHtcbiAgcHVibGljIGF0dGFjaChkZWJ1ZzogRGVidWdnZXIpOiB2b2lkIHtcbiAgICBKVGhyZWVDb250ZXh0LmdldENvbnRleHRDb21wb25lbnQ8Q2FudmFzTWFuYWdlcj4oQ29udGV4dENvbXBvbmVudHMuQ2FudmFzTWFuYWdlcikuY2FudmFzTGlzdENoYW5nZWQuYWRkTGlzdGVuZXIoKCkgPT4ge1xuICAgICAgZGVidWcuc2V0SW5mbyhcIkdMU1BFQyA6IE1heGltdW0gY29tYmluZWQgdGV4dHVyZSB1bml0XCIsIEdMU3BlY1Jlc29sdmVyLk1heENvbWJpbmVkVGV4dHVyZVVuaXRzKTtcbiAgICAgIGRlYnVnLnNldEluZm8oXCJHTFNQRUMgOiBNYXhpbXVtIGN1YmVtYXAgdGV4dHVyZSBzaXplXCIsIEdMU3BlY1Jlc29sdmVyLk1heEN1YmVNYXBUZXh0dXJlU2l6ZSk7XG4gICAgICBkZWJ1Zy5zZXRJbmZvKFwiR0xTUEVDIDogTWF4aW11bSBmcmFnbWVudCB1bmlmb3JtIHZlY3RvcnNcIiwgR0xTcGVjUmVzb2x2ZXIuTWF4RnJhZ21lbnRVbmlmb3JtVmVjdG9ycyk7XG4gICAgICBkZWJ1Zy5zZXRJbmZvKFwiR0xTUEVDIDogTWF4aW11bSByZWRlcmJ1ZmZlciBzaXplXCIsIEdMU3BlY1Jlc29sdmVyLk1heFJlbmRlcmJ1ZmZlclNpemUpO1xuICAgICAgZGVidWcuc2V0SW5mbyhcIkdMU1BFQyA6IE1heGltdW0gdGV4dHVyZSBpbWFnZSB1bml0c1wiLCBHTFNwZWNSZXNvbHZlci5NYXhUZXh0dXJlSW1hZ2VVbml0cyk7XG4gICAgICBkZWJ1Zy5zZXRJbmZvKFwiR0xTUEVDIDogTWF4aW11bSB0ZXh0dXJlIHNpemVcIiwgR0xTcGVjUmVzb2x2ZXIuTWF4VGV4dHVyZVNpemUpO1xuICAgICAgZGVidWcuc2V0SW5mbyhcIkdMU1BFQyA6IE1heGltdW0gdmFyeWluZyB2ZWN0b3JzXCIsIEdMU3BlY1Jlc29sdmVyLk1heFZhcnlpbmdWZWN0b3JzKTtcbiAgICAgIGRlYnVnLnNldEluZm8oXCJHTFNQRUMgOiBNYXhpbXVtIHZlcnRleCBhdHRyaWJ1dGVcIiwgR0xTcGVjUmVzb2x2ZXIuTWF4VmVydGV4QXR0cmlicyk7XG4gICAgICBkZWJ1Zy5zZXRJbmZvKFwiR0xTUEVDIDogTWF4aW11bSBWVEYgdW5pdHNcIiwgR0xTcGVjUmVzb2x2ZXIuTWF4VmVydGV4VGV4dHVyZUltYWdlVW5pdHMpO1xuICAgICAgZGVidWcuc2V0SW5mbyhcIkdMU1BFQyA6IE1heGltdW0gdmVydGV4IHVuaWZvcm0gdmVjdG9yc1wiLCBHTFNwZWNSZXNvbHZlci5NYXhWZXJ0ZXhVbmlmb3JtVmVjdG9ycyk7XG4gICAgICBkZWJ1Zy5zZXRJbmZvKFwiR0xTUEVDIDogTWF4aW11bSB2aWV3cG9ydCBkaW1lbnNpb25cIiwgR0xTcGVjUmVzb2x2ZXIuTWF4Vmlld3BvcnREaW1zKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHTFNwZWNEZWJ1Z2dlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

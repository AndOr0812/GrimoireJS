import JThreeObject from "../../Base/JThreeObject";
import JThreeCollection from "../../Base/JThreeCollection";
import JThreeObjectWithID from "../../Base/JThreeObjectWithID";
/**
 * container class for storeing BehaviorNode and TargetNode
 */
class BehaviorNodePair extends JThreeObjectWithID {
    constructor(behavior, target) {
        super(behavior.ID);
        this._behavior = behavior;
        this._targetNode = target;
    }
    /**
     * getter for component node
     */
    get Behavior() {
        return this._behavior;
    }
    /**
     * getter for target node
     */
    get Target() {
        return this._targetNode;
    }
}
class BehaviorRunner extends JThreeObject {
    constructor(...args) {
        super(...args);
        this._dictionary = new JThreeCollection();
        this._sortedBehavior = [];
    }
    addBehavior(node, target) {
        const componentPair = new BehaviorNodePair(node, target);
        this._dictionary.insert(componentPair);
        this._sortedBehavior.push(componentPair);
        this._sortBehaviors();
        if (!node.awaken) {
            node.awake.call(node, target);
        }
    }
    executeForAllBehaviors(behaviorName) {
        this._sortedBehavior.forEach(v => {
            if (v.Behavior.enabled) {
                v.Behavior[behaviorName](v.Target);
            }
        });
    }
    _sortBehaviors() {
        this._sortedBehavior.sort((v1, v2) => v1.Behavior.order - v2.Behavior.order);
    }
}
export default BehaviorRunner;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvbWwvQmVoYXZpb3JzL0JlaGF2aW9yUnVubmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLFlBQVksTUFBTSx5QkFBeUI7T0FDM0MsZ0JBQWdCLE1BQU0sNkJBQTZCO09BR25ELGtCQUFrQixNQUFNLCtCQUErQjtBQUM5RDs7R0FFRztBQUNILCtCQUErQixrQkFBa0I7SUFXL0MsWUFBWSxRQUFzQixFQUFFLE1BQXdCO1FBQzFELE1BQU0sUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO0lBQzVCLENBQUM7SUFDRDs7T0FFRztJQUNILElBQVcsUUFBUTtRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFXLE1BQU07UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0FBQ0gsQ0FBQztBQUVELDZCQUE2QixZQUFZO0lBQXpDO1FBQTZCLGVBQVk7UUFDL0IsZ0JBQVcsR0FBdUMsSUFBSSxnQkFBZ0IsRUFBb0IsQ0FBQztRQUUzRixvQkFBZSxHQUF1QixFQUFFLENBQUM7SUF1Qm5ELENBQUM7SUFyQlEsV0FBVyxDQUFDLElBQWtCLEVBQUUsTUFBd0I7UUFDN0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLENBQUM7SUFDSCxDQUFDO0lBRU0sc0JBQXNCLENBQUMsWUFBb0I7UUFDaEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9FLENBQUM7QUFDSCxDQUFDO0FBQ0QsZUFBZSxjQUFjLENBQUMiLCJmaWxlIjoiR29tbC9CZWhhdmlvcnMvQmVoYXZpb3JSdW5uZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlRocmVlT2JqZWN0IGZyb20gXCIuLi8uLi9CYXNlL0pUaHJlZU9iamVjdFwiO1xuaW1wb3J0IEpUaHJlZUNvbGxlY3Rpb24gZnJvbSBcIi4uLy4uL0Jhc2UvSlRocmVlQ29sbGVjdGlvblwiO1xuaW1wb3J0IEJlaGF2aW9yTm9kZSBmcm9tIFwiLi4vTm9kZXMvQmVoYXZpb3JzL0JlaGF2aW9yTm9kZVwiO1xuaW1wb3J0IEdvbWxUcmVlTm9kZUJhc2UgZnJvbSBcIi4uL0dvbWxUcmVlTm9kZUJhc2VcIjtcbmltcG9ydCBKVGhyZWVPYmplY3RXaXRoSUQgZnJvbSBcIi4uLy4uL0Jhc2UvSlRocmVlT2JqZWN0V2l0aElEXCI7XG4vKipcbiAqIGNvbnRhaW5lciBjbGFzcyBmb3Igc3RvcmVpbmcgQmVoYXZpb3JOb2RlIGFuZCBUYXJnZXROb2RlXG4gKi9cbmNsYXNzIEJlaGF2aW9yTm9kZVBhaXIgZXh0ZW5kcyBKVGhyZWVPYmplY3RXaXRoSUQge1xuICAvKipcbiAgICogQmVoYXZpb3J0Tm9kZSBjb250YWluIHRoZSBhcmd1bWVudHMgb2YgYmVoYXZpb3IuXG4gICAqL1xuICBwcml2YXRlIF9iZWhhdmlvcjogQmVoYXZpb3JOb2RlO1xuXG4gIC8qKlxuICAgKiBUYXJnZXROb2RlIGNvbnRhaW4gdGhlIENvbXBvbmVudE5vZGVcbiAgICovXG4gIHByaXZhdGUgX3RhcmdldE5vZGU6IEdvbWxUcmVlTm9kZUJhc2U7XG5cbiAgY29uc3RydWN0b3IoYmVoYXZpb3I6IEJlaGF2aW9yTm9kZSwgdGFyZ2V0OiBHb21sVHJlZU5vZGVCYXNlKSB7XG4gICAgc3VwZXIoYmVoYXZpb3IuSUQpO1xuICAgIHRoaXMuX2JlaGF2aW9yID0gYmVoYXZpb3I7XG4gICAgdGhpcy5fdGFyZ2V0Tm9kZSA9IHRhcmdldDtcbiAgfVxuICAvKipcbiAgICogZ2V0dGVyIGZvciBjb21wb25lbnQgbm9kZVxuICAgKi9cbiAgcHVibGljIGdldCBCZWhhdmlvcigpOiBCZWhhdmlvck5vZGUge1xuICAgIHJldHVybiB0aGlzLl9iZWhhdmlvcjtcbiAgfVxuICAvKipcbiAgICogZ2V0dGVyIGZvciB0YXJnZXQgbm9kZVxuICAgKi9cbiAgcHVibGljIGdldCBUYXJnZXQoKTogR29tbFRyZWVOb2RlQmFzZSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldE5vZGU7XG4gIH1cbn1cblxuY2xhc3MgQmVoYXZpb3JSdW5uZXIgZXh0ZW5kcyBKVGhyZWVPYmplY3Qge1xuICBwcml2YXRlIF9kaWN0aW9uYXJ5OiBKVGhyZWVDb2xsZWN0aW9uPEJlaGF2aW9yTm9kZVBhaXI+ID0gbmV3IEpUaHJlZUNvbGxlY3Rpb248QmVoYXZpb3JOb2RlUGFpcj4oKTtcblxuICBwcml2YXRlIF9zb3J0ZWRCZWhhdmlvcjogQmVoYXZpb3JOb2RlUGFpcltdID0gW107XG5cbiAgcHVibGljIGFkZEJlaGF2aW9yKG5vZGU6IEJlaGF2aW9yTm9kZSwgdGFyZ2V0OiBHb21sVHJlZU5vZGVCYXNlKTogdm9pZCB7XG4gICAgY29uc3QgY29tcG9uZW50UGFpciA9IG5ldyBCZWhhdmlvck5vZGVQYWlyKG5vZGUsIHRhcmdldCk7XG4gICAgdGhpcy5fZGljdGlvbmFyeS5pbnNlcnQoY29tcG9uZW50UGFpcik7XG4gICAgdGhpcy5fc29ydGVkQmVoYXZpb3IucHVzaChjb21wb25lbnRQYWlyKTtcbiAgICB0aGlzLl9zb3J0QmVoYXZpb3JzKCk7XG4gICAgaWYgKCFub2RlLmF3YWtlbikge1xuICAgICAgbm9kZS5hd2FrZS5jYWxsKG5vZGUsIHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGV4ZWN1dGVGb3JBbGxCZWhhdmlvcnMoYmVoYXZpb3JOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9zb3J0ZWRCZWhhdmlvci5mb3JFYWNoKHYgPT4ge1xuICAgICAgaWYgKHYuQmVoYXZpb3IuZW5hYmxlZCkge1xuICAgICAgICB2LkJlaGF2aW9yW2JlaGF2aW9yTmFtZV0odi5UYXJnZXQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfc29ydEJlaGF2aW9ycygpOiB2b2lkIHtcbiAgICB0aGlzLl9zb3J0ZWRCZWhhdmlvci5zb3J0KCh2MSwgdjIpID0+IHYxLkJlaGF2aW9yLm9yZGVyIC0gdjIuQmVoYXZpb3Iub3JkZXIpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBCZWhhdmlvclJ1bm5lcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

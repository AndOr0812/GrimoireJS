import JThreeObject from "../Base/JThreeObject";
import GomlNodeDictionary from "../Goml/GomlNodeDictionary";
import ContextComponents from "../ContextComponents";
import BehaviorRegistry from "./Behaviors/BehaviorRegistry";
import GomlConfigurator from "./GomlConfigurator";
import BehaviorRunner from "./Behaviors/BehaviorRunner";
import JThreeContext from "../JThreeContext";
import AttributePromiseRegistry from "./AttributePromiseRegistry";
class NodeManager extends JThreeObject {
    constructor() {
        super();
        this.nodeRegister = new GomlNodeDictionary();
        this.attributePromiseRegistry = new AttributePromiseRegistry();
        this.nodesById = {};
        this.behaviorRegistry = new BehaviorRegistry();
        this.behaviorRunner = new BehaviorRunner();
        this.ready = false;
        /**
         * this configurator will load any tag information by require.
         */
        this.configurator = new GomlConfigurator();
        const loopManager = JThreeContext.getContextComponent(ContextComponents.LoopManager);
        loopManager.addAction(3000, () => this.update());
    }
    getContextComponentIndex() {
        return ContextComponents.NodeManager;
    }
    update() {
        if (!this.ready) {
            return;
        }
        this.gomlRoot.callRecursive((v) => v.update());
        this.behaviorRunner.executeForAllBehaviors("updateBehavior");
    }
    getNode(id) {
        return this.nodesById[id];
    }
    getNodeByElement(elem) {
        const id = elem.getAttribute("x-j3-id");
        return this.getNode(id);
    }
    getElementByNode(node) {
        return node.props.getProp("elem");
    }
    /**
     * get Node by query inside context
     * @param  {string}             query   query string.
     * @param  {GomlTreeNodeBase}   context target Node that search for by query.
     * @return {GomlTreeNodeBase[]}         result Node
     */
    getNodeByQuery(query, context) {
        const result = [];
        const target = context ? context.props.getProp("elem") : this.htmlRoot;
        const found = target.querySelectorAll(query);
        for (let index = 0; index < found.length; index++) {
            const id = found[index].getAttribute("x-j3-id");
            result.push(this.getNode(id));
        }
        return result;
    }
}
export default NodeManager;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvbWwvTm9kZU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sWUFBWSxNQUFNLHNCQUFzQjtPQUN4QyxrQkFBa0IsTUFBTSw0QkFBNEI7T0FHcEQsaUJBQWlCLE1BQU0sc0JBQXNCO09BQzdDLGdCQUFnQixNQUFNLDhCQUE4QjtPQUNwRCxnQkFBZ0IsTUFBTSxvQkFBb0I7T0FDMUMsY0FBYyxNQUFNLDRCQUE0QjtPQUNoRCxhQUFhLE1BQU0sa0JBQWtCO09BRXJDLHdCQUF3QixNQUFNLDRCQUE0QjtBQUVqRSwwQkFBMEIsWUFBWTtJQWVwQztRQUNFLE9BQU8sQ0FBQztRQWZILGlCQUFZLEdBQXVCLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQUM1RCw2QkFBd0IsR0FBNkIsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1FBR3BGLGNBQVMsR0FBMEMsRUFBRSxDQUFDO1FBQ3RELHFCQUFnQixHQUFxQixJQUFJLGdCQUFnQixFQUFFLENBQUM7UUFDNUQsbUJBQWMsR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUN0RCxVQUFLLEdBQVksS0FBSyxDQUFDO1FBRTlCOztXQUVHO1FBQ0ksaUJBQVksR0FBcUIsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBSTdELE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBYyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSx3QkFBd0I7UUFDN0IsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQztJQUN2QyxDQUFDO0lBRU0sTUFBTTtRQUNYLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBbUIsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVNLE9BQU8sQ0FBQyxFQUFVO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxJQUFpQjtRQUN2QyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxJQUFzQjtRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQWMsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksY0FBYyxDQUFDLEtBQWEsRUFBRSxPQUEwQjtRQUM3RCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFjLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDcEYsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ2xELE1BQU0sRUFBRSxHQUFpQixLQUFLLENBQUMsS0FBSyxDQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLENBQUM7QUFxQkgsQ0FBQztBQUVELGVBQWUsV0FBVyxDQUFDIiwiZmlsZSI6IkdvbWwvTm9kZU1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlRocmVlT2JqZWN0IGZyb20gXCIuLi9CYXNlL0pUaHJlZU9iamVjdFwiO1xuaW1wb3J0IEdvbWxOb2RlRGljdGlvbmFyeSBmcm9tIFwiLi4vR29tbC9Hb21sTm9kZURpY3Rpb25hcnlcIjtcbmltcG9ydCBHb21sVHJlZU5vZGVCYXNlIGZyb20gXCIuLi9Hb21sL0dvbWxUcmVlTm9kZUJhc2VcIjtcbmltcG9ydCBJQ29udGV4dENvbXBvbmVudCBmcm9tIFwiLi4vSUNvbnRleHRDb21wb25lbnRcIjtcbmltcG9ydCBDb250ZXh0Q29tcG9uZW50cyBmcm9tIFwiLi4vQ29udGV4dENvbXBvbmVudHNcIjtcbmltcG9ydCBCZWhhdmlvclJlZ2lzdHJ5IGZyb20gXCIuL0JlaGF2aW9ycy9CZWhhdmlvclJlZ2lzdHJ5XCI7XG5pbXBvcnQgR29tbENvbmZpZ3VyYXRvciBmcm9tIFwiLi9Hb21sQ29uZmlndXJhdG9yXCI7XG5pbXBvcnQgQmVoYXZpb3JSdW5uZXIgZnJvbSBcIi4vQmVoYXZpb3JzL0JlaGF2aW9yUnVubmVyXCI7XG5pbXBvcnQgSlRocmVlQ29udGV4dCBmcm9tIFwiLi4vSlRocmVlQ29udGV4dFwiO1xuaW1wb3J0IExvb3BNYW5hZ2VyIGZyb20gXCIuLi9Db3JlL0xvb3BNYW5hZ2VyXCI7XG5pbXBvcnQgQXR0cmlidXRlUHJvbWlzZVJlZ2lzdHJ5IGZyb20gXCIuL0F0dHJpYnV0ZVByb21pc2VSZWdpc3RyeVwiO1xuXG5jbGFzcyBOb2RlTWFuYWdlciBleHRlbmRzIEpUaHJlZU9iamVjdCBpbXBsZW1lbnRzIElDb250ZXh0Q29tcG9uZW50IHtcbiAgcHVibGljIG5vZGVSZWdpc3RlcjogR29tbE5vZGVEaWN0aW9uYXJ5ID0gbmV3IEdvbWxOb2RlRGljdGlvbmFyeSgpO1xuICBwdWJsaWMgYXR0cmlidXRlUHJvbWlzZVJlZ2lzdHJ5OiBBdHRyaWJ1dGVQcm9taXNlUmVnaXN0cnkgPSBuZXcgQXR0cmlidXRlUHJvbWlzZVJlZ2lzdHJ5KCk7XG4gIHB1YmxpYyBnb21sUm9vdDogR29tbFRyZWVOb2RlQmFzZTtcbiAgcHVibGljIGh0bWxSb290OiBIVE1MRWxlbWVudDtcbiAgcHVibGljIG5vZGVzQnlJZDoge1tub2RlSWQ6IHN0cmluZ106IEdvbWxUcmVlTm9kZUJhc2V9ID0gIHt9O1xuICBwdWJsaWMgYmVoYXZpb3JSZWdpc3RyeTogQmVoYXZpb3JSZWdpc3RyeSA9IG5ldyBCZWhhdmlvclJlZ2lzdHJ5KCk7XG4gIHB1YmxpYyBiZWhhdmlvclJ1bm5lcjogQmVoYXZpb3JSdW5uZXIgPSBuZXcgQmVoYXZpb3JSdW5uZXIoKTtcbiAgcHVibGljIHJlYWR5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIHRoaXMgY29uZmlndXJhdG9yIHdpbGwgbG9hZCBhbnkgdGFnIGluZm9ybWF0aW9uIGJ5IHJlcXVpcmUuXG4gICAqL1xuICBwdWJsaWMgY29uZmlndXJhdG9yOiBHb21sQ29uZmlndXJhdG9yID0gbmV3IEdvbWxDb25maWd1cmF0b3IoKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IGxvb3BNYW5hZ2VyID0gSlRocmVlQ29udGV4dC5nZXRDb250ZXh0Q29tcG9uZW50PExvb3BNYW5hZ2VyPihDb250ZXh0Q29tcG9uZW50cy5Mb29wTWFuYWdlcik7XG4gICAgbG9vcE1hbmFnZXIuYWRkQWN0aW9uKDMwMDAsICgpID0+IHRoaXMudXBkYXRlKCkpO1xuICB9XG5cbiAgcHVibGljIGdldENvbnRleHRDb21wb25lbnRJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiBDb250ZXh0Q29tcG9uZW50cy5Ob2RlTWFuYWdlcjtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnJlYWR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZ29tbFJvb3QuY2FsbFJlY3Vyc2l2ZSgodjogR29tbFRyZWVOb2RlQmFzZSkgPT4gdi51cGRhdGUoKSk7XG4gICAgdGhpcy5iZWhhdmlvclJ1bm5lci5leGVjdXRlRm9yQWxsQmVoYXZpb3JzKFwidXBkYXRlQmVoYXZpb3JcIik7XG4gIH1cblxuICBwdWJsaWMgZ2V0Tm9kZShpZDogc3RyaW5nKTogR29tbFRyZWVOb2RlQmFzZSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXNCeUlkW2lkXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXROb2RlQnlFbGVtZW50KGVsZW06IEhUTUxFbGVtZW50KTogR29tbFRyZWVOb2RlQmFzZSB7XG4gICAgY29uc3QgaWQgPSBlbGVtLmdldEF0dHJpYnV0ZShcIngtajMtaWRcIik7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZShpZCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RWxlbWVudEJ5Tm9kZShub2RlOiBHb21sVHJlZU5vZGVCYXNlKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiBub2RlLnByb3BzLmdldFByb3A8SFRNTEVsZW1lbnQ+KFwiZWxlbVwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgTm9kZSBieSBxdWVyeSBpbnNpZGUgY29udGV4dFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHF1ZXJ5ICAgcXVlcnkgc3RyaW5nLlxuICAgKiBAcGFyYW0gIHtHb21sVHJlZU5vZGVCYXNlfSAgIGNvbnRleHQgdGFyZ2V0IE5vZGUgdGhhdCBzZWFyY2ggZm9yIGJ5IHF1ZXJ5LlxuICAgKiBAcmV0dXJuIHtHb21sVHJlZU5vZGVCYXNlW119ICAgICAgICAgcmVzdWx0IE5vZGVcbiAgICovXG4gIHB1YmxpYyBnZXROb2RlQnlRdWVyeShxdWVyeTogc3RyaW5nLCBjb250ZXh0PzogR29tbFRyZWVOb2RlQmFzZSk6IEdvbWxUcmVlTm9kZUJhc2VbXSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgdGFyZ2V0ID0gY29udGV4dCA/IGNvbnRleHQucHJvcHMuZ2V0UHJvcDxIVE1MRWxlbWVudD4oXCJlbGVtXCIpIDogdGhpcy5odG1sUm9vdDtcbiAgICBjb25zdCBmb3VuZCA9IHRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZm91bmQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBpZCA9ICg8SFRNTEVsZW1lbnQ+Zm91bmRbaW5kZXhdKS5nZXRBdHRyaWJ1dGUoXCJ4LWozLWlkXCIpO1xuICAgICAgcmVzdWx0LnB1c2godGhpcy5nZXROb2RlKGlkKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBwdWJsaWMgaW5zdGFuY2lhdGVUZW1wbGF0ZSh0ZW1wbGF0ZTogc3RyaW5nLCBwYXJlbnROb2RlOiBHb21sVHJlZU5vZGVCYXNlKSB7XG4gIC8vICAgdmFyIHRlbXBsYXRlSW5FbGVtcyA9IChuZXcgRE9NUGFyc2VyKCkpLnBhcnNlRnJvbVN0cmluZyh0ZW1wbGF0ZSwgJ3RleHQveG1sJykuZG9jdW1lbnRFbGVtZW50O1xuICAvLyAgIHRoaXMuYXBwZW5kKHRlbXBsYXRlSW5FbGVtcywgcGFyZW50Tm9kZS5FbGVtZW50LCBmYWxzZSk7XG4gIC8vIH1cblxuICAvLyBwdWJsaWMgYXBwZW5kKHNvdXJjZTogSFRNTEVsZW1lbnQsIHBhcmVudDogSFRNTEVsZW1lbnQsIG5lZWRMb2FkPzogYm9vbGVhbikge1xuICAvLyAgIGlmICh0eXBlb2YgbmVlZExvYWQgPT09ICd1bmRlZmluZWQnKSBuZWVkTG9hZCA9IHRydWU7XG4gIC8vICAgdmFyIGlkID0gcGFyZW50LmdldEF0dHJpYnV0ZShcIngtajMtaWRcIik7XG4gIC8vICAgdmFyIHBhcmVudE9mR29tbCA9IHRoaXMuTm9kZXNCeUlkLmdldChpZCk7XG4gIC8vICAgdmFyIGxvYWRlZEdvbWxzPUdvbWxQYXJzZXIucGFyc2VDaGlsZChwYXJlbnRPZkdvbWwsc291cmNlLHRoaXMuY29uZmlndXJhdG9yKVxuICAvLyAgIHRoaXMubG9hZFRhZ3MobG9hZGVkR29tbHMpO1xuICAvLyB2YXIgbG9hZGVkR29tbHMgPSBbXTtcbiAgLy8gdGhpcy5wYXJzZUNoaWxkKHBhcmVudE9mR29tbCwgc291cmNlLCAodikgPT4geyBsb2FkZWRHb21scy5wdXNoKHYpIH0pO1xuICAvLyBpZiAoIW5lZWRMb2FkKSByZXR1cm47XG4gIC8vIHRoaXMuZWFjaE5vZGUodj0+IHYuYmVmb3JlTG9hZCgpLCBsb2FkZWRHb21scyk7XG4gIC8vIHRoaXMuZWFjaE5vZGUodj0+IHYuTG9hZCgpLCBsb2FkZWRHb21scyk7XG4gIC8vIHRoaXMuZWFjaE5vZGUodj0+IHYuYWZ0ZXJMb2FkKCksIGxvYWRlZEdvbWxzKTtcbiAgLy8gdGhpcy5lYWNoTm9kZSh2PT4gdi5hdHRyaWJ1dGVzLmFwcGx5RGVmYXVsdFZhbHVlKCksIGxvYWRlZEdvbWxzKTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlTWFuYWdlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

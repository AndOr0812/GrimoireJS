import J3Object from "../J3Object";
import J3ObjectBase from "../J3ObjectBase";
import isString from "lodash.isstring";
import isUndefined from "lodash.isundefined";
import isPlainObject from "lodash.isplainobject";
import isFunction from "lodash.isfunction";
class GeneralAttribute extends J3ObjectBase {
    static _setAttr(node, attributeName, value) {
        if (node.attributes.isDefined(attributeName)) {
            node.attributes.setValue(attributeName, value);
        }
        else {
            const gomlAttribute = node.attributes.reserveAttribute(attributeName, value);
            gomlAttribute.on("changed", (ga) => {
                node.props.getProp("elem").setAttribute(attributeName, ga.Value);
            });
            gomlAttribute.notifyValueChanged();
        }
    }
    attr(argu0, argu1) {
        if (this.length === 0) {
            throw new Error("No target");
        }
        if (isString(argu0)) {
            switch (true) {
                case (isUndefined(argu1)):
                    return this[0].attributes.getValueStr(argu0);
                case (isFunction(argu1)):
                    throw new Error("Not implemented yet");
                default:
                    J3Object.each(this, (i, node) => {
                        GeneralAttribute._setAttr(node, argu0, argu1);
                    });
                    return this;
            }
        }
        else if (isPlainObject(argu0)) {
            Object.keys(argu0).forEach((attributeName) => {
                GeneralAttribute._setAttr(this[0], attributeName, argu0[attributeName]);
            });
            return this;
        }
        else {
            throw new Error("Argument type is not correct");
        }
    }
    attrObj(argu0, argu1) {
        if (this.length === 0) {
            throw new Error("No target");
        }
        if (isString(argu0)) {
            switch (true) {
                case (isUndefined(argu1)):
                    return this[0].attributes.getValue(argu0);
                default:
                    J3Object.each(this, (i, node) => {
                        GeneralAttribute._setAttr(node, argu0, argu1);
                    });
                    return this;
            }
        }
        else if (isPlainObject(argu0)) {
            Object.keys(argu0).forEach((attributeName) => {
                GeneralAttribute._setAttr(this[0], attributeName, argu0[attributeName]);
            });
            return this;
        }
        else {
            throw new Error("Argument type is not correct");
        }
    }
}
export default GeneralAttribute;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkludGVyZmFjZS9NYW5pcHVsYXRpb24vR2VuZXJhbEF0dHJpYnV0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sUUFBUSxNQUFNLGFBQWE7T0FDM0IsWUFBWSxNQUFNLGlCQUFpQjtPQUVuQyxRQUFRLE1BQU0saUJBQWlCO09BQy9CLFdBQVcsTUFBTSxvQkFBb0I7T0FDckMsYUFBYSxNQUFNLHNCQUFzQjtPQUN6QyxVQUFVLE1BQU0sbUJBQW1CO0FBRTFDLCtCQUErQixZQUFZO0lBQ3pDLE9BQWUsUUFBUSxDQUFDLElBQXNCLEVBQUUsYUFBcUIsRUFBRSxLQUFVO1FBQy9FLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0UsYUFBYSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBYyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRixDQUFDLENBQUMsQ0FBQztZQUNILGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JDLENBQUM7SUFDSCxDQUFDO0lBT00sSUFBSSxDQUFDLEtBQVUsRUFBRSxLQUFXO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9CLENBQUM7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IiwiZmlsZSI6IkludGVyZmFjZS9NYW5pcHVsYXRpb24vR2VuZXJhbEF0dHJpYnV0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSjNPYmplY3QgZnJvbSBcIi4uL0ozT2JqZWN0XCI7XG5pbXBvcnQgSjNPYmplY3RCYXNlIGZyb20gXCIuLi9KM09iamVjdEJhc2VcIjtcbmltcG9ydCBHb21sVHJlZU5vZGVCYXNlIGZyb20gXCIuLi8uLi9Hb21sL0dvbWxUcmVlTm9kZUJhc2VcIjtcbmltcG9ydCBpc1N0cmluZyBmcm9tIFwibG9kYXNoLmlzc3RyaW5nXCI7XG5pbXBvcnQgaXNVbmRlZmluZWQgZnJvbSBcImxvZGFzaC5pc3VuZGVmaW5lZFwiO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSBcImxvZGFzaC5pc3BsYWlub2JqZWN0XCI7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tIFwibG9kYXNoLmlzZnVuY3Rpb25cIjtcblxuY2xhc3MgR2VuZXJhbEF0dHJpYnV0ZSBleHRlbmRzIEozT2JqZWN0QmFzZSB7XG4gIHByaXZhdGUgc3RhdGljIF9zZXRBdHRyKG5vZGU6IEdvbWxUcmVlTm9kZUJhc2UsIGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGlmIChub2RlLmF0dHJpYnV0ZXMuaXNEZWZpbmVkKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICBub2RlLmF0dHJpYnV0ZXMuc2V0VmFsdWUoYXR0cmlidXRlTmFtZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBnb21sQXR0cmlidXRlID0gbm9kZS5hdHRyaWJ1dGVzLnJlc2VydmVBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgdmFsdWUpO1xuICAgICAgZ29tbEF0dHJpYnV0ZS5vbihcImNoYW5nZWRcIiwgKGdhKSA9PiB7XG4gICAgICAgIG5vZGUucHJvcHMuZ2V0UHJvcDxIVE1MRWxlbWVudD4oXCJlbGVtXCIpLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBnYS5WYWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGdvbWxBdHRyaWJ1dGUubm90aWZ5VmFsdWVDaGFuZ2VkKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGF0dHIoYXR0cmlidXRlTmFtZTogc3RyaW5nKTogc3RyaW5nO1xuICBwdWJsaWMgYXR0cihhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBKM09iamVjdDtcbiAgcHVibGljIGF0dHIoYXR0cmlidXRlczogT2JqZWN0KTogSjNPYmplY3Q7XG4gIHB1YmxpYyBhdHRyKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgZnVuYzogKG51bWJlciwgc3RyaW5nKSA9PiBzdHJpbmcpOiBKM09iamVjdDtcbiAgcHVibGljIGF0dHIoYXR0cmlidXRlTmFtZTogc3RyaW5nLCBmdW5jOiAobnVtYmVyLCBzdHJpbmcpID0+IG51bWJlcik6IEozT2JqZWN0O1xuICBwdWJsaWMgYXR0cihhcmd1MDogYW55LCBhcmd1MT86IGFueSk6IGFueSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB0YXJnZXRcIik7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhhcmd1MCkpIHtcbiAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlIChpc1VuZGVmaW5lZChhcmd1MSkpOlxuICAgICAgICAgIHJldHVybiAoPEdvbWxUcmVlTm9kZUJhc2U+dGhpc1swXSkuYXR0cmlidXRlcy5nZXRWYWx1ZVN0cig8c3RyaW5nPmFyZ3UwKTtcbiAgICAgICAgY2FzZSAoaXNGdW5jdGlvbihhcmd1MSkpOlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCB5ZXRcIik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgSjNPYmplY3QuZWFjaCg8YW55PnRoaXMsIChpLCBub2RlKSA9PiB7XG4gICAgICAgICAgICBHZW5lcmFsQXR0cmlidXRlLl9zZXRBdHRyKG5vZGUsIDxzdHJpbmc+YXJndTAsIGFyZ3UxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoYXJndTApKSB7XG4gICAgICBPYmplY3Qua2V5cyg8T2JqZWN0PmFyZ3UwKS5mb3JFYWNoKChhdHRyaWJ1dGVOYW1lKSA9PiB7XG4gICAgICAgIEdlbmVyYWxBdHRyaWJ1dGUuX3NldEF0dHIodGhpc1swXSwgYXR0cmlidXRlTmFtZSwgYXJndTBbYXR0cmlidXRlTmFtZV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgdHlwZSBpcyBub3QgY29ycmVjdFwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXR0ck9iaihhdHRyaWJ1dGVOYW1lOiBzdHJpbmcpOiBhbnk7XG4gIHB1YmxpYyBhdHRyT2JqKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IEozT2JqZWN0O1xuICBwdWJsaWMgYXR0ck9iaihhdHRyaWJ1dGVzOiBPYmplY3QpOiBKM09iamVjdDtcbiAgcHVibGljIGF0dHJPYmooYXJndTA6IGFueSwgYXJndTE/OiBhbnkpOiBhbnkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdGFyZ2V0XCIpO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcoYXJndTApKSB7XG4gICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgY2FzZSAoaXNVbmRlZmluZWQoYXJndTEpKTpcbiAgICAgICAgICByZXR1cm4gKDxHb21sVHJlZU5vZGVCYXNlPnRoaXNbMF0pLmF0dHJpYnV0ZXMuZ2V0VmFsdWUoPHN0cmluZz5hcmd1MCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgSjNPYmplY3QuZWFjaCg8YW55PnRoaXMsIChpLCBub2RlKSA9PiB7XG4gICAgICAgICAgICBHZW5lcmFsQXR0cmlidXRlLl9zZXRBdHRyKG5vZGUsIDxzdHJpbmc+YXJndTAsIGFyZ3UxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoYXJndTApKSB7XG4gICAgICBPYmplY3Qua2V5cyg8T2JqZWN0PmFyZ3UwKS5mb3JFYWNoKChhdHRyaWJ1dGVOYW1lKSA9PiB7XG4gICAgICAgIEdlbmVyYWxBdHRyaWJ1dGUuX3NldEF0dHIodGhpc1swXSwgYXR0cmlidXRlTmFtZSwgYXJndTBbYXR0cmlidXRlTmFtZV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgdHlwZSBpcyBub3QgY29ycmVjdFwiKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR2VuZXJhbEF0dHJpYnV0ZTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

import Vector3 from "./Vector3";
/**
 * Axis-Aligned Bounding Box implementation
 */
class AABB {
    /**
     * Width of this AABB
     */
    get Width() {
        return Math.abs(this.pointLBF.X - this.pointRTN.X);
    }
    /**
     * Height of this AABB
     */
    get Height() {
        return Math.abs(this.pointLBF.Y - this.pointRTN.Y);
    }
    /**
     * Distance of this AABB
     */
    get Distance() {
        return Math.abs(this.pointLBF.Z - this.pointRTN.Z);
    }
    /**
     * Calculate new bounding box with considering the new point is included.
     * @param  {Vector3} newPoint the point that will be considered that it should be in this bounding box.
     */
    expandAABB(newPoint) {
        if (this.pointLBF == null) {
            // assume this is first time to be used this AABB instance
            this.pointLBF = Vector3.copy(newPoint);
            this.pointRTN = Vector3.copy(newPoint);
        }
        this.pointLBF = Vector3.min(newPoint, this.pointLBF);
        this.pointRTN = Vector3.max(newPoint, this.pointRTN);
    }
    /**
     * Clean up this AABB with initial value.
     */
    clear() {
        this.pointLBF = null;
        this.pointRTN = null;
    }
    toMathematicaCuboid() {
        return `Cuboid[${this.pointLBF.toMathematicaString()},${this.pointRTN.toMathematicaString()}]`;
    }
}
export default AABB;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hdGgvQUFCQi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxPQUFPLE1BQU0sV0FBVztBQUMvQjs7R0FFRztBQUNIO0lBYUU7O09BRUc7SUFDSCxJQUFXLEtBQUs7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsTUFBTTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxRQUFRO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUdEOzs7T0FHRztJQUNJLFVBQVUsQ0FBQyxRQUFpQjtRQUNqQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUIsMERBQTBEO1lBQzFELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7T0FFRztJQUNJLEtBQUs7UUFDVixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRU0sbUJBQW1CO1FBQ3hCLE1BQU0sQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFHLEdBQUcsQ0FBQztJQUNuRyxDQUFDO0FBQ0gsQ0FBQztBQUVELGVBQWUsSUFBSSxDQUFDIiwiZmlsZSI6Ik1hdGgvQUFCQi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzIGZyb20gXCIuL1ZlY3RvcjNcIjtcbi8qKlxuICogQXhpcy1BbGlnbmVkIEJvdW5kaW5nIEJveCBpbXBsZW1lbnRhdGlvblxuICovXG5jbGFzcyBBQUJCIHtcbiAgLyoqXG4gICAqIEFBQkIncyB2ZXJ0ZXggaW4gbW9zdCBsZWZ0LG1vc3QgYm90dG9tLG1vc3QgZmFyLlxuICAgKiBAdHlwZSB7VmVjdG9yM31cbiAgICovXG4gIHB1YmxpYyBwb2ludExCRjogVmVjdG9yMztcblxuICAvKipcbiAgKiBBQUJCJ3MgdmVydGV4IGluIG1vc3QgcmlnaHQsbW9zdCB0b3AsbW9zdCBuZWFyLlxuICAqIEB0eXBlIHtWZWN0b3IzfVxuICAqL1xuICBwdWJsaWMgcG9pbnRSVE46IFZlY3RvcjM7XG5cbiAgLyoqXG4gICAqIFdpZHRoIG9mIHRoaXMgQUFCQlxuICAgKi9cbiAgcHVibGljIGdldCBXaWR0aCgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnModGhpcy5wb2ludExCRi5YIC0gdGhpcy5wb2ludFJUTi5YKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWlnaHQgb2YgdGhpcyBBQUJCXG4gICAqL1xuICBwdWJsaWMgZ2V0IEhlaWdodCgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnModGhpcy5wb2ludExCRi5ZIC0gdGhpcy5wb2ludFJUTi5ZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXN0YW5jZSBvZiB0aGlzIEFBQkJcbiAgICovXG4gIHB1YmxpYyBnZXQgRGlzdGFuY2UoKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHRoaXMucG9pbnRMQkYuWiAtIHRoaXMucG9pbnRSVE4uWik7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgbmV3IGJvdW5kaW5nIGJveCB3aXRoIGNvbnNpZGVyaW5nIHRoZSBuZXcgcG9pbnQgaXMgaW5jbHVkZWQuXG4gICAqIEBwYXJhbSAge1ZlY3RvcjN9IG5ld1BvaW50IHRoZSBwb2ludCB0aGF0IHdpbGwgYmUgY29uc2lkZXJlZCB0aGF0IGl0IHNob3VsZCBiZSBpbiB0aGlzIGJvdW5kaW5nIGJveC5cbiAgICovXG4gIHB1YmxpYyBleHBhbmRBQUJCKG5ld1BvaW50OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucG9pbnRMQkYgPT0gbnVsbCkge1xuICAgICAgLy8gYXNzdW1lIHRoaXMgaXMgZmlyc3QgdGltZSB0byBiZSB1c2VkIHRoaXMgQUFCQiBpbnN0YW5jZVxuICAgICAgdGhpcy5wb2ludExCRiA9IFZlY3RvcjMuY29weShuZXdQb2ludCk7XG4gICAgICB0aGlzLnBvaW50UlROID0gVmVjdG9yMy5jb3B5KG5ld1BvaW50KTtcbiAgICB9XG5cbiAgICB0aGlzLnBvaW50TEJGID0gVmVjdG9yMy5taW4obmV3UG9pbnQsIHRoaXMucG9pbnRMQkYpO1xuICAgIHRoaXMucG9pbnRSVE4gPSBWZWN0b3IzLm1heChuZXdQb2ludCwgdGhpcy5wb2ludFJUTik7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgdGhpcyBBQUJCIHdpdGggaW5pdGlhbCB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLnBvaW50TEJGID0gbnVsbDtcbiAgICB0aGlzLnBvaW50UlROID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyB0b01hdGhlbWF0aWNhQ3Vib2lkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBDdWJvaWRbJHt0aGlzLnBvaW50TEJGLnRvTWF0aGVtYXRpY2FTdHJpbmcoKSB9LCR7dGhpcy5wb2ludFJUTi50b01hdGhlbWF0aWNhU3RyaW5nKCkgfV1gO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFBQkI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

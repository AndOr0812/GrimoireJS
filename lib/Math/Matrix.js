import MatrixBase from "./MatrixBase";
import Vector3 from "./Vector3";
import Vector4 from "./Vector4";
import { mat4, vec3, vec4, quat } from "gl-matrix";
class Matrix extends MatrixBase {
    constructor(arr) {
        super();
        if (arr) {
            this.rawElements = arr;
        }
        else {
            this.rawElements = mat4.create();
        }
    }
    static zero() {
        return new Matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
    static identity() {
        return new Matrix(mat4.create());
    }
    static fromElements(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        return new Matrix([m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33]);
    }
    static fromFunc(f) {
        return new Matrix([f(0, 0), f(1, 0), f(2, 0), f(3, 0), f(0, 1), f(1, 1), f(2, 1), f(3, 1), f(0, 2), f(1, 2), f(2, 2), f(3, 2), f(0, 3), f(1, 3), f(2, 3), f(3, 3)]);
    }
    static equals(m1, m2) {
        return Matrix.__elementEquals(m1, m2);
    }
    static add(m1, m2) {
        const mat = mat4.create();
        for (let i = 0; i < 16; i++) {
            mat[i] = m1.rawElements[i] + m2.rawElements[i];
        }
        return new Matrix(mat);
    }
    static subtract(m1, m2) {
        return Matrix.add(m1, Matrix.negate(m2));
    }
    static scalarMultiply(s, m) {
        const newMat = mat4.create();
        mat4.multiply(newMat, [s, 0, 0, 0, 0, s, 0, 0, 0, 0, s, 0, 0, 0, 0, s], m.rawElements);
        return new Matrix(newMat);
    }
    static multiply(m1, m2) {
        const newMat = mat4.create();
        return new Matrix(mat4.mul(newMat, m1.rawElements, m2.rawElements));
    }
    static trs(t, rot, s) {
        const newMat = mat4.create();
        const cacheMat = mat4.create();
        mat4.mul(newMat, mat4.translate(newMat, mat4.create(), t.rawElements), mat4.fromQuat(cacheMat, rot.rawElements));
        mat4.scale(newMat, newMat, s.rawElements);
        return new Matrix(newMat);
    }
    static negate(m) {
        return this.scalarMultiply(-1, m);
    }
    static transpose(m) {
        const newMat = mat4.create();
        return new Matrix(mat4.transpose(newMat, m.rawElements));
    }
    static transformPoint(m, t) {
        const newVec = vec3.create();
        vec3.transformMat4(newVec, t.rawElements, m.rawElements);
        return new Vector3(newVec);
    }
    static transformNormal(m, t) {
        const newVec = vec4.create();
        const trans = vec4.create();
        trans[0] = t.X;
        trans[1] = t.Y;
        trans[2] = t.Z;
        trans[3] = 0;
        vec4.transformMat4(newVec, trans, m.rawElements);
        return new Vector3(newVec[0], newVec[1], newVec[2]);
    }
    static transform(m, t) {
        const newVec = vec4.create();
        const trans = vec4.create();
        trans[0] = t.X;
        trans[1] = t.Y;
        trans[2] = t.Z;
        trans[3] = t.W;
        vec4.transformMat4(newVec, trans, m.rawElements);
        return new Vector4(newVec[0], newVec[1], newVec[2], newVec[3]);
    }
    /**
     * Retrieve determinant of passed matrix
     */
    static determinant(m) {
        return mat4.determinant(m.rawElements);
    }
    /**
     * Compute inverted passed matrix.
     */
    static inverse(m) {
        const newMat = mat4.create();
        return new Matrix(mat4.invert(newMat, m.rawElements));
    }
    /**
     * Generate linear translation transform matrix.
     */
    static translate(v) {
        const newMat = mat4.create();
        mat4.translate(newMat, newMat, v.rawElements);
        return new Matrix(newMat);
    }
    /**
     * Generate linear scaling transform matrix.
     */
    static scale(v) {
        const newMat = mat4.create();
        mat4.scale(newMat, newMat, v.rawElements);
        return new Matrix(newMat);
    }
    static rotateX(angle) {
        const newMat = mat4.create();
        mat4.rotateX(newMat, newMat, angle);
        return new Matrix(newMat);
    }
    static rotateY(angle) {
        const newMat = mat4.create();
        mat4.rotateY(newMat, newMat, angle);
        return new Matrix(newMat);
    }
    static rotateZ(angle) {
        const newMat = mat4.create();
        mat4.rotateZ(newMat, newMat, angle);
        return new Matrix(newMat);
    }
    static rotationQuaternion(quat_) {
        const quaternion = quat.create();
        const newMat = mat4.create();
        quat.normalize(quaternion, quat_.rawElements);
        mat4.fromQuat(newMat, quaternion);
        return new Matrix(newMat);
    }
    static frustum(left, right, bottom, top, near, far) {
        const newMat = mat4.create();
        mat4.frustum(newMat, left, right, bottom, top, near, far);
        return new Matrix(newMat);
    }
    static ortho(left, right, bottom, top, near, far) {
        const newMat = mat4.create();
        mat4.ortho(newMat, left, right, bottom, top, near, far);
        return new Matrix(newMat);
    }
    static perspective(fovy, aspect, near, far) {
        const newMat = mat4.create();
        mat4.perspective(newMat, fovy, aspect, near, far);
        return new Matrix(newMat);
    }
    static lookAt(eye, lookAt, up) {
        const newMat = mat4.create();
        mat4.lookAt(newMat, eye.rawElements, lookAt.rawElements, up.rawElements);
        return new Matrix(newMat);
    }
    getAt(row, colmun) {
        return this.rawElements[colmun * 4 + row];
    }
    setAt(row, colmun, val) {
        this.rawElements[colmun * 4 + row] = val;
    }
    getBySingleIndex(index) {
        return this.rawElements[index];
    }
    getColmun(col) {
        return new Vector4(this.rawElements[col * 4], this.rawElements[col * 4 + 1], this.rawElements[col * 4 + 2], this.rawElements[col * 4 + 3]);
    }
    /**
    * Get row
    * @params row [0-3]
    */
    getRow(row) {
        return new Vector4(this.rawElements[row], this.rawElements[row + 4], this.rawElements[row + 8], this.rawElements[row + 12]);
    }
    multiplyWith(m) {
        return Matrix.multiply(this, m);
    }
    toString() {
        return (`|${this.getBySingleIndex(0)} ${this.getBySingleIndex(4)} ${this.getBySingleIndex(8)} ${this.getBySingleIndex(12)}|\n
                 |${this.getBySingleIndex(1)} ${this.getBySingleIndex(5)} ${this.getBySingleIndex(9)} ${this.getBySingleIndex(13)}|\n
                 |${this.getBySingleIndex(2)} ${this.getBySingleIndex(6)} ${this.getBySingleIndex(10)} ${this.getBySingleIndex(14)}|\n
                 |${this.getBySingleIndex(3)} ${this.getBySingleIndex(7)} ${this.getBySingleIndex(11)} ${this.getBySingleIndex(15)}|`);
    }
    toMathematicaString() {
        return (`{{${this.getBySingleIndex(0)},${this.getBySingleIndex(4)},${this.getBySingleIndex(8)},${this.getBySingleIndex(12)}},
                  {${this.getBySingleIndex(1)},${this.getBySingleIndex(5)},${this.getBySingleIndex(9)},${this.getBySingleIndex(13)}},
                  {${this.getBySingleIndex(2)},${this.getBySingleIndex(6)},${this.getBySingleIndex(10)},${this.getBySingleIndex(14)}},
                  {${this.getBySingleIndex(3)},${this.getBySingleIndex(7)},${this.getBySingleIndex(11)},${this.getBySingleIndex(15)}}}`);
    }
    get ElementCount() { return 16; }
    get RowCount() { return 4; }
    get ColmunCount() { return 4; }
}
export default Matrix;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hdGgvTWF0cml4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUNPLFVBQVUsTUFBTSxjQUFjO09BQzlCLE9BQU8sTUFBTSxXQUFXO09BQ3hCLE9BQU8sTUFBTSxXQUFXO09BR3hCLEVBQU0sSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLE1BQU0sV0FBVztBQUNyRCxxQkFBcUIsVUFBVTtJQUU3QixZQUFZLEdBQWdCO1FBQzFCLE9BQU8sQ0FBQztRQUNSLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDUixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUN6QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQWMsSUFBSTtRQUNoQixNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxPQUFjLFFBQVE7UUFDcEIsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxPQUFjLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQ3ZHLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVELE9BQWMsUUFBUSxDQUFDLENBQWdDO1FBQ3JELE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RLLENBQUM7SUFFRCxPQUFjLE1BQU0sQ0FBQyxFQUFVLEVBQUUs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Q0FBQyxDQUFDLENBQUMsQ0FBQztBQUVoRCxDQUFDO0FBQ0QsZUFBZSxNQUFNLENBQUMiLCJmaWxlIjoiTWF0aC9NYXRyaXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBNYXRyaXhCYXNlIGZyb20gXCIuL01hdHJpeEJhc2VcIjtcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuL1ZlY3RvcjNcIjtcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuL1ZlY3RvcjRcIjtcbmltcG9ydCB7RnVuYzJ9IGZyb20gXCIuLi9CYXNlL0RlbGVnYXRlc1wiO1xuaW1wb3J0IFF1YXRlcm5pb24gZnJvbSBcIi4vUXVhdGVybmlvblwiO1xuaW1wb3J0IHtHTE0sIG1hdDQsIHZlYzMsIHZlYzQsIHF1YXR9IGZyb20gXCJnbC1tYXRyaXhcIjtcbmNsYXNzIE1hdHJpeCBleHRlbmRzIE1hdHJpeEJhc2Uge1xuXG4gIGNvbnN0cnVjdG9yKGFycj86IEdMTS5JQXJyYXkpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChhcnIpIHtcbiAgICAgIHRoaXMucmF3RWxlbWVudHMgPSBhcnI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmF3RWxlbWVudHMgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgemVybygpOiBNYXRyaXgge1xuICAgIHJldHVybiBuZXcgTWF0cml4KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGlkZW50aXR5KCk6IE1hdHJpeCB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgobWF0NC5jcmVhdGUoKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZyb21FbGVtZW50cyhtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpOiBNYXRyaXgge1xuICAgIHJldHVybiBuZXcgTWF0cml4KFttMDAsIG0xMCwgbTIwLCBtMzAsIG0wMSwgbTExLCBtMjEsIG0zMSwgbTAyLCBtMTIsIG0yMiwgbTMyLCBtMDMsIG0xMywgbTIzLCBtMzNdKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUZ1bmMoZjogRnVuYzI8bnVtYmVyLCBudW1iZXIsIG51bWJlcj4pOiBNYXRyaXgge1xuICAgIHJldHVybiBuZXcgTWF0cml4KFtmKDAsIDApLCBmKDEsIDApLCBmKDIsIDApLCBmKDMsIDApLCBmKDAsIDEpLCBmKDEsIDEpLCBmKDIsIDEpLCBmKDMsIDEpLCBmKDAsIDIpLCBmKDEsIDIpLCBmKDIsIDIpLCBmKDMsIDIpLCBmKDAsIDMpLCBmKDEsIDMpLCBmKDIsIDMpLCBmKDMsIDMpXSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGVxdWFscyhtMTogTWF0cml4LCBtMjogTWF0cml4KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIE1hdHJpeC5fX2VsZW1lbnRFcXVhbHMobTEsIG0yKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYWRkKG0xOiBNYXRyaXgsIG0yOiBNYXRyaXgpOiBNYXRyaXgge1xuICAgIGNvbnN0IG1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBtYXRbaV0gPSBtMS5yYXdFbGVtZW50c1tpXSArIG0yLnJhd0VsZW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChtYXQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzdWJ0cmFjdChtMTogTWF0cml4LCBtMjogTWF0cml4KTogTWF0cml4IHtcbiAgICByZXR1cm4gTWF0cml4LmFkZChtMSwgTWF0cml4Lm5lZ2F0ZShtMikpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzY2FsYXJNdWx0aXBseShzOiBudW1iZXIsIG06IE1hdHJpeCk6IE1hdHJpeCB7XG4gICAgY29uc3QgbmV3TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBtYXQ0Lm11bHRpcGx5KG5ld01hdCwgW3MsIDAsIDAsIDAsIDAsIHMsIDAsIDAsIDAsIDAsIHMsIDAsIDAsIDAsIDAsIHNdLCBtLnJhd0VsZW1lbnRzKTtcbiAgICByZXR1cm4gbmV3IE1hdHJpeChuZXdNYXQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBtdWx0aXBseShtMTogTWF0cml4LCBtMjogTWF0cml4KTogTWF0cml4IHtcbiAgICBjb25zdCBuZXdNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG1hdDQubXVsKG5ld01hdCwgbTEucmF3RWxlbWVudHMsIG0yLnJhd0VsZW1lbnRzKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHRycyh0OiBWZWN0b3IzLCByb3Q6IFF1YXRlcm5pb24sIHM6IFZlY3RvcjMpOiBNYXRyaXgge1xuICAgIGNvbnN0IG5ld01hdCA9IG1hdDQuY3JlYXRlKCk7IGNvbnN0IGNhY2hlTWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBtYXQ0Lm11bChuZXdNYXQsIG1hdDQudHJhbnNsYXRlKG5ld01hdCwgbWF0NC5jcmVhdGUoKSwgdC5yYXdFbGVtZW50cyksIG1hdDQuZnJvbVF1YXQoY2FjaGVNYXQsIHJvdC5yYXdFbGVtZW50cykpO1xuICAgIG1hdDQuc2NhbGUobmV3TWF0LCBuZXdNYXQsIHMucmF3RWxlbWVudHMpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG5ld01hdCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG5lZ2F0ZShtOiBNYXRyaXgpOiBNYXRyaXgge1xuICAgIHJldHVybiB0aGlzLnNjYWxhck11bHRpcGx5KC0xLCBtKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdHJhbnNwb3NlKG06IE1hdHJpeCk6IE1hdHJpeCB7XG4gICAgY29uc3QgbmV3TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICByZXR1cm4gbmV3IE1hdHJpeChtYXQ0LnRyYW5zcG9zZShuZXdNYXQsIG0ucmF3RWxlbWVudHMpKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdHJhbnNmb3JtUG9pbnQobTogTWF0cml4LCB0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgY29uc3QgbmV3VmVjID0gdmVjMy5jcmVhdGUoKTtcbiAgICB2ZWMzLnRyYW5zZm9ybU1hdDQobmV3VmVjLCB0LnJhd0VsZW1lbnRzLCBtLnJhd0VsZW1lbnRzKTtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMobmV3VmVjKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdHJhbnNmb3JtTm9ybWFsKG06IE1hdHJpeCwgdDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIGNvbnN0IG5ld1ZlYyA9IHZlYzQuY3JlYXRlKCk7XG4gICAgY29uc3QgdHJhbnMgPSB2ZWM0LmNyZWF0ZSgpO1xuICAgIHRyYW5zWzBdID0gdC5YOyB0cmFuc1sxXSA9IHQuWTsgdHJhbnNbMl0gPSB0Llo7IHRyYW5zWzNdID0gMDtcbiAgICB2ZWM0LnRyYW5zZm9ybU1hdDQobmV3VmVjLCB0cmFucywgbS5yYXdFbGVtZW50cyk7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKG5ld1ZlY1swXSwgbmV3VmVjWzFdLCBuZXdWZWNbMl0pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB0cmFuc2Zvcm0obTogTWF0cml4LCB0OiBWZWN0b3I0KTogVmVjdG9yNCB7XG4gICAgY29uc3QgbmV3VmVjID0gdmVjNC5jcmVhdGUoKTtcbiAgICBjb25zdCB0cmFucyA9IHZlYzQuY3JlYXRlKCk7XG4gICAgdHJhbnNbMF0gPSB0Llg7IHRyYW5zWzFdID0gdC5ZOyB0cmFuc1syXSA9IHQuWjsgdHJhbnNbM10gPSB0Llc7XG4gICAgdmVjNC50cmFuc2Zvcm1NYXQ0KG5ld1ZlYywgdHJhbnMsIG0ucmF3RWxlbWVudHMpO1xuICAgIHJldHVybiBuZXcgVmVjdG9yNChuZXdWZWNbMF0sIG5ld1ZlY1sxXSwgbmV3VmVjWzJdLCBuZXdWZWNbM10pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGRldGVybWluYW50IG9mIHBhc3NlZCBtYXRyaXhcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGV0ZXJtaW5hbnQobTogTWF0cml4KTogbnVtYmVyIHtcbiAgICByZXR1cm4gbWF0NC5kZXRlcm1pbmFudChtLnJhd0VsZW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlIGludmVydGVkIHBhc3NlZCBtYXRyaXguXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGludmVyc2UobTogTWF0cml4KTogTWF0cml4IHtcbiAgICBjb25zdCBuZXdNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG1hdDQuaW52ZXJ0KG5ld01hdCwgbS5yYXdFbGVtZW50cykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGxpbmVhciB0cmFuc2xhdGlvbiB0cmFuc2Zvcm0gbWF0cml4LlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyB0cmFuc2xhdGUodjogVmVjdG9yMyk6IE1hdHJpeCB7XG4gICAgY29uc3QgbmV3TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBtYXQ0LnRyYW5zbGF0ZShuZXdNYXQsIG5ld01hdCwgdi5yYXdFbGVtZW50cyk7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgobmV3TWF0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBsaW5lYXIgc2NhbGluZyB0cmFuc2Zvcm0gbWF0cml4LlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzY2FsZSh2OiBWZWN0b3IzKTogTWF0cml4IHtcbiAgICBjb25zdCBuZXdNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIG1hdDQuc2NhbGUobmV3TWF0LCBuZXdNYXQsIHYucmF3RWxlbWVudHMpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG5ld01hdCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJvdGF0ZVgoYW5nbGU6IG51bWJlcik6IE1hdHJpeCB7XG4gICAgY29uc3QgbmV3TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBtYXQ0LnJvdGF0ZVgobmV3TWF0LCBuZXdNYXQsIGFuZ2xlKTtcbiAgICByZXR1cm4gbmV3IE1hdHJpeChuZXdNYXQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyByb3RhdGVZKGFuZ2xlOiBudW1iZXIpOiBNYXRyaXgge1xuICAgIGNvbnN0IG5ld01hdCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgbWF0NC5yb3RhdGVZKG5ld01hdCwgbmV3TWF0LCBhbmdsZSk7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgobmV3TWF0KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcm90YXRlWihhbmdsZTogbnVtYmVyKTogTWF0cml4IHtcbiAgICBjb25zdCBuZXdNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIG1hdDQucm90YXRlWihuZXdNYXQsIG5ld01hdCwgYW5nbGUpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG5ld01hdCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJvdGF0aW9uUXVhdGVybmlvbihxdWF0XzogUXVhdGVybmlvbik6IE1hdHJpeCB7XG4gICAgY29uc3QgcXVhdGVybmlvbiA9IHF1YXQuY3JlYXRlKCk7XG4gICAgY29uc3QgbmV3TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBxdWF0Lm5vcm1hbGl6ZShxdWF0ZXJuaW9uLCBxdWF0Xy5yYXdFbGVtZW50cyk7XG4gICAgbWF0NC5mcm9tUXVhdChuZXdNYXQsIHF1YXRlcm5pb24pO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG5ld01hdCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZydXN0dW0obGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyLCBib3R0b206IG51bWJlciwgdG9wOiBudW1iZXIsIG5lYXI6IG51bWJlciwgZmFyOiBudW1iZXIpOiBNYXRyaXgge1xuICAgIGNvbnN0IG5ld01hdCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgbWF0NC5mcnVzdHVtKG5ld01hdCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG5ld01hdCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG9ydGhvKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHRvcDogbnVtYmVyLCBuZWFyOiBudW1iZXIsIGZhcjogbnVtYmVyKTogTWF0cml4IHtcbiAgICBjb25zdCBuZXdNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIG1hdDQub3J0aG8obmV3TWF0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcik7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgobmV3TWF0KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcGVyc3BlY3RpdmUoZm92eTogbnVtYmVyLCBhc3BlY3Q6IG51bWJlciwgbmVhcjogbnVtYmVyLCBmYXI6IG51bWJlcik6IE1hdHJpeCB7XG4gICAgY29uc3QgbmV3TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBtYXQ0LnBlcnNwZWN0aXZlKG5ld01hdCwgZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG5ld01hdCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGxvb2tBdChleWU6IFZlY3RvcjMsIGxvb2tBdDogVmVjdG9yMywgdXA6IFZlY3RvcjMpOiBNYXRyaXgge1xuICAgIGNvbnN0IG5ld01hdCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgbWF0NC5sb29rQXQobmV3TWF0LCBleWUucmF3RWxlbWVudHMsIGxvb2tBdC5yYXdFbGVtZW50cywgdXAucmF3RWxlbWVudHMpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KG5ld01hdCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXQocm93OiBudW1iZXIsIGNvbG11bjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5yYXdFbGVtZW50c1tjb2xtdW4gKiA0ICsgcm93XTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRBdChyb3c6IG51bWJlciwgY29sbXVuOiBudW1iZXIsIHZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5yYXdFbGVtZW50c1tjb2xtdW4gKiA0ICsgcm93XSA9IHZhbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRCeVNpbmdsZUluZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnJhd0VsZW1lbnRzW2luZGV4XTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb2xtdW4oY29sOiBudW1iZXIpOiBWZWN0b3I0IHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjQodGhpcy5yYXdFbGVtZW50c1tjb2wgKiA0XSwgdGhpcy5yYXdFbGVtZW50c1tjb2wgKiA0ICsgMV0sIHRoaXMucmF3RWxlbWVudHNbY29sICogNCArIDJdLCB0aGlzLnJhd0VsZW1lbnRzW2NvbCAqIDQgKyAzXSk7XG4gIH1cblxuICAvKipcbiAgKiBHZXQgcm93XG4gICogQHBhcmFtcyByb3cgWzAtM11cbiAgKi9cbiAgcHVibGljIGdldFJvdyhyb3c6IG51bWJlcik6IFZlY3RvcjQge1xuICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnJhd0VsZW1lbnRzW3Jvd10sIHRoaXMucmF3RWxlbWVudHNbcm93ICsgNF0sIHRoaXMucmF3RWxlbWVudHNbcm93ICsgOF0sIHRoaXMucmF3RWxlbWVudHNbcm93ICsgMTJdKTtcbiAgfVxuXG4gIHB1YmxpYyBtdWx0aXBseVdpdGgobTogTWF0cml4KTogTWF0cml4IHtcbiAgICByZXR1cm4gTWF0cml4Lm11bHRpcGx5KHRoaXMsIG0pO1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIChgfCR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDApIH0gJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoNCkgfSAke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCg4KSB9ICR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDEyKSB9fFxcblxuICAgICAgICAgICAgICAgICB8JHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMSkgfSAke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCg1KSB9ICR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDkpIH0gJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTMpIH18XFxuXG4gICAgICAgICAgICAgICAgIHwke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCgyKSB9ICR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDYpIH0gJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTApIH0gJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTQpIH18XFxuXG4gICAgICAgICAgICAgICAgIHwke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCgzKSB9ICR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDcpIH0gJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTEpIH0gJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTUpIH18YCk7XG4gIH1cblxuICBwdWJsaWMgdG9NYXRoZW1hdGljYVN0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiAoYHt7JHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMCkgfSwke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCg0KSB9LCR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDgpIH0sJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTIpIH19LFxuICAgICAgICAgICAgICAgICAgeyR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDEpIH0sJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoNSkgfSwke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCg5KSB9LCR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDEzKSB9fSxcbiAgICAgICAgICAgICAgICAgIHske3RoaXMuZ2V0QnlTaW5nbGVJbmRleCgyKSB9LCR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDYpIH0sJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTApIH0sJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoMTQpIH19LFxuICAgICAgICAgICAgICAgICAgeyR7dGhpcy5nZXRCeVNpbmdsZUluZGV4KDMpIH0sJHt0aGlzLmdldEJ5U2luZ2xlSW5kZXgoNykgfSwke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCgxMSkgfSwke3RoaXMuZ2V0QnlTaW5nbGVJbmRleCgxNSkgfX19YCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IEVsZW1lbnRDb3VudCgpOiBudW1iZXIgeyByZXR1cm4gMTY7IH1cblxuICBwdWJsaWMgZ2V0IFJvd0NvdW50KCk6IG51bWJlciB7IHJldHVybiA0OyB9XG5cbiAgcHVibGljIGdldCBDb2xtdW5Db3VudCgpOiBudW1iZXIgeyByZXR1cm4gNDsgfVxuXG59XG5leHBvcnQgZGVmYXVsdCBNYXRyaXg7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

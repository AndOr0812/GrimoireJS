import Vector3 from "./Vector3";
import { vec3 } from "gl-matrix";
import JThreeLogger from "../Base/JThreeLogger";
import AABB from "./AABB";
class PointList {
    constructor(pointList) {
        if (pointList) {
            this.points = new Array(pointList.points.length);
            for (let i = 0; i < pointList.points.length; i++) {
                this.points[i] = Vector3.copy(pointList.points[i]);
            }
        }
        else {
            this.points = [];
        }
    }
    static initializeWithCube(list) {
        list.clear();
        list.addPoint(new Vector3(-1.0, +1.0, -1.0));
        list.addPoint(new Vector3(-1.0, -1.0, -1.0));
        list.addPoint(new Vector3(+1.0, -1.0, -1.0));
        list.addPoint(new Vector3(+1.0, +1.0, -1.0));
        list.addPoint(new Vector3(-1.0, +1.0, +1.0));
        list.addPoint(new Vector3(-1.0, -1.0, +1.0));
        list.addPoint(new Vector3(+1.0, -1.0, +1.0));
        list.addPoint(new Vector3(+1.0, +1.0, +1.0));
        return list;
    }
    addPoint(point) {
        this.points.push(point);
    }
    transform(transformMatrix) {
        for (let i = 0; i < this.points.length; i++) {
            vec3.transformMat4(this.points[i].rawElements, this.points[i].rawElements, transformMatrix.rawElements);
        }
        return;
    }
    clear() {
        this.points.length = 0;
        return;
    }
    debugShow() {
        let log = "";
        for (let i = 0; i < this.points.length; i++) {
            log += `${this.points[i]}
`;
        }
        JThreeLogger.sectionLongLog("Pointlist", log);
        return;
    }
    getBoundingBox() {
        let aabb = new AABB();
        for (let i = 0; i < this.points.length; i++) {
            aabb.expandAABB(this.points[i]);
        }
        return aabb;
    }
    toMathematicaPoints() {
        let points = "";
        for (let i = 0; i < this.points.length; i++) {
            if (i !== 0) {
                points += `,`;
            }
            points += this.points[i].toMathematicaString();
        }
        return `Point[{${points}}]`;
    }
}
export default PointList;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hdGgvUG9pbnRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLE9BQU8sTUFBTSxXQUFXO09BRXhCLEVBQUMsSUFBSSxFQUFDLE1BQU0sV0FBVztPQUN2QixZQUFZLE1BQU0sc0JBQXNCO09BQ3hDLElBQUksTUFBTSxRQUFRO0FBQ3pCO0lBR0UsWUFBWSxTQUFxQjtRQUMvQixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbkIsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFjLGtCQUFrQixDQUFDLElBQWU7UUFDOUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxRQUFRLENBQUMsS0FBYztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sU0FBUyxDQUFDLGVBQXVCO1FBQ3RDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxRyxDQUFDO1FBQ0QsTUFBTSxDQUFDO0lBQ1QsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDO0lBQ1QsQ0FBQztJQUVNLFNBQVM7UUFDZCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDNUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Q0FDN0IsQ0FBQztRQUNFLENBQUM7UUFDRCxZQUFZLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUM7SUFDVCxDQUFDO0lBRU0sY0FBYztRQUNuQixJQUFJLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxtQkFBbUI7UUFDeEIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWixNQUFNLElBQUksR0FBRyxDQUFDO1lBQ2hCLENBQUM7WUFDRCxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ2pELENBQUM7UUFDRCxNQUFNLENBQUMsVUFBVSxNQUFNLElBQUksQ0FBQztJQUM5QixDQUFDO0FBQ0gsQ0FBQztBQUVELGVBQWUsU0FBUyxDQUFDIiwiZmlsZSI6Ik1hdGgvUG9pbnRMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4vVmVjdG9yM1wiO1xuaW1wb3J0IE1hdHJpeCBmcm9tIFwiLi9NYXRyaXhcIjtcbmltcG9ydCB7dmVjM30gZnJvbSBcImdsLW1hdHJpeFwiO1xuaW1wb3J0IEpUaHJlZUxvZ2dlciBmcm9tIFwiLi4vQmFzZS9KVGhyZWVMb2dnZXJcIjtcbmltcG9ydCBBQUJCIGZyb20gXCIuL0FBQkJcIjtcbmNsYXNzIFBvaW50TGlzdCB7XG4gIHB1YmxpYyBwb2ludHM6IFZlY3RvcjNbXTtcblxuICBjb25zdHJ1Y3Rvcihwb2ludExpc3Q/OiBQb2ludExpc3QpIHtcbiAgICBpZiAocG9pbnRMaXN0KSB7XG4gICAgICB0aGlzLnBvaW50cyA9IG5ldyBBcnJheShwb2ludExpc3QucG9pbnRzLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50TGlzdC5wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5wb2ludHNbaV0gPSBWZWN0b3IzLmNvcHkocG9pbnRMaXN0LnBvaW50c1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpbml0aWFsaXplV2l0aEN1YmUobGlzdDogUG9pbnRMaXN0KTogUG9pbnRMaXN0IHtcbiAgICBsaXN0LmNsZWFyKCk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygtMS4wLCArMS4wLCAtMS4wKSk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygtMS4wLCAtMS4wLCAtMS4wKSk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygrMS4wLCAtMS4wLCAtMS4wKSk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygrMS4wLCArMS4wLCAtMS4wKSk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygtMS4wLCArMS4wLCArMS4wKSk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygtMS4wLCAtMS4wLCArMS4wKSk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygrMS4wLCAtMS4wLCArMS4wKSk7XG4gICAgbGlzdC5hZGRQb2ludChuZXcgVmVjdG9yMygrMS4wLCArMS4wLCArMS4wKSk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICBwdWJsaWMgYWRkUG9pbnQocG9pbnQ6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICB0aGlzLnBvaW50cy5wdXNoKHBvaW50KTtcbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2Zvcm0odHJhbnNmb3JtTWF0cml4OiBNYXRyaXgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2ZWMzLnRyYW5zZm9ybU1hdDQodGhpcy5wb2ludHNbaV0ucmF3RWxlbWVudHMsIHRoaXMucG9pbnRzW2ldLnJhd0VsZW1lbnRzLCB0cmFuc2Zvcm1NYXRyaXgucmF3RWxlbWVudHMpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5wb2ludHMubGVuZ3RoID0gMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBwdWJsaWMgZGVidWdTaG93KCk6IHZvaWQge1xuICAgIGxldCBsb2cgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZyArPSBgJHt0aGlzLnBvaW50c1tpXX1cbmA7XG4gICAgfVxuICAgIEpUaHJlZUxvZ2dlci5zZWN0aW9uTG9uZ0xvZyhcIlBvaW50bGlzdFwiLCBsb2cpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRCb3VuZGluZ0JveCgpOiBBQUJCIHtcbiAgICBsZXQgYWFiYiA9IG5ldyBBQUJCKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgYWFiYi5leHBhbmRBQUJCKHRoaXMucG9pbnRzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGFhYmI7XG4gIH1cblxuICBwdWJsaWMgdG9NYXRoZW1hdGljYVBvaW50cygpOiBzdHJpbmcge1xuICAgIGxldCBwb2ludHMgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgIHBvaW50cyArPSBgLGA7XG4gICAgICB9XG4gICAgICBwb2ludHMgKz0gdGhpcy5wb2ludHNbaV0udG9NYXRoZW1hdGljYVN0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gYFBvaW50W3ske3BvaW50c319XWA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9pbnRMaXN0O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

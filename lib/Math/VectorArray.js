import Vector4 from "./Vector4";
import Vector3 from "./Vector3";
import Vector2 from "./Vector2";
/**
 *  The array object for managing vectors having specific dimension.
 */
class VectorArray {
    constructor(length) {
        if (length) {
            this.rawElements = new Array(length);
        }
        else {
            this.rawElements = [];
        }
    }
    /**
     * Generate vector array filled with zero vectors.
     * @param  {number}      dimension [description]
     * @param  {number}      length   [description]
     * @return {VectorArray}          [description]
     */
    static zeroVectorArray(dimension, length) {
        const array = new VectorArray(dimension * length);
        for (let i = 0; i < dimension * length; i++) {
            array.rawElements[i] = 0;
        }
        array._dimension = 0;
        return array;
    }
    static equal(v1, v2) {
        if (v1.ElementCount === v2.ElementCount) {
            return VectorArray.elementEqual(v1, v2);
        }
    }
    static elementEqual(v1, v2) {
        for (let i = 0; i < v1.ElementCount; i++) {
            if (v1.rawElements[i] !== v2.rawElements[i]) {
                return false;
            }
        }
        return true;
    }
    appendVector(vector) {
        this._verifyDimension(vector);
        this.rawElements.push(vector.rawElements);
    }
    setVector(index, vector) {
        this._verifyDimension(vector);
        for (let elemIndex = 0; elemIndex < vector.ElementCount; elemIndex++) {
            this.rawElements[index * this._dimension + elemIndex] = vector.rawElements[elemIndex];
        }
        return;
    }
    setRawArray(index, rawArray) {
        for (let elemIndex = 0; elemIndex < this._dimension; elemIndex++) {
            this.rawElements[index * this._dimension + elemIndex] = rawArray[elemIndex] ? rawArray[elemIndex] : 0;
        }
        return;
    }
    getVector(index) {
        switch (this._dimension) {
            case 2:
                return new Vector2(this.rawElements[index * this._dimension + 0], this.rawElements[index * this._dimension + 1]);
            case 3:
                return new Vector3(this.rawElements[index * this._dimension + 0], this.rawElements[index * this._dimension + 1], this.rawElements[index * this._dimension + 2]);
            case 4:
                return new Vector4(this.rawElements[index * this._dimension + 0], this.rawElements[index * this._dimension + 1], this.rawElements[index * this._dimension + 2], this.rawElements[index * this._dimension + 3]);
            default:
                return null;
        }
    }
    setVectorArray(vectors, offset = 0) {
        if (vectors.length === 0) {
            return;
        }
        this._verifyDimension(vectors[0]);
        vectors.forEach((e, i) => {
            if (this._dimension !== e.ElementCount) {
                throw new Error(`Unmatch unit size of vector element! at:${i}`);
            }
            for (let elemIndex = 0; elemIndex < this._dimension; elemIndex++) {
                this.rawElements[offset + this._dimension * i + elemIndex] = e.rawElements[elemIndex];
            }
        });
        return;
    }
    getVectorArray() {
        if (this.rawElements.length === 0) {
            return [];
        }
        const result = new Array(this.rawElements.length / this._dimension);
        for (let i = 0; i < result.length; i++) {
            result[i] = this.getVector(i);
        }
        return result;
    }
    get dimension() {
        return this._dimension;
    }
    _verifyDimension(vector) {
        if (typeof this._dimension !== "undefined" && this._dimension !== vector.ElementCount) {
            throw new Error("Unmatch unit size of vectors!");
        }
        else if (typeof this._dimension === "undefined") {
            this._dimension = vector.ElementCount;
        }
    }
}
export default VectorArray;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hdGgvVmVjdG9yQXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sT0FBTyxNQUFNLFdBQVc7T0FDeEIsT0FBTyxNQUFNLFdBQVc7T0FDeEIsT0FBTyxNQUFNLFdBQVc7QUFFL0I7O0dBRUc7QUFDSDtJQXFCRSxZQUFZLE1BQWU7UUFDekIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNYLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7SUFyQkQ7Ozs7O09BS0c7SUFDSCxPQUFjLGVBQWUsQ0FBQyxTQUFpQixFQUFFLE1BQWM7UUFDN0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFXLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzVDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFDRCxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQVVELE9BQWMsS0FBSyxDQUFDLEVBQWMsRUFBRSxFQUFjO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEtBQUssRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBYyxZQUFZLENBQUMsRUFB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LENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN2QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBSSxDQUFDLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBVyxTQUFTO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxNQUFrQjtRQUN6QyxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDdEYsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3hDLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELGVBQWUsV0FBVyxDQUFDIiwiZmlsZSI6Ik1hdGgvVmVjdG9yQXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjdG9yNCBmcm9tIFwiLi9WZWN0b3I0XCI7XG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi9WZWN0b3IzXCI7XG5pbXBvcnQgVmVjdG9yMiBmcm9tIFwiLi9WZWN0b3IyXCI7XG5pbXBvcnQgVmVjdG9yQmFzZSBmcm9tIFwiLi9WZWN0b3JCYXNlXCI7XG4vKipcbiAqICBUaGUgYXJyYXkgb2JqZWN0IGZvciBtYW5hZ2luZyB2ZWN0b3JzIGhhdmluZyBzcGVjaWZpYyBkaW1lbnNpb24uXG4gKi9cbmNsYXNzIFZlY3RvckFycmF5IHtcblxuICBwdWJsaWMgcmF3RWxlbWVudHM6IG51bWJlcltdO1xuXG4gIHByaXZhdGUgX2RpbWVuc2lvbjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSB2ZWN0b3IgYXJyYXkgZmlsbGVkIHdpdGggemVybyB2ZWN0b3JzLlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9ICAgICAgZGltZW5zaW9uIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICB7bnVtYmVyfSAgICAgIGxlbmd0aCAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB7VmVjdG9yQXJyYXl9ICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgemVyb1ZlY3RvckFycmF5KGRpbWVuc2lvbjogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IFZlY3RvckFycmF5IHtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBWZWN0b3JBcnJheShkaW1lbnNpb24gKiBsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGltZW5zaW9uICogbGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycmF5LnJhd0VsZW1lbnRzW2ldID0gMDtcbiAgICB9XG4gICAgYXJyYXkuX2RpbWVuc2lvbiA9IDA7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgY29uc3RydWN0b3IobGVuZ3RoPzogbnVtYmVyKSB7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgdGhpcy5yYXdFbGVtZW50cyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJhd0VsZW1lbnRzID0gW107XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBlcXVhbCh2MTogVmVjdG9yQmFzZSwgdjI6IFZlY3RvckJhc2UpOiBib29sZWFuIHtcbiAgICBpZiAodjEuRWxlbWVudENvdW50ID09PSB2Mi5FbGVtZW50Q291bnQpIHtcbiAgICByZXR1cm4gVmVjdG9yQXJyYXkuZWxlbWVudEVxdWFsKHYxLCB2Mik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBlbGVtZW50RXF1YWwodjE6IFZlY3RvckJhc2UsIHYyOiBWZWN0b3JCYXNlKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2MS5FbGVtZW50Q291bnQ7IGkrKykge1xuICAgICAgaWYgKHYxLnJhd0VsZW1lbnRzW2ldICE9PSB2Mi5yYXdFbGVtZW50c1tpXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHVibGljIGFwcGVuZFZlY3Rvcih2ZWN0b3I6IFZlY3RvckJhc2UpOiB2b2lkIHtcbiAgICB0aGlzLl92ZXJpZnlEaW1lbnNpb24odmVjdG9yKTtcbiAgICB0aGlzLnJhd0VsZW1lbnRzLnB1c2goPGFueT52ZWN0b3IucmF3RWxlbWVudHMpO1xuICB9XG5cbiAgcHVibGljIHNldFZlY3RvcihpbmRleDogbnVtYmVyLCB2ZWN0b3I6IFZlY3RvckJhc2UpOiB2b2lkIHtcbiAgICB0aGlzLl92ZXJpZnlEaW1lbnNpb24odmVjdG9yKTtcbiAgICBmb3IgKGxldCBlbGVtSW5kZXggPSAwOyBlbGVtSW5kZXggPCB2ZWN0b3IuRWxlbWVudENvdW50OyBlbGVtSW5kZXgrKykge1xuICAgICAgdGhpcy5yYXdFbGVtZW50c1tpbmRleCAqIHRoaXMuX2RpbWVuc2lvbiArIGVsZW1JbmRleF0gPSB2ZWN0b3IucmF3RWxlbWVudHNbZWxlbUluZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHVibGljIHNldFJhd0FycmF5KGluZGV4OiBudW1iZXIsIHJhd0FycmF5OiBudW1iZXJbXSk6IHZvaWQge1xuICAgIGZvciAobGV0IGVsZW1JbmRleCA9IDA7IGVsZW1JbmRleCA8IHRoaXMuX2RpbWVuc2lvbjsgZWxlbUluZGV4KyspIHtcbiAgICAgIHRoaXMucmF3RWxlbWVudHNbaW5kZXggKiB0aGlzLl9kaW1lbnNpb24gKyBlbGVtSW5kZXhdID0gcmF3QXJyYXlbZWxlbUluZGV4XSA/IHJhd0FycmF5W2VsZW1JbmRleF0gOiAwO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBwdWJsaWMgZ2V0VmVjdG9yPFQgZXh0ZW5kcyBWZWN0b3JCYXNlPihpbmRleDogbnVtYmVyKTogVCB7XG4gICAgc3dpdGNoICh0aGlzLl9kaW1lbnNpb24pIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIDxUPjxhbnk+bmV3IFZlY3RvcjIodGhpcy5yYXdFbGVtZW50c1tpbmRleCAqIHRoaXMuX2RpbWVuc2lvbiArIDBdLCB0aGlzLnJhd0VsZW1lbnRzW2luZGV4ICogdGhpcy5fZGltZW5zaW9uICsgMV0pO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gPFQ+PGFueT5uZXcgVmVjdG9yMyh0aGlzLnJhd0VsZW1lbnRzW2luZGV4ICogdGhpcy5fZGltZW5zaW9uICsgMF0sIHRoaXMucmF3RWxlbWVudHNbaW5kZXggKiB0aGlzLl9kaW1lbnNpb24gKyAxXSwgdGhpcy5yYXdFbGVtZW50c1tpbmRleCAqIHRoaXMuX2RpbWVuc2lvbiArIDJdKTtcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIDxUPjxhbnk+bmV3IFZlY3RvcjQodGhpcy5yYXdFbGVtZW50c1tpbmRleCAqIHRoaXMuX2RpbWVuc2lvbiArIDBdLCB0aGlzLnJhd0VsZW1lbnRzW2luZGV4ICogdGhpcy5fZGltZW5zaW9uICsgMV0sIHRoaXMucmF3RWxlbWVudHNbaW5kZXggKiB0aGlzLl9kaW1lbnNpb24gKyAyXSwgdGhpcy5yYXdFbGVtZW50c1tpbmRleCAqIHRoaXMuX2RpbWVuc2lvbiArIDNdKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRWZWN0b3JBcnJheSh2ZWN0b3JzOiBWZWN0b3JCYXNlW10sIG9mZnNldCA9IDApOiB2b2lkIHtcbiAgICBpZiAodmVjdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdmVyaWZ5RGltZW5zaW9uKHZlY3RvcnNbMF0pO1xuICAgIHZlY3RvcnMuZm9yRWFjaCgoZSwgaSkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2RpbWVuc2lvbiAhPT0gZS5FbGVtZW50Q291bnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbm1hdGNoIHVuaXQgc2l6ZSBvZiB2ZWN0b3IgZWxlbWVudCEgYXQ6JHtpfWApO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgZWxlbUluZGV4ID0gMDsgZWxlbUluZGV4IDwgdGhpcy5fZGltZW5zaW9uOyBlbGVtSW5kZXgrKykge1xuICAgICAgICB0aGlzLnJhd0VsZW1lbnRzW29mZnNldCArIHRoaXMuX2RpbWVuc2lvbiAqIGkgKyBlbGVtSW5kZXhdID0gZS5yYXdFbGVtZW50c1tlbGVtSW5kZXhdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRWZWN0b3JBcnJheTxUIGV4dGVuZHMgVmVjdG9yQmFzZT4oKTogVFtdIHtcbiAgICBpZiAodGhpcy5yYXdFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMucmF3RWxlbWVudHMubGVuZ3RoIC8gdGhpcy5fZGltZW5zaW9uKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gdGhpcy5nZXRWZWN0b3I8VD4oaSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGRpbWVuc2lvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kaW1lbnNpb247XG4gIH1cblxuICBwcml2YXRlIF92ZXJpZnlEaW1lbnNpb24odmVjdG9yOiBWZWN0b3JCYXNlKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9kaW1lbnNpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgdGhpcy5fZGltZW5zaW9uICE9PSB2ZWN0b3IuRWxlbWVudENvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbm1hdGNoIHVuaXQgc2l6ZSBvZiB2ZWN0b3JzIVwiKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9kaW1lbnNpb24gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuX2RpbWVuc2lvbiA9IHZlY3Rvci5FbGVtZW50Q291bnQ7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZlY3RvckFycmF5O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

class PMXMorph {
    constructor(pmxModel, index, morphManager) {
        this._progress = 0;
        this._progressCurrentCache = 0;
        this.__model = pmxModel;
        this.__morphIndex = index;
        this.__morphManager = morphManager;
    }
    static createMorph(model, index, morphManager) {
        const morphData = model.ModelData.Morphs[index];
        switch (morphData.morphKind) {
            case 0:
                return new PMXGroupMorph(model, index, morphManager);
            case 1:
                return new PMXVertexMorph(model, index, morphManager);
            case 3:
                return new PMXUVMorph(model, index, morphManager);
            case 8:
                return new PMXMaterialMorph(model, index, morphManager);
            default:
                return null;
        }
    }
    static postProcess(model, morphType) {
        switch (morphType) {
            case 1:
                PMXVertexMorph.postProcess(model);
                return;
            case 2:
                PMXUVMorph.postProcess(model);
                return;
        }
    }
    get Progress() {
        return this._progress;
    }
    set Progress(val) {
        if (this._progressCurrentCache !== val) {
            this._progressCurrentCache = val;
        }
    }
    get MorphName() {
        return this.TargetMorphData.morphName;
    }
    get TargetMorphData() {
        return this.__model.ModelData.Morphs[this.__morphIndex];
    }
    update() {
        if (this._progress !== this._progressCurrentCache) {
            this.__updateProgress(this._progressCurrentCache, this._progress);
            this._progress = this._progressCurrentCache;
            this.__morphManager.postProcessFlag[this.TargetMorphData.morphKind] = true;
        }
    }
}
class PMXVertexMorph extends PMXMorph {
    static postProcess(model) {
        model.Geometry.updatePositionBuffer();
    }
    __updateProgress(current, last) {
        const ratio = current - last;
        for (let i = 0; i < this.TargetMorphData.morphOffsetCount; ++i) {
            const vm = this.TargetMorphData.vertexMorph[i];
            this.__model.Geometry.positionBuferSource[3 * vm.vertexIndex + 0] += vm.vertexOffset[0] * ratio;
            this.__model.Geometry.positionBuferSource[3 * vm.vertexIndex + 1] += vm.vertexOffset[1] * ratio;
            this.__model.Geometry.positionBuferSource[3 * vm.vertexIndex + 2] += vm.vertexOffset[2] * ratio;
        }
    }
}
class PMXUVMorph extends PMXMorph {
    static postProcess(model) {
        model.Geometry.updateUVBuffer();
    }
    __updateProgress(current, last) {
        const ratio = current - last;
        for (let i = 0; i < this.TargetMorphData.morphOffsetCount; ++i) {
            const vm = this.TargetMorphData.uvMorph[i];
            this.__model.Geometry.uvBufferSource[3 * vm.vertexIndex + 0] += vm.uvOffset[0] * ratio;
            this.__model.Geometry.uvBufferSource[3 * vm.vertexIndex + 1] += vm.uvOffset[1] * ratio;
            this.__model.Geometry.uvBufferSource[3 * vm.vertexIndex + 2] += vm.uvOffset[2] * ratio;
        }
    }
}
class PMXGroupMorph extends PMXMorph {
    __updateProgress(current, last) {
        const ratio = current - last;
        for (let i = 0; i < this.TargetMorphData.morphOffsetCount; ++i) {
            const vm = this.TargetMorphData.groupMorph[i];
            const m = this.__morphManager.getMorphByIndex(vm.morphIndex);
            if (m) {
                m.Progress += ratio * vm.morphRate;
            }
        }
    }
}
class PMXMaterialMorph extends PMXMorph {
    __updateProgress(current, last) {
        const ratio = current - last;
        for (let i = 0; i < this.TargetMorphData.morphOffsetCount; ++i) {
            const vm = this.TargetMorphData.materialMorph[i];
            let targetMaterials;
            if (vm.materialIndex === -1) {
                targetMaterials = this.__model.Materials;
            }
            else {
                targetMaterials = [this.__model.getPMXMaterialByIndex(vm.materialIndex)];
            }
            for (let j = 0; j < targetMaterials.length; j++) {
                const targetMaterial = targetMaterials[j];
                const target = vm.operationType === 1 ? targetMaterial.addMorphParam : targetMaterial.mulMorphParam;
                target.edgeSize += ratio * (vm.edgeSize + vm.operationType - 1);
                this._assignMorphValues(3, target.ambient, vm.ambient, ratio, vm.operationType);
                this._assignMorphValues(4, target.diffuse, vm.diffuse, ratio, vm.operationType);
                this._assignMorphValues(4, target.specular, vm.specular, ratio, vm.operationType);
                this._assignMorphValues(4, target.edgeColor, vm.edgeColor, ratio, vm.operationType);
                this._assignMorphValues(4, target.textureCoeff, vm.textureCoefficient, ratio, vm.operationType);
                this._assignMorphValues(4, target.sphereCoeff, vm.sphereTextureCoefficient, ratio, vm.operationType);
                this._assignMorphValues(4, target.toonCoeff, vm.toonTextureCoefficient, ratio, vm.operationType);
            }
        }
    }
    _assignMorphValues(vecLength, target, morphValues, ratio, opType) {
        for (let i = 0; i < vecLength; i++) {
            target[i] += ratio * (morphValues[i] + opType - 1);
        }
    }
}
export default PMXMorph;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBNWC9Db3JlL1BNWE1vcnBoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0lBc0RFLFlBQVksUUFBa0IsRUFBRSxLQUFhLEVBQUUsWUFBNkI7UUFqRHBFLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFDdEIsMEJBQXFCLEdBQVcsQ0FBQyxDQUFDO1FBaUR4QyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsY0FBYyxHQUFHLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBbERELE9BQWMsV0FBVyxDQUFDLEtBQWUsRUFBRSxLQUFhLEVBQUUsWUFBNkI7UUFDckYsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsS0FBSyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3ZELEtBQUssQ0FBQztnQkFDSixNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN4RCxLQUFLLENBQUM7Z0JBQ0osTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDcEQsS0FBSyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDMUQ7Z0JBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQWMsV0FBVyxDQUFDLEtBQWUsRUFBRSxTQUFpQjtRQUMxRCxNQUFNLENBQUMsQ0FBQyxTQUFTLENB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LENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFbkcsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU8sa0JBQWtCLENBQUMsU0FBaUIsRUFBRSxNQUFnQixFQUFFLFdBQXFCLEVBQUUsS0FBYSxFQUFFLE1BQWM7UUFDbEgsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLFFBQVEsQ0FBQyIsImZpbGUiOiJQTVgvQ29yZS9QTVhNb3JwaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQTVhNb2RlbCBmcm9tIFwiLi9QTVhNb2RlbFwiO1xuaW1wb3J0IFBNWEdlb21ldHJ5IGZyb20gXCIuL1BNWEdlb21ldHJ5XCI7XG5pbXBvcnQgUE1YTW9ycGhNYW5hZ2VyIGZyb20gXCIuL1BNWE1vcnBoTWFuYWdlclwiO1xuYWJzdHJhY3QgY2xhc3MgUE1YTW9ycGgge1xuXG4gIHByb3RlY3RlZCBfX21vcnBoTWFuYWdlcjogUE1YTW9ycGhNYW5hZ2VyO1xuICBwcm90ZWN0ZWQgX19tb2RlbDogUE1YTW9kZWw7XG4gIHByb3RlY3RlZCBfX21vcnBoSW5kZXg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfcHJvZ3Jlc3M6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX3Byb2dyZXNzQ3VycmVudENhY2hlOiBudW1iZXIgPSAwO1xuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlTW9ycGgobW9kZWw6IFBNWE1vZGVsLCBpbmRleDogbnVtYmVyLCBtb3JwaE1hbmFnZXI6IFBNWE1vcnBoTWFuYWdlcik6IFBNWE1vcnBoIHtcbiAgICBjb25zdCBtb3JwaERhdGEgPSBtb2RlbC5Nb2RlbERhdGEuTW9ycGhzW2luZGV4XTtcbiAgICBzd2l0Y2ggKG1vcnBoRGF0YS5tb3JwaEtpbmQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIG5ldyBQTVhHcm91cE1vcnBoKG1vZGVsLCBpbmRleCwgbW9ycGhNYW5hZ2VyKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG5ldyBQTVhWZXJ0ZXhNb3JwaChtb2RlbCwgaW5kZXgsIG1vcnBoTWFuYWdlcik7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBuZXcgUE1YVVZNb3JwaChtb2RlbCwgaW5kZXgsIG1vcnBoTWFuYWdlcik7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHJldHVybiBuZXcgUE1YTWF0ZXJpYWxNb3JwaChtb2RlbCwgaW5kZXgsIG1vcnBoTWFuYWdlcik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHBvc3RQcm9jZXNzKG1vZGVsOiBQTVhNb2RlbCwgbW9ycGhUeXBlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBzd2l0Y2ggKG1vcnBoVHlwZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBQTVhWZXJ0ZXhNb3JwaC5wb3N0UHJvY2Vzcyhtb2RlbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgUE1YVVZNb3JwaC5wb3N0UHJvY2Vzcyhtb2RlbCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuXG4gIHB1YmxpYyBnZXQgUHJvZ3Jlc3MoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvZ3Jlc3M7XG4gIH1cblxuICBwdWJsaWMgc2V0IFByb2dyZXNzKHZhbDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzQ3VycmVudENhY2hlICE9PSB2YWwpIHtcbiAgICAgIHRoaXMuX3Byb2dyZXNzQ3VycmVudENhY2hlID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgTW9ycGhOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuVGFyZ2V0TW9ycGhEYXRhLm1vcnBoTmFtZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgVGFyZ2V0TW9ycGhEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9fbW9kZWwuTW9kZWxEYXRhLk1vcnBoc1t0aGlzLl9fbW9ycGhJbmRleF07XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwbXhNb2RlbDogUE1YTW9kZWwsIGluZGV4OiBudW1iZXIsIG1vcnBoTWFuYWdlcjogUE1YTW9ycGhNYW5hZ2VyKSB7XG4gICAgdGhpcy5fX21vZGVsID0gcG14TW9kZWw7XG4gICAgdGhpcy5fX21vcnBoSW5kZXggPSBpbmRleDtcbiAgICB0aGlzLl9fbW9ycGhNYW5hZ2VyID0gbW9ycGhNYW5hZ2VyO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcHJvZ3Jlc3MgIT09IHRoaXMuX3Byb2dyZXNzQ3VycmVudENhY2hlKSB7XG4gICAgICB0aGlzLl9fdXBkYXRlUHJvZ3Jlc3ModGhpcy5fcHJvZ3Jlc3NDdXJyZW50Q2FjaGUsIHRoaXMuX3Byb2dyZXNzKTtcbiAgICAgIHRoaXMuX3Byb2dyZXNzID0gdGhpcy5fcHJvZ3Jlc3NDdXJyZW50Q2FjaGU7XG4gICAgICB0aGlzLl9fbW9ycGhNYW5hZ2VyLnBvc3RQcm9jZXNzRmxhZ1t0aGlzLlRhcmdldE1vcnBoRGF0YS5tb3JwaEtpbmRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgX191cGRhdGVQcm9ncmVzcyhjdXJyZW50OiBudW1iZXIsIGxhc3Q6IG51bWJlcik6IHZvaWQ7XG59XG5cbmNsYXNzIFBNWFZlcnRleE1vcnBoIGV4dGVuZHMgUE1YTW9ycGgge1xuICBwdWJsaWMgc3RhdGljIHBvc3RQcm9jZXNzKG1vZGVsOiBQTVhNb2RlbCk6IHZvaWQge1xuICAgICg8UE1YR2VvbWV0cnk+bW9kZWwuR2VvbWV0cnkpLnVwZGF0ZVBvc2l0aW9uQnVmZmVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX191cGRhdGVQcm9ncmVzcyhjdXJyZW50OiBudW1iZXIsIGxhc3Q6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHJhdGlvID0gY3VycmVudCAtIGxhc3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRhcmdldE1vcnBoRGF0YS5tb3JwaE9mZnNldENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHZtID0gdGhpcy5UYXJnZXRNb3JwaERhdGEudmVydGV4TW9ycGhbaV07XG4gICAgICAoPFBNWEdlb21ldHJ5PnRoaXMuX19tb2RlbC5HZW9tZXRyeSkucG9zaXRpb25CdWZlclNvdXJjZVszICogdm0udmVydGV4SW5kZXggKyAwXSArPSB2bS52ZXJ0ZXhPZmZzZXRbMF0gKiByYXRpbztcbiAgICAgICg8UE1YR2VvbWV0cnk+dGhpcy5fX21vZGVsLkdlb21ldHJ5KS5wb3NpdGlvbkJ1ZmVyU291cmNlWzMgKiB2bS52ZXJ0ZXhJbmRleCArIDFdICs9IHZtLnZlcnRleE9mZnNldFsxXSAqIHJhdGlvO1xuICAgICAgKDxQTVhHZW9tZXRyeT50aGlzLl9fbW9kZWwuR2VvbWV0cnkpLnBvc2l0aW9uQnVmZXJTb3VyY2VbMyAqIHZtLnZlcnRleEluZGV4ICsgMl0gKz0gdm0udmVydGV4T2Zmc2V0WzJdICogcmF0aW87XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFBNWFVWTW9ycGggZXh0ZW5kcyBQTVhNb3JwaCB7XG4gIHB1YmxpYyBzdGF0aWMgcG9zdFByb2Nlc3MobW9kZWw6IFBNWE1vZGVsKTogdm9pZCB7XG4gICAgKDxQTVhHZW9tZXRyeT5tb2RlbC5HZW9tZXRyeSkudXBkYXRlVVZCdWZmZXIoKTtcbiAgfVxuICBwcm90ZWN0ZWQgX191cGRhdGVQcm9ncmVzcyhjdXJyZW50OiBudW1iZXIsIGxhc3Q6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHJhdGlvID0gY3VycmVudCAtIGxhc3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRhcmdldE1vcnBoRGF0YS5tb3JwaE9mZnNldENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHZtID0gdGhpcy5UYXJnZXRNb3JwaERhdGEudXZNb3JwaFtpXTtcbiAgICAgICg8UE1YR2VvbWV0cnk+dGhpcy5fX21vZGVsLkdlb21ldHJ5KS51dkJ1ZmZlclNvdXJjZVszICogdm0udmVydGV4SW5kZXggKyAwXSArPSB2bS51dk9mZnNldFswXSAqIHJhdGlvO1xuICAgICAgKDxQTVhHZW9tZXRyeT50aGlzLl9fbW9kZWwuR2VvbWV0cnkpLnV2QnVmZmVyU291cmNlWzMgKiB2bS52ZXJ0ZXhJbmRleCArIDFdICs9IHZtLnV2T2Zmc2V0WzFdICogcmF0aW87XG4gICAgICAoPFBNWEdlb21ldHJ5PnRoaXMuX19tb2RlbC5HZW9tZXRyeSkudXZCdWZmZXJTb3VyY2VbMyAqIHZtLnZlcnRleEluZGV4ICsgMl0gKz0gdm0udXZPZmZzZXRbMl0gKiByYXRpbztcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgUE1YR3JvdXBNb3JwaCBleHRlbmRzIFBNWE1vcnBoIHtcbiAgcHJvdGVjdGVkIF9fdXBkYXRlUHJvZ3Jlc3MoY3VycmVudDogbnVtYmVyLCBsYXN0OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCByYXRpbyA9IGN1cnJlbnQgLSBsYXN0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5UYXJnZXRNb3JwaERhdGEubW9ycGhPZmZzZXRDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCB2bSA9IHRoaXMuVGFyZ2V0TW9ycGhEYXRhLmdyb3VwTW9ycGhbaV07XG4gICAgICBjb25zdCBtID0gdGhpcy5fX21vcnBoTWFuYWdlci5nZXRNb3JwaEJ5SW5kZXgodm0ubW9ycGhJbmRleCk7XG4gICAgICBpZiAobSkge1xuICAgICAgICBtLlByb2dyZXNzICs9IHJhdGlvICogdm0ubW9ycGhSYXRlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBQTVhNYXRlcmlhbE1vcnBoIGV4dGVuZHMgUE1YTW9ycGgge1xuICBwcm90ZWN0ZWQgX191cGRhdGVQcm9ncmVzcyhjdXJyZW50OiBudW1iZXIsIGxhc3Q6IG51bWJlcik6IHZvaWQge1xuXG4gICAgY29uc3QgcmF0aW8gPSBjdXJyZW50IC0gbGFzdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVGFyZ2V0TW9ycGhEYXRhLm1vcnBoT2Zmc2V0Q291bnQ7ICsraSkge1xuICAgICAgY29uc3Qgdm0gPSB0aGlzLlRhcmdldE1vcnBoRGF0YS5tYXRlcmlhbE1vcnBoW2ldO1xuICAgICAgbGV0IHRhcmdldE1hdGVyaWFscyA7XG4gICAgICBpZiAodm0ubWF0ZXJpYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGFyZ2V0TWF0ZXJpYWxzID0gdGhpcy5fX21vZGVsLk1hdGVyaWFscztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldE1hdGVyaWFscyA9IFt0aGlzLl9fbW9kZWwuZ2V0UE1YTWF0ZXJpYWxCeUluZGV4KHZtLm1hdGVyaWFsSW5kZXgpXTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGFyZ2V0TWF0ZXJpYWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldE1hdGVyaWFsID0gdGFyZ2V0TWF0ZXJpYWxzW2pdO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB2bS5vcGVyYXRpb25UeXBlID09PSAxID8gdGFyZ2V0TWF0ZXJpYWwuYWRkTW9ycGhQYXJhbSA6IHRhcmdldE1hdGVyaWFsLm11bE1vcnBoUGFyYW07XG4gICAgICAgIHRhcmdldC5lZGdlU2l6ZSArPSByYXRpbyAqICh2bS5lZGdlU2l6ZSArIHZtLm9wZXJhdGlvblR5cGUgLSAxKTtcbiAgICAgICAgdGhpcy5fYXNzaWduTW9ycGhWYWx1ZXMoMywgdGFyZ2V0LmFtYmllbnQsIHZtLmFtYmllbnQsIHJhdGlvLCB2bS5vcGVyYXRpb25UeXBlKTtcbiAgICAgICAgdGhpcy5fYXNzaWduTW9ycGhWYWx1ZXMoNCwgdGFyZ2V0LmRpZmZ1c2UsIHZtLmRpZmZ1c2UsIHJhdGlvLCB2bS5vcGVyYXRpb25UeXBlKTtcbiAgICAgICAgdGhpcy5fYXNzaWduTW9ycGhWYWx1ZXMoNCwgdGFyZ2V0LnNwZWN1bGFyLCB2bS5zcGVjdWxhciwgcmF0aW8sIHZtLm9wZXJhdGlvblR5cGUpO1xuICAgICAgICB0aGlzLl9hc3NpZ25Nb3JwaFZhbHVlcyg0LCB0YXJnZXQuZWRnZUNvbG9yLCB2bS5lZGdlQ29sb3IsIHJhdGlvLCB2bS5vcGVyYXRpb25UeXBlKTtcbiAgICAgICAgdGhpcy5fYXNzaWduTW9ycGhWYWx1ZXMoNCwgdGFyZ2V0LnRleHR1cmVDb2VmZiwgdm0udGV4dHVyZUNvZWZmaWNpZW50LCByYXRpbywgdm0ub3BlcmF0aW9uVHlwZSk7XG4gICAgICAgIHRoaXMuX2Fzc2lnbk1vcnBoVmFsdWVzKDQsIHRhcmdldC5zcGhlcmVDb2VmZiwgdm0uc3BoZXJlVGV4dHVyZUNvZWZmaWNpZW50LCByYXRpbywgdm0ub3BlcmF0aW9uVHlwZSk7XG4gICAgICAgIHRoaXMuX2Fzc2lnbk1vcnBoVmFsdWVzKDQsIHRhcmdldC50b29uQ29lZmYsIHZtLnRvb25UZXh0dXJlQ29lZmZpY2llbnQsIHJhdGlvLCB2bS5vcGVyYXRpb25UeXBlKTtcblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2Fzc2lnbk1vcnBoVmFsdWVzKHZlY0xlbmd0aDogbnVtYmVyLCB0YXJnZXQ6IG51bWJlcltdLCBtb3JwaFZhbHVlczogbnVtYmVyW10sIHJhdGlvOiBudW1iZXIsIG9wVHlwZTogbnVtYmVyKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZWNMZW5ndGg7IGkrKykge1xuICAgICAgdGFyZ2V0W2ldICs9IHJhdGlvICogKG1vcnBoVmFsdWVzW2ldICsgb3BUeXBlIC0gMSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBNWE1vcnBoO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

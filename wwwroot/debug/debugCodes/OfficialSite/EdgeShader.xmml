<?xml version="1.0" encoding="UTF-8"?>
<material name="edgeshader" group="builtin.forward" order="300">
  <uniform-register>
    <register name="builtin.basic"/>
    <register name="builtin.buffer"/>
    <register name="builtin.time"/>
  </uniform-register>
  <passes>
    <pass>
      <glsl>
        <![CDATA[
      attribute vec3 position;
      attribute vec2 uv;
      varying vec2 vUv;
      varying vec4 vPosition;

      @vert {
        uniform mat4 _matPVM;

        void main(void)
        {
          gl_Position = vPosition = _matPVM * vec4(position,1.0);
          vUv = uv;
        }
      }

      @frag {

      vec2 calcLightUV(vec4 projectionSpacePos)
      {
         return (projectionSpacePos.xy/projectionSpacePos.w+vec2(1,1))/2.;
      }

      @{register:1,type:"buffer",name:"DLIGHT"}
      uniform sampler2D _dlBuffer;
      @{register:2,type:"buffer",name:"SLIGHT"}
      uniform sampler2D _slBuffer;
      uniform vec4 diffuse;
      uniform vec3 specular;
      uniform vec4 ambient;
      uniform vec3 ambientCoefficient;
      uniform float brightness;
      @{register:3,flag:"_textureUsed"}
      uniform sampler2D texture;
      uniform int _textureUsed;
      void main(void)
      {
        gl_FragColor=vec4(0,0,0,1);
        gl_FragColor.rgb+=ambient.rgb;
        ////calculate light uv
        vec2 lightUV=calcLightUV(vPosition);
        vec3 d = _textureUsed == 1 ? texture2D(texture,vUv).rgb : diffuse.rgb;
        gl_FragColor.rgb+= d * texture2D(_dlBuffer,lightUV).rgb+specular.rgb *texture2D(_slBuffer,lightUV).rgb;
        gl_FragColor.rgb += ambient.rgb;
      }
      }
      ]]>
      </glsl>
    </pass>
    <pass>
      <depth enabled="true" mode="LEQUAL"/>
      <glsl>
        <![CDATA[
      attribute vec3 position;
      attribute vec3 normal;
      uniform mediump vec2 _resolution;
      varying vec4 vPosition;

      @vert {
        uniform mat4 _matPVM;
        @{default:5.0}
        uniform float edgeSize;

        void main(void)
        {
          gl_Position = vPosition =  _matPVM * vec4(position,1.0);
        }
      }

      @frag {
        @import "builtin.gbuffer-reader"

        @{name:"PRIMARY",register:0,type:"buffer"}
        uniform sampler2D _gBuffer;

        @{default:[1,0,-1,2,0,-2,1,0,-1]}
        uniform float xKernel[9];

        @{default:[1,2,1,0,0,0,-1,-2,-1]}
        uniform float yKernel[9];

        uniform vec4 edgeColor;

        @{default:0.1}
        uniform float epsilon;

        uniform vec4 _Time;

        vec3 fetchNormal(vec2 point){
          point = point / _resolution;
          vec4 rawBuffer = texture2D(_gBuffer,point);
          return getNormal(rawBuffer);
        }

        void main(void)
        {
          vec2 offset[9];
          offset[0] = vec2(-1.0, -1.0);
          offset[1] = vec2( 0.0, -1.0);
          offset[2] = vec2( 1.0, -1.0);
          offset[3] = vec2(-1.0,  0.0);
          offset[4] = vec2( 0.0,  0.0);
          offset[5] = vec2( 1.0,  0.0);
          offset[6] = vec2(-1.0,  1.0);
          offset[7] = vec2( 0.0,  1.0);
          offset[8] = vec2( 1.0,  1.0);

          vec2 center = gl_FragCoord.st;
          vec3 xDiff = vec3(0.);
          vec3 yDiff = vec3(0.);
          for(int i = 0; i < 9; i++){
            xDiff += fetchNormal(center + offset[i]) * xKernel[i];
            yDiff += fetchNormal(center + offset[i]) * yKernel[i];
          }
          vec2 diff = vec2(length(xDiff),length(yDiff));
          if(length(diff) < epsilon)discard;
          gl_FragColor.xyz = edgeColor.xyz * abs(sin(_Time.x/1000. * vPosition.xyz));
          gl_FragColor.a = 1.;
        }
      }
      ]]>
      </glsl>
    </pass>
  </passes>
</material>

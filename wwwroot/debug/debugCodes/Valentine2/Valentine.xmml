<?xml version="1.0" encoding="UTF-8"?>
<material name="valentine" group="builtin.forward" order="300">
  <uniform-register>
    <register name="builtin.basic"/>
    <register name="builtin.buffer"/>
  </uniform-register>
  <passes>
    <pass>
      <glsl>
        <![CDATA[
      attribute vec3 position;

      @vert {
        uniform mat4 _matPVM;

        void main(void)
        {
          gl_Position =  _matPVM * vec4(position,1.0);
        }
      }

      @frag {
        void main(void)
        {
          gl_FragColor = vec4(0,0,1,1);
        }
      }
      ]]>
      </glsl>
    </pass>
    <pass>
      <depth enabled="true" mode="LEQUAL"/>
      <glsl>
        <![CDATA[
      attribute vec3 position;
      attribute vec3 normal;
      uniform mediump vec2 _resolution;
      varying vec4 vPosition;

      @vert {
        uniform mat4 _matPVM;
        @{default:5.0}
        uniform float edgeSize;

        void main(void)
        {
          gl_Position =  _matPVM * vec4(position,1.0);
        }
      }

      @frag {
        @import "builtin.gbuffer-reader"

        @{name:"PRIMARY",register:0,type:"buffer"}
        uniform sampler2D _gBuffer;

        @{default:[1,0,-1,2,0,-2,1,0,-1]}
        uniform float xKernel[9];

        @{default:[1,2,1,0,0,0,-1,-2,-1]}
        uniform float yKernel[9];

        uniform vec4 edgeColor;

        vec3 fetchNormal(vec2 point){
          point = point / _resolution;
          vec4 rawBuffer = texture2D(_gBuffer,point);
          return getNormal(rawBuffer);
        }

        void main(void)
        {
          vec2 offset[9];
          offset[0] = vec2(-1.0, -1.0);
          offset[1] = vec2( 0.0, -1.0);
          offset[2] = vec2( 1.0, -1.0);
          offset[3] = vec2(-1.0,  0.0);
          offset[4] = vec2( 0.0,  0.0);
          offset[5] = vec2( 1.0,  0.0);
          offset[6] = vec2(-1.0,  1.0);
          offset[7] = vec2( 0.0,  1.0);
          offset[8] = vec2( 1.0,  1.0);

          vec2 center = gl_FragCoord.st;
          vec3 xDiff = vec3(0.);
          vec3 yDiff = vec3(0.);
          for(int i = 0; i < 9; i++){
            xDiff += fetchNormal(center + offset[i]) * xKernel[i];
            yDiff += fetchNormal(center + offset[i]) * yKernel[i];
          }

          vec2 diff = vec2(length(xDiff),length(yDiff));
          if(length(diff) < 0.3)discard;
          gl_FragColor = edgeColor;
        }
      }
      ]]>
      </glsl>
    </pass>
    <pass>
      <cull enabled="true" mode="FRONT"/>
      <glsl>
        <![CDATA[
      attribute vec3 position;
      attribute vec3 normal;

      @vert {
        uniform mat4 _matPVM;
        @{default:5.0}
        uniform float edgeSize;
        uniform vec2 _resolution;

        void main(void)
        {
          vec4 p0 = _matPVM * vec4(position,1.0);
          vec4 p1 = _matPVM * vec4(position + normal,1.0);
          p0.xy /= p0.w;
          p1.xy /= p1.w;
          float coeff = length(_resolution.xy / 2. * abs(p1.xy-p0.xy));
          coeff = 1. / coeff;
          gl_Position =  _matPVM * vec4(position + normal * coeff * edgeSize,1.0);
        }
      }


      @frag {
        @{default:[1,0,0,1]}
        uniform vec4 edgeColor;
        void main(void)
        {
          gl_FragColor = edgeColor;
        }
      }
      ]]>
      </glsl>
    </pass>
  </passes>
</material>
